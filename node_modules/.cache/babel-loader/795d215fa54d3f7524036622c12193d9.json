{"ast":null,"code":"import { FirebaseServices } from \"../../../utils/firebaseServices\";\nimport { LocalStorage } from \"../../../utils/localStorage\";\nimport { RoutePath } from \"../../../utils/routePath\";\nimport { Networking } from \"../../networking\";\nimport { Response } from \"../../response\";\nimport { Newsletter } from \"../models/newsletter_model\";\nexport class NewsletterRepo {\n  constructor() {\n    this.networking = new Networking();\n  }\n\n  async subscribeNewsletter(props) {\n    // Initialize the save user model\n    const subscribeNewsletter = new Newsletter({\n      email: props.email\n    }); // Object to Map, then to JSON\n\n    const body = Object.fromEntries(subscribeNewsletter.toJson());\n    let headers = {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${await LocalStorage.getAccessToken()}`\n    };\n    let response = await this.networking.postData(\"subscribe_newsletter\", // API choice is depends on the usage\n    body, headers); // If data is retrieved and the data is not empty, then return\n\n    if (response.isSuccess && response.data !== null && response.data !== \"\") {\n      console.log(response.data);\n      return new Response(true, response.message, true); // If data is retrieved and the data is empty, then return\n    } else if (response.isSuccess && response.message === \"No records found\") {\n      return new Response(true, \"No records found\", \"\"); // If http method is timeout or being halt, then return\n    } else if (!response.isSuccess && response.message === \"Session expired\") {\n      // Go back to default page if session expired\n      await FirebaseServices.signOut();\n      await LocalStorage.resetStorage();\n      alert(\"Session Expired.Please sign in again.\");\n      props === null || props === void 0 ? void 0 : props.history.replace(RoutePath.default);\n      return new Response(false, \"Session expired\", \"\"); // If http method is timeout or being halt, then return\n    } else if (!response.isSuccess) {\n      return new Response(false, response.message, \"\");\n    } else {\n      return new Response(false, response.message, response.data);\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/gohshengyang/Documents/GitHub/zeusapi-web/src/services/api/repositories/newsletter_repo.tsx"],"names":["FirebaseServices","LocalStorage","RoutePath","Networking","Response","Newsletter","NewsletterRepo","networking","subscribeNewsletter","props","email","body","Object","fromEntries","toJson","headers","Authorization","getAccessToken","response","postData","isSuccess","data","console","log","message","signOut","resetStorage","alert","history","replace","default"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,iCAAjC;AACA,SAASC,YAAT,QAA6B,6BAA7B;AACA,SAASC,SAAT,QAA0B,0BAA1B;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,UAAT,QAA2B,4BAA3B;AAEA,OAAO,MAAMC,cAAN,CAAqB;AAAA;AAAA,SAC3BC,UAD2B,GACd,IAAIJ,UAAJ,EADc;AAAA;;AAGF,QAAnBK,mBAAmB,CAACC,KAAD,EAGH;AACrB;AACA,UAAMD,mBAAmB,GAAG,IAAIH,UAAJ,CAAe;AAC1CK,MAAAA,KAAK,EAAED,KAAK,CAACC;AAD6B,KAAf,CAA5B,CAFqB,CAMrB;;AACA,UAAMC,IAAI,GAAGC,MAAM,CAACC,WAAP,CAAmBL,mBAAmB,CAACM,MAApB,EAAnB,CAAb;AAEA,QAAIC,OAAO,GAAG;AACb,sBAAgB,kBADH;AAEbC,MAAAA,aAAa,EAAG,UAAS,MAAMf,YAAY,CAACgB,cAAb,EAA8B;AAFhD,KAAd;AAKA,QAAIC,QAAQ,GAAG,MAAM,KAAKX,UAAL,CAAgBY,QAAhB,CACpB,sBADoB,EACI;AACxBR,IAAAA,IAFoB,EAGpBI,OAHoB,CAArB,CAdqB,CAoBrB;;AACA,QACCG,QAAQ,CAACE,SAAT,IACAF,QAAQ,CAACG,IAAT,KAAkB,IADlB,IAEAH,QAAQ,CAACG,IAAT,KAAkB,EAHnB,EAIE;AACDC,MAAAA,OAAO,CAACC,GAAR,CAAYL,QAAQ,CAACG,IAArB;AACA,aAAO,IAAIjB,QAAJ,CAAa,IAAb,EAAmBc,QAAQ,CAACM,OAA5B,EAAqC,IAArC,CAAP,CAFC,CAID;AACA,KATD,MASO,IACNN,QAAQ,CAACE,SAAT,IACAF,QAAQ,CAACM,OAAT,KAAqB,kBAFf,EAGL;AACD,aAAO,IAAIpB,QAAJ,CAAa,IAAb,EAAmB,kBAAnB,EAAuC,EAAvC,CAAP,CADC,CAGD;AACA,KAPM,MAOA,IACN,CAACc,QAAQ,CAACE,SAAV,IACAF,QAAQ,CAACM,OAAT,KAAqB,iBAFf,EAGL;AACD;AACA,YAAMxB,gBAAgB,CAACyB,OAAjB,EAAN;AACA,YAAMxB,YAAY,CAACyB,YAAb,EAAN;AACAC,MAAAA,KAAK,CAAC,uCAAD,CAAL;AACAlB,MAAAA,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEmB,OAAP,CAAeC,OAAf,CAAuB3B,SAAS,CAAC4B,OAAjC;AACA,aAAO,IAAI1B,QAAJ,CAAa,KAAb,EAAoB,iBAApB,EAAuC,EAAvC,CAAP,CANC,CAQD;AACA,KAZM,MAYA,IAAI,CAACc,QAAQ,CAACE,SAAd,EAAyB;AAC/B,aAAO,IAAIhB,QAAJ,CAAa,KAAb,EAAoBc,QAAQ,CAACM,OAA7B,EAAsC,EAAtC,CAAP;AACA,KAFM,MAEA;AACN,aAAO,IAAIpB,QAAJ,CAAa,KAAb,EAAoBc,QAAQ,CAACM,OAA7B,EAAsCN,QAAQ,CAACG,IAA/C,CAAP;AACA;AACD;;AA5D0B","sourcesContent":["import { FirebaseServices } from \"../../../utils/firebaseServices\";\nimport { LocalStorage } from \"../../../utils/localStorage\";\nimport { RoutePath } from \"../../../utils/routePath\";\nimport { Networking } from \"../../networking\";\nimport { Response } from \"../../response\";\nimport { Newsletter } from \"../models/newsletter_model\";\n\nexport class NewsletterRepo {\n\tnetworking = new Networking();\n\n\tasync subscribeNewsletter(props: {\n\t\thistory?: any;\n\t\temail?: string;\n\t}): Promise<Response> {\n\t\t// Initialize the save user model\n\t\tconst subscribeNewsletter = new Newsletter({\n\t\t\temail: props.email,\n\t\t});\n\n\t\t// Object to Map, then to JSON\n\t\tconst body = Object.fromEntries(subscribeNewsletter.toJson());\n\n\t\tlet headers = {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tAuthorization: `Bearer ${await LocalStorage.getAccessToken()}`,\n\t\t};\n\n\t\tlet response = await this.networking.postData(\n\t\t\t\"subscribe_newsletter\", // API choice is depends on the usage\n\t\t\tbody,\n\t\t\theaders\n\t\t);\n\n\t\t// If data is retrieved and the data is not empty, then return\n\t\tif (\n\t\t\tresponse.isSuccess &&\n\t\t\tresponse.data !== null &&\n\t\t\tresponse.data !== \"\"\n\t\t) {\n\t\t\tconsole.log(response.data)\n\t\t\treturn new Response(true, response.message, true);\n\n\t\t\t// If data is retrieved and the data is empty, then return\n\t\t} else if (\n\t\t\tresponse.isSuccess &&\n\t\t\tresponse.message === \"No records found\"\n\t\t) {\n\t\t\treturn new Response(true, \"No records found\", \"\");\n\n\t\t\t// If http method is timeout or being halt, then return\n\t\t} else if (\n\t\t\t!response.isSuccess &&\n\t\t\tresponse.message === \"Session expired\"\n\t\t) {\n\t\t\t// Go back to default page if session expired\n\t\t\tawait FirebaseServices.signOut();\n\t\t\tawait LocalStorage.resetStorage();\n\t\t\talert(\"Session Expired.Please sign in again.\");\n\t\t\tprops?.history.replace(RoutePath.default);\n\t\t\treturn new Response(false, \"Session expired\", \"\");\n\n\t\t\t// If http method is timeout or being halt, then return\n\t\t} else if (!response.isSuccess) {\n\t\t\treturn new Response(false, response.message, \"\");\n\t\t} else {\n\t\t\treturn new Response(false, response.message, response.data);\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}