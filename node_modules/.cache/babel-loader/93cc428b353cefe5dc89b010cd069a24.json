{"ast":null,"code":"import { Networking } from \"../../networking\";\nimport { Response } from \"../../response\";\nimport { Newsletter } from \"../models/newsletter_model\";\nexport class NewsletterRepo {\n  constructor() {\n    this.networking = new Networking();\n  }\n\n  async subscribeNewsletter(props) {\n    // Initialize the save user model\n    const subscribeNewsletter = new Newsletter({\n      email: props.email\n    }); // Object to Map, then to JSON\n\n    const body = Object.fromEntries(subscribeNewsletter.toJson());\n    let headers = {\n      \"Content-Type\": \"application/json\"\n    };\n    let response = await this.networking.postData(\"subscribe_newsletter\", // API choice is depends on the usage\n    body, headers); // If data is retrieved and the data is not empty, then return\n\n    if (response.isSuccess && response.data !== null && response.data !== \"\") {\n      return new Response(true, response.message, true); // If data is retrieved and the data is empty, then return\n    } else if (response.isSuccess && response.message === \"No records found\") {\n      return new Response(true, \"No records found\", \"\"); // If http method is timeout or being halt, then return\n    } else if (!response.isSuccess) {\n      return new Response(false, response.message, \"\");\n    } else {\n      return new Response(false, response.message, response.data);\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/gohshengyang/Documents/GitHub/pagestore-web/src/services/api/repositories/newsletter_repo.tsx"],"names":["Networking","Response","Newsletter","NewsletterRepo","networking","subscribeNewsletter","props","email","body","Object","fromEntries","toJson","headers","response","postData","isSuccess","data","message"],"mappings":"AACA,SAASA,UAAT,QAA2B,kBAA3B;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,UAAT,QAA2B,4BAA3B;AAGA,OAAO,MAAMC,cAAN,CAAqB;AAAA;AAAA,SAC3BC,UAD2B,GACd,IAAIJ,UAAJ,EADc;AAAA;;AAGF,QAAnBK,mBAAmB,CAACC,KAAD,EAGH;AACrB;AACA,UAAMD,mBAAmB,GAAG,IAAIH,UAAJ,CAAe;AAC1CK,MAAAA,KAAK,EAAED,KAAK,CAACC;AAD6B,KAAf,CAA5B,CAFqB,CAOrB;;AACA,UAAMC,IAAI,GAAGC,MAAM,CAACC,WAAP,CAAmBL,mBAAmB,CAACM,MAApB,EAAnB,CAAb;AAEA,QAAIC,OAAO,GAAG;AACb,sBAAgB;AADH,KAAd;AAIA,QAAIC,QAAQ,GAAG,MAAM,KAAKT,UAAL,CAAgBU,QAAhB,CACpB,sBADoB,EACI;AACxBN,IAAAA,IAFoB,EAGpBI,OAHoB,CAArB,CAdqB,CAoBrB;;AACA,QACCC,QAAQ,CAACE,SAAT,IACAF,QAAQ,CAACG,IAAT,KAAkB,IADlB,IAEAH,QAAQ,CAACG,IAAT,KAAkB,EAHnB,EAIE;AACD,aAAO,IAAIf,QAAJ,CAAa,IAAb,EAAmBY,QAAQ,CAACI,OAA5B,EAAqC,IAArC,CAAP,CADC,CAGD;AACA,KARD,MAQO,IACNJ,QAAQ,CAACE,SAAT,IACAF,QAAQ,CAACI,OAAT,KAAqB,kBAFf,EAGL;AACD,aAAO,IAAIhB,QAAJ,CAAa,IAAb,EAAmB,kBAAnB,EAAuC,EAAvC,CAAP,CADC,CAGD;AACA,KAPM,MAOA,IAAI,CAACY,QAAQ,CAACE,SAAd,EAAyB;AAC/B,aAAO,IAAId,QAAJ,CAAa,KAAb,EAAoBY,QAAQ,CAACI,OAA7B,EAAsC,EAAtC,CAAP;AACA,KAFM,MAEA;AACN,aAAO,IAAIhB,QAAJ,CAAa,KAAb,EAAoBY,QAAQ,CAACI,OAA7B,EAAsCJ,QAAQ,CAACG,IAA/C,CAAP;AACA;AACD;;AA/C0B","sourcesContent":["import { LocalStorage } from \"../../../utils/localStorage\";\nimport { Networking } from \"../../networking\";\nimport { Response } from \"../../response\";\nimport { Newsletter } from \"../models/newsletter_model\";\nimport { GetUserByIdResponse, User } from \"../models/user_model\";\n\nexport class NewsletterRepo {\n\tnetworking = new Networking();\n\n\tasync subscribeNewsletter(props: {\n\n\t\temail?: string;\n\t}): Promise<Response> {\n\t\t// Initialize the save user model\n\t\tconst subscribeNewsletter = new Newsletter({\n\t\t\temail: props.email,\n\n\t\t});\n\n\t\t// Object to Map, then to JSON\n\t\tconst body = Object.fromEntries(subscribeNewsletter.toJson());\n\n\t\tlet headers = {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t};\n\n\t\tlet response = await this.networking.postData(\n\t\t\t\"subscribe_newsletter\", // API choice is depends on the usage\n\t\t\tbody,\n\t\t\theaders\n\t\t);\n\n\t\t// If data is retrieved and the data is not empty, then return\n\t\tif (\n\t\t\tresponse.isSuccess &&\n\t\t\tresponse.data !== null &&\n\t\t\tresponse.data !== \"\"\n\t\t) {\n\t\t\treturn new Response(true, response.message, true);\n\n\t\t\t// If data is retrieved and the data is empty, then return\n\t\t} else if (\n\t\t\tresponse.isSuccess &&\n\t\t\tresponse.message === \"No records found\"\n\t\t) {\n\t\t\treturn new Response(true, \"No records found\", \"\");\n\n\t\t\t// If http method is timeout or being halt, then return\n\t\t} else if (!response.isSuccess) {\n\t\t\treturn new Response(false, response.message, \"\");\n\t\t} else {\n\t\t\treturn new Response(false, response.message, response.data);\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}