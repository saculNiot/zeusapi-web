{"ast":null,"code":"import { FirebaseServices } from \"../../../utils/firebaseServices\";\nimport { LocalStorage } from \"../../../utils/localStorage\";\nimport { RoutePath } from \"../../../utils/routePath\";\nimport { Networking } from \"../../networking\";\nimport { Response } from \"../../response\";\nimport { GetPaymentResponse, Payment } from \"../models/payment_model\";\nexport class PaymentRepo {\n  constructor() {\n    this.networking = new Networking();\n  }\n\n  async getCheckoutSessionUrl(props) {\n    const path = `userId=${props === null || props === void 0 ? void 0 : props.userId}&productId=${props === null || props === void 0 ? void 0 : props.productId}`;\n    const headers = {\n      \"Authorization\": `Bearer ${await LocalStorage.getAccessToken()}`\n    };\n    let response = await this.networking.getData(`get_checkout_session_url?${path}`, headers); // If data is retrieved and the data is not empty, then return\n\n    if (response.isSuccess && response.data !== null && response.data !== \"\") {\n      let getPaymentResponse = new GetPaymentResponse().fromJson(response.data);\n      return new Response(true, response.message, getPaymentResponse); // If data is retrieved and the data is empty, then return\n    } else if (response.isSuccess && response.message === \"No records found\") {\n      return new Response(true, \"No records found\", \"\"); // If http method is timeout or being halt, then return\n    } else if (response.isSuccess && response.message === \"Session expired\") {\n      // Go back to default page if session expired\n      await FirebaseServices.signOut();\n      await LocalStorage.resetStorage();\n      props === null || props === void 0 ? void 0 : props.history.replace(RoutePath.default);\n      return new Response(false, \"Session expired\", \"\"); // If http method is timeout or being halt, then return\n    } else if (!response.isSuccess) {\n      return new Response(false, response.message, \"\");\n    } else {\n      return new Response(false, response.message, response.data);\n    }\n  }\n\n  async getCustomerPortalSessionUrl(props) {\n    const path = `userId=${props === null || props === void 0 ? void 0 : props.userId}&email=${props === null || props === void 0 ? void 0 : props.email}`;\n    const headers = {\n      \"Authorization\": `Bearer ${await LocalStorage.getAccessToken()}`\n    };\n    let response = await this.networking.getData(`get_customer_payment_portal_url?${path}`, headers); // If data is retrieved and the data is not empty, then return\n\n    if (response.isSuccess && response.data !== null && response.data !== \"\") {\n      let getPaymentResponse = new GetPaymentResponse().fromJson(response.data);\n      return new Response(true, response.message, getPaymentResponse); // If data is retrieved and the data is empty, then return\n    } else if (response.isSuccess && response.message === \"No records found\") {\n      return new Response(true, \"No records found\", \"\"); // If http method is timeout or being halt, then return\n    } else if (response.isSuccess && response.message === \"Session expired\") {\n      // Go back to default page if session expired\n      await FirebaseServices.signOut();\n      await LocalStorage.resetStorage();\n      props === null || props === void 0 ? void 0 : props.history.replace(RoutePath.default);\n      return new Response(false, \"Session expired\", \"\"); // If http method is timeout or being halt, then return\n    } else if (!response.isSuccess) {\n      return new Response(false, response.message, \"\");\n    } else {\n      return new Response(false, response.message, response.data);\n    }\n  }\n\n  async savePayment(props) {\n    // Initialize the save user model\n    const savePayment = new Payment(props.userId, props.email, props.paymentMethodId, props.productId, props.amount); // Object to Map, then to JSON\n\n    const body = Object.fromEntries(savePayment.toJson());\n    let headers = {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": `Bearer ${await LocalStorage.getAccessToken()}`\n    };\n    let response = await this.networking.postData(\"checkout_payment\", body, headers); // If data is retrieved and the data is not empty, then return\n\n    if (response.isSuccess && response.data !== null && response.data !== \"\") {\n      return new Response(true, response.message, response.data); // If data is retrieved and the data is empty, then return\n    } else if (response.isSuccess && response.message === \"No records found\") {\n      return new Response(true, \"No records found\", \"\"); // If http method is timeout or being halt, then return\n    } else if (!response.isSuccess) {\n      return new Response(false, response.message, \"\");\n    } else {\n      return new Response(false, response.message, response.data);\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/gohshengyang/Documents/GitHub/zeusapi-web/src/services/api/repositories/payment_repo.tsx"],"names":["FirebaseServices","LocalStorage","RoutePath","Networking","Response","GetPaymentResponse","Payment","PaymentRepo","networking","getCheckoutSessionUrl","props","path","userId","productId","headers","getAccessToken","response","getData","isSuccess","data","getPaymentResponse","fromJson","message","signOut","resetStorage","history","replace","default","getCustomerPortalSessionUrl","email","savePayment","paymentMethodId","amount","body","Object","fromEntries","toJson","postData"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,iCAAjC;AACA,SAASC,YAAT,QAA6B,6BAA7B;AACA,SAASC,SAAT,QAA0B,0BAA1B;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,kBAAT,EAA6BC,OAA7B,QAA4C,yBAA5C;AAEA,OAAO,MAAMC,WAAN,CAAkB;AAAA;AAAA,SACrBC,UADqB,GACR,IAAIL,UAAJ,EADQ;AAAA;;AAGM,QAArBM,qBAAqB,CAACC,KAAD,EAAkF;AACzG,UAAMC,IAAI,GAAI,UAASD,KAAV,aAAUA,KAAV,uBAAUA,KAAK,CAAEE,MAAO,cAAaF,KAArC,aAAqCA,KAArC,uBAAqCA,KAAK,CAAEG,SAAU,EAAnE;AACA,UAAMC,OAAO,GAAG;AACrB,uBAAkB,UAAS,MAAMb,YAAY,CAACc,cAAb,EAA8B;AAD1C,KAAhB;AAGA,QAAIC,QAAQ,GAAG,MAAM,KAAKR,UAAL,CAAgBS,OAAhB,CAAyB,4BAA2BN,IAAK,EAAzD,EAA2DG,OAA3D,CAArB,CALyG,CAMzG;;AACA,QACIE,QAAQ,CAACE,SAAT,IACAF,QAAQ,CAACG,IAAT,KAAkB,IADlB,IAEAH,QAAQ,CAACG,IAAT,KAAkB,EAHtB,EAIE;AACE,UAAIC,kBAAkB,GAAG,IAAIf,kBAAJ,GAAyBgB,QAAzB,CACrBL,QAAQ,CAACG,IADY,CAAzB;AAGA,aAAO,IAAIf,QAAJ,CACH,IADG,EAEHY,QAAQ,CAACM,OAFN,EAGHF,kBAHG,CAAP,CAJF,CAUE;AACH,KAfD,MAeO,IACHJ,QAAQ,CAACE,SAAT,IACAF,QAAQ,CAACM,OAAT,KAAqB,kBAFlB,EAGL;AACE,aAAO,IAAIlB,QAAJ,CAAa,IAAb,EAAmB,kBAAnB,EAAuC,EAAvC,CAAP,CADF,CAGE;AACH,KAPM,MAOA,IACZY,QAAQ,CAACE,SAAT,IACAF,QAAQ,CAACM,OAAT,KAAqB,iBAFT,EAGX;AACD;AACA,YAAMtB,gBAAgB,CAACuB,OAAjB,EAAN;AACA,YAAMtB,YAAY,CAACuB,YAAb,EAAN;AACAd,MAAAA,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEe,OAAP,CAAeC,OAAf,CAAuBxB,SAAS,CAACyB,OAAjC;AACA,aAAO,IAAIvB,QAAJ,CAAa,KAAb,EAAoB,iBAApB,EAAuC,EAAvC,CAAP,CALC,CAOD;AACA,KAXY,MAWP,IAAI,CAACY,QAAQ,CAACE,SAAd,EAAyB;AACrB,aAAO,IAAId,QAAJ,CAAa,KAAb,EAAoBY,QAAQ,CAACM,OAA7B,EAAsC,EAAtC,CAAP;AACH,KAFD,MAEO;AACH,aAAO,IAAIlB,QAAJ,CAAa,KAAb,EAAoBY,QAAQ,CAACM,OAA7B,EAAsCN,QAAQ,CAACG,IAA/C,CAAP;AACH;AACJ;;AAEgC,QAA3BS,2BAA2B,CAAClB,KAAD,EAA4E;AACzG,UAAMC,IAAI,GAAI,UAASD,KAAV,aAAUA,KAAV,uBAAUA,KAAK,CAAEE,MAAO,UAASF,KAAjC,aAAiCA,KAAjC,uBAAiCA,KAAK,CAAEmB,KAAM,EAA3D;AACA,UAAMf,OAAO,GAAG;AACrB,uBAAkB,UAAS,MAAMb,YAAY,CAACc,cAAb,EAA8B;AAD1C,KAAhB;AAGA,QAAIC,QAAQ,GAAG,MAAM,KAAKR,UAAL,CAAgBS,OAAhB,CAAyB,mCAAkCN,IAAK,EAAhE,EAAkEG,OAAlE,CAArB,CALyG,CAMzG;;AACA,QACIE,QAAQ,CAACE,SAAT,IACAF,QAAQ,CAACG,IAAT,KAAkB,IADlB,IAEAH,QAAQ,CAACG,IAAT,KAAkB,EAHtB,EAIE;AACE,UAAIC,kBAAkB,GAAG,IAAIf,kBAAJ,GAAyBgB,QAAzB,CACrBL,QAAQ,CAACG,IADY,CAAzB;AAGA,aAAO,IAAIf,QAAJ,CACH,IADG,EAEHY,QAAQ,CAACM,OAFN,EAGHF,kBAHG,CAAP,CAJF,CAUE;AACH,KAfD,MAeO,IACHJ,QAAQ,CAACE,SAAT,IACAF,QAAQ,CAACM,OAAT,KAAqB,kBAFlB,EAGL;AACE,aAAO,IAAIlB,QAAJ,CAAa,IAAb,EAAmB,kBAAnB,EAAuC,EAAvC,CAAP,CADF,CAGE;AACH,KAPM,MAOA,IACZY,QAAQ,CAACE,SAAT,IACAF,QAAQ,CAACM,OAAT,KAAqB,iBAFT,EAGX;AACD;AACA,YAAMtB,gBAAgB,CAACuB,OAAjB,EAAN;AACA,YAAMtB,YAAY,CAACuB,YAAb,EAAN;AACAd,MAAAA,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEe,OAAP,CAAeC,OAAf,CAAuBxB,SAAS,CAACyB,OAAjC;AACA,aAAO,IAAIvB,QAAJ,CAAa,KAAb,EAAoB,iBAApB,EAAuC,EAAvC,CAAP,CALC,CAOD;AACA,KAXY,MAWP,IAAI,CAACY,QAAQ,CAACE,SAAd,EAAyB;AACrB,aAAO,IAAId,QAAJ,CAAa,KAAb,EAAoBY,QAAQ,CAACM,OAA7B,EAAsC,EAAtC,CAAP;AACH,KAFD,MAEO;AACH,aAAO,IAAIlB,QAAJ,CAAa,KAAb,EAAoBY,QAAQ,CAACM,OAA7B,EAAsCN,QAAQ,CAACG,IAA/C,CAAP;AACH;AACJ;;AAEgB,QAAXW,WAAW,CAACpB,KAAD,EAOK;AAClB;AACA,UAAMoB,WAAW,GAAG,IAAIxB,OAAJ,CAChBI,KAAK,CAACE,MADU,EAEhBF,KAAK,CAACmB,KAFU,EAGhBnB,KAAK,CAACqB,eAHU,EAIhBrB,KAAK,CAACG,SAJU,EAKhBH,KAAK,CAACsB,MALU,CAApB,CAFkB,CAUlB;;AACA,UAAMC,IAAI,GAAGC,MAAM,CAACC,WAAP,CAAmBL,WAAW,CAACM,MAAZ,EAAnB,CAAb;AAEA,QAAItB,OAAO,GAAG;AACV,sBAAgB,kBADN;AAEnB,uBAAkB,UAAS,MAAMb,YAAY,CAACc,cAAb,EAA8B;AAF5C,KAAd;AAKA,QAAIC,QAAQ,GAAG,MAAM,KAAKR,UAAL,CAAgB6B,QAAhB,CACjB,kBADiB,EAEjBJ,IAFiB,EAGjBnB,OAHiB,CAArB,CAlBkB,CAwBlB;;AACA,QACIE,QAAQ,CAACE,SAAT,IACAF,QAAQ,CAACG,IAAT,KAAkB,IADlB,IAEAH,QAAQ,CAACG,IAAT,KAAkB,EAHtB,EAIE;AACE,aAAO,IAAIf,QAAJ,CAAa,IAAb,EAAmBY,QAAQ,CAACM,OAA5B,EAAqCN,QAAQ,CAACG,IAA9C,CAAP,CADF,CAGE;AACH,KARD,MAQO,IACHH,QAAQ,CAACE,SAAT,IACAF,QAAQ,CAACM,OAAT,KAAqB,kBAFlB,EAGL;AACE,aAAO,IAAIlB,QAAJ,CAAa,IAAb,EAAmB,kBAAnB,EAAuC,EAAvC,CAAP,CADF,CAGE;AACH,KAPM,MAOA,IAAI,CAACY,QAAQ,CAACE,SAAd,EAAyB;AAC5B,aAAO,IAAId,QAAJ,CAAa,KAAb,EAAoBY,QAAQ,CAACM,OAA7B,EAAsC,EAAtC,CAAP;AACH,KAFM,MAEA;AACH,aAAO,IAAIlB,QAAJ,CAAa,KAAb,EAAoBY,QAAQ,CAACM,OAA7B,EAAsCN,QAAQ,CAACG,IAA/C,CAAP;AACH;AACJ;;AArJoB","sourcesContent":["import { FirebaseServices } from \"../../../utils/firebaseServices\";\nimport { LocalStorage } from \"../../../utils/localStorage\";\nimport { RoutePath } from \"../../../utils/routePath\";\nimport { Networking } from \"../../networking\";\nimport { Response } from \"../../response\";\nimport { GetPaymentResponse, Payment } from \"../models/payment_model\";\n\nexport class PaymentRepo {\n    networking = new Networking();\n\n    async getCheckoutSessionUrl(props?: {history?: any, userId: string, productId?: string }): Promise<Response> {\n        const path = `userId=${props?.userId}&productId=${props?.productId}`;\n        const headers = {\n\t\t\t\"Authorization\": `Bearer ${await LocalStorage.getAccessToken()}`,\n        }\n        let response = await this.networking.getData(`get_checkout_session_url?${path}`,headers);\n        // If data is retrieved and the data is not empty, then return\n        if (\n            response.isSuccess &&\n            response.data !== null &&\n            response.data !== \"\"\n        ) {\n            let getPaymentResponse = new GetPaymentResponse().fromJson(\n                response.data\n            );\n            return new Response(\n                true,\n                response.message,\n                getPaymentResponse\n            );\n\n            // If data is retrieved and the data is empty, then return\n        } else if (\n            response.isSuccess &&\n            response.message === \"No records found\"\n        ) {\n            return new Response(true, \"No records found\", \"\");\n\n            // If http method is timeout or being halt, then return\n        } else if (\n\t\t\tresponse.isSuccess &&\n\t\t\tresponse.message === \"Session expired\"\n\t\t) {\n\t\t\t// Go back to default page if session expired\n\t\t\tawait FirebaseServices.signOut();\n\t\t\tawait LocalStorage.resetStorage();\n\t\t\tprops?.history.replace(RoutePath.default);\n\t\t\treturn new Response(false, \"Session expired\", \"\");\n\n\t\t\t// If http method is timeout or being halt, then return\n\t\t}else if (!response.isSuccess) {\n            return new Response(false, response.message, \"\");\n        } else {\n            return new Response(false, response.message, response.data);\n        }\n    }\n\n    async getCustomerPortalSessionUrl(props?: {history?: any, userId: string, email:string }): Promise<Response> {\n        const path = `userId=${props?.userId}&email=${props?.email}`;\n        const headers = {\n\t\t\t\"Authorization\": `Bearer ${await LocalStorage.getAccessToken()}`,\n        }\n        let response = await this.networking.getData(`get_customer_payment_portal_url?${path}`,headers);\n        // If data is retrieved and the data is not empty, then return\n        if (\n            response.isSuccess &&\n            response.data !== null &&\n            response.data !== \"\"\n        ) {\n            let getPaymentResponse = new GetPaymentResponse().fromJson(\n                response.data\n            );\n            return new Response(\n                true,\n                response.message,\n                getPaymentResponse\n            );\n\n            // If data is retrieved and the data is empty, then return\n        } else if (\n            response.isSuccess &&\n            response.message === \"No records found\"\n        ) {\n            return new Response(true, \"No records found\", \"\");\n\n            // If http method is timeout or being halt, then return\n        } else if (\n\t\t\tresponse.isSuccess &&\n\t\t\tresponse.message === \"Session expired\"\n\t\t) {\n\t\t\t// Go back to default page if session expired\n\t\t\tawait FirebaseServices.signOut();\n\t\t\tawait LocalStorage.resetStorage();\n\t\t\tprops?.history.replace(RoutePath.default);\n\t\t\treturn new Response(false, \"Session expired\", \"\");\n\n\t\t\t// If http method is timeout or being halt, then return\n\t\t}else if (!response.isSuccess) {\n            return new Response(false, response.message, \"\");\n        } else {\n            return new Response(false, response.message, response.data);\n        }\n    }\n\n    async savePayment(props :{\n        history?: any,\n        userId?: string,\n        email?: string,\n        paymentMethodId?: string,\n        productId?: string,\n        amount?: number\n    }): Promise<Response> {\n        // Initialize the save user model\n        const savePayment = new Payment(\n            props.userId,\n            props.email,\n            props.paymentMethodId,\n            props.productId,\n            props.amount\n        );\n\n        // Object to Map, then to JSON\n        const body = Object.fromEntries(savePayment.toJson());\n\n        let headers = {\n            \"Content-Type\": \"application/json\",\n\t\t\t\"Authorization\": `Bearer ${await LocalStorage.getAccessToken()}`,\n        };\n\n        let response = await this.networking.postData(\n            \"checkout_payment\",\n            body,\n            headers\n        );\n\n        // If data is retrieved and the data is not empty, then return\n        if (\n            response.isSuccess &&\n            response.data !== null &&\n            response.data !== \"\"\n        ) {\n            return new Response(true, response.message, response.data);\n\n            // If data is retrieved and the data is empty, then return\n        } else if (\n            response.isSuccess &&\n            response.message === \"No records found\"\n        ) {\n            return new Response(true, \"No records found\", \"\");\n\n            // If http method is timeout or being halt, then return\n        } else if (!response.isSuccess) {\n            return new Response(false, response.message, \"\");\n        } else {\n            return new Response(false, response.message, response.data);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}