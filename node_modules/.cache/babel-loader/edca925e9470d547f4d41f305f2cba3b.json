{"ast":null,"code":"import { LocalStorage } from \"../../../utils/localStorage\";\nimport { Networking } from \"../../networking\";\nimport { Response } from \"../../response\";\nimport { GetRelationshipResponse, Relationship } from \"../models/relationship_model\";\nexport class RelationshipRepo {\n  constructor() {\n    this.networking = new Networking();\n  }\n\n  async getAllRelationship(value) {\n    const path = `userId=${value === null || value === void 0 ? void 0 : value.userId}`;\n    let headers = {\n      Authorization: `Bearer ${await LocalStorage.getAccessToken()}`\n    };\n    let response = await this.networking.getData(`get_all_relationship_by_createdby_id?${path}`, headers); // If data is retrieved and the data is not empty, then return\n\n    if (response.isSuccess && response.data !== null && response.data !== \"\") {\n      let getRelationshipResponse = new GetRelationshipResponse().fromJson(response.data);\n      return new Response(true, response.message, getRelationshipResponse); // If data is retrieved and the data is empty, then return\n    } else if (response.isSuccess && response.message === \"No records found\") {\n      return new Response(true, \"No records found\", \"\"); // If http method is timeout or being halt, then return\n    } else if (!response.isSuccess) {\n      return new Response(false, response.message, \"\");\n    } else {\n      return new Response(false, response.message, response.data);\n    }\n  }\n\n  async getRelationshipById(value) {\n    const path = `clientRoleRelId=${value === null || value === void 0 ? void 0 : value.relationshipId}`;\n    let headers = {\n      Authorization: `Bearer ${await LocalStorage.getAccessToken()}`\n    };\n    let response = await this.networking.getData(`get_relationship_by_id?${path}`, headers); // If data is retrieved and the data is not empty, then return\n\n    if (response.isSuccess && response.data !== null && response.data !== \"\") {\n      let getRelationshipResponse = new GetRelationshipResponse().fromJson(response.data);\n      return new Response(true, response.message, getRelationshipResponse); // If data is retrieved and the data is empty, then return\n    } else if (response.isSuccess && response.message === \"No records found\") {\n      return new Response(true, \"No records found\", \"\"); // If http method is timeout or being halt, then return\n    } else if (!response.isSuccess) {\n      return new Response(false, response.message, \"\");\n    } else {\n      return new Response(false, response.message, response.data);\n    }\n  }\n\n  async saveRelationship(props) {\n    // Initialize the save user model\n    const saveRelationship = new Relationship({\n      clientRoleRelId: props.clientRoleRelId,\n      permission: props.permission,\n      client: props.client,\n      role: props.role,\n      createdById: props.createdById\n    }); // Object to Map, then to JSON\n\n    const body = Object.fromEntries(saveRelationship.toJson());\n    let headers = {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${await LocalStorage.getAccessToken()}`\n    };\n    let response = await this.networking.postData(\"save_relationship\", // API choice is depends on the usage\n    body, headers); // If data is retrieved and the data is not empty, then return\n\n    if (response.isSuccess && response.data !== null && response.data !== \"\") {\n      return new Response(true, response.message, response.data); // If data is retrieved and the data is empty, then return\n    } else if (response.isSuccess && response.message === \"No records found\") {\n      return new Response(true, \"No records found\", \"\"); // If http method is timeout or being halt, then return\n    } else if (!response.isSuccess) {\n      return new Response(false, response.message, \"\");\n    } else {\n      return new Response(false, response.message, response.data);\n    }\n  }\n\n  async deleteRelationship(props) {\n    // Initialize the save user model\n    const delete_relationship = new Relationship({\n      clientRoleRelId: props.clientRoleRelId\n    }); // Object to Map, then to JSON\n\n    const body = Object.fromEntries(delete_relationship.toJson());\n    let headers = {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${await LocalStorage.getAccessToken()}`\n    };\n    let response = await this.networking.deleteData(\"delete_relationship\", // API choice is depends on the usage\n    body, headers); // If data is retrieved and the data is not empty, then return\n\n    if (response.isSuccess && response.data !== null && response.data !== \"\") {\n      return new Response(true, response.message, response.data); // If data is retrieved and the data is empty, then return\n    } else if (response.isSuccess && response.message === \"No records found\") {\n      return new Response(true, \"No records found\", \"\"); // If http method is timeout or being halt, then return\n    } else if (!response.isSuccess) {\n      return new Response(false, response.message, \"\");\n    } else {\n      return new Response(false, response.message, response.data);\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/gohshengyang/Documents/GitHub/zeusapi-web/src/services/api/repositories/relationship_repo.tsx"],"names":["LocalStorage","Networking","Response","GetRelationshipResponse","Relationship","RelationshipRepo","networking","getAllRelationship","value","path","userId","headers","Authorization","getAccessToken","response","getData","isSuccess","data","getRelationshipResponse","fromJson","message","getRelationshipById","relationshipId","saveRelationship","props","clientRoleRelId","permission","client","role","createdById","body","Object","fromEntries","toJson","postData","deleteRelationship","delete_relationship","deleteData"],"mappings":"AAAA,SAASA,YAAT,QAA6B,6BAA7B;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SACCC,uBADD,EAECC,YAFD,QAGO,8BAHP;AAKA,OAAO,MAAMC,gBAAN,CAAuB;AAAA;AAAA,SAC7BC,UAD6B,GAChB,IAAIL,UAAJ,EADgB;AAAA;;AAGL,QAAlBM,kBAAkB,CAACC,KAAD,EAAgD;AACvE,UAAMC,IAAI,GAAI,UAASD,KAAV,aAAUA,KAAV,uBAAUA,KAAK,CAAEE,MAAO,EAArC;AACA,QAAIC,OAAO,GAAG;AACbC,MAAAA,aAAa,EAAG,UAAS,MAAMZ,YAAY,CAACa,cAAb,EAA8B;AADhD,KAAd;AAGA,QAAIC,QAAQ,GAAG,MAAM,KAAKR,UAAL,CAAgBS,OAAhB,CACnB,wCAAuCN,IAAK,EADzB,EAEpBE,OAFoB,CAArB,CALuE,CASvE;;AACA,QACCG,QAAQ,CAACE,SAAT,IACAF,QAAQ,CAACG,IAAT,KAAkB,IADlB,IAEAH,QAAQ,CAACG,IAAT,KAAkB,EAHnB,EAIE;AACD,UAAIC,uBAAuB,GAC1B,IAAIf,uBAAJ,GAA8BgB,QAA9B,CAAuCL,QAAQ,CAACG,IAAhD,CADD;AAEA,aAAO,IAAIf,QAAJ,CACN,IADM,EAENY,QAAQ,CAACM,OAFH,EAGNF,uBAHM,CAAP,CAHC,CASD;AACA,KAdD,MAcO,IACNJ,QAAQ,CAACE,SAAT,IACAF,QAAQ,CAACM,OAAT,KAAqB,kBAFf,EAGL;AACD,aAAO,IAAIlB,QAAJ,CAAa,IAAb,EAAmB,kBAAnB,EAAuC,EAAvC,CAAP,CADC,CAGD;AACA,KAPM,MAOA,IAAI,CAACY,QAAQ,CAACE,SAAd,EAAyB;AAC/B,aAAO,IAAId,QAAJ,CAAa,KAAb,EAAoBY,QAAQ,CAACM,OAA7B,EAAsC,EAAtC,CAAP;AACA,KAFM,MAEA;AACN,aAAO,IAAIlB,QAAJ,CAAa,KAAb,EAAoBY,QAAQ,CAACM,OAA7B,EAAsCN,QAAQ,CAACG,IAA/C,CAAP;AACA;AACD;;AAEwB,QAAnBI,mBAAmB,CAACb,KAAD,EAEH;AACrB,UAAMC,IAAI,GAAI,mBAAkBD,KAAnB,aAAmBA,KAAnB,uBAAmBA,KAAK,CAAEc,cAAe,EAAtD;AACA,QAAIX,OAAO,GAAG;AACbC,MAAAA,aAAa,EAAG,UAAS,MAAMZ,YAAY,CAACa,cAAb,EAA8B;AADhD,KAAd;AAGA,QAAIC,QAAQ,GAAG,MAAM,KAAKR,UAAL,CAAgBS,OAAhB,CACnB,0BAAyBN,IAAK,EADX,EAEpBE,OAFoB,CAArB,CALqB,CASrB;;AACA,QACCG,QAAQ,CAACE,SAAT,IACAF,QAAQ,CAACG,IAAT,KAAkB,IADlB,IAEAH,QAAQ,CAACG,IAAT,KAAkB,EAHnB,EAIE;AACD,UAAIC,uBAAuB,GAC1B,IAAIf,uBAAJ,GAA8BgB,QAA9B,CAAuCL,QAAQ,CAACG,IAAhD,CADD;AAEA,aAAO,IAAIf,QAAJ,CACN,IADM,EAENY,QAAQ,CAACM,OAFH,EAGNF,uBAHM,CAAP,CAHC,CASD;AACA,KAdD,MAcO,IACNJ,QAAQ,CAACE,SAAT,IACAF,QAAQ,CAACM,OAAT,KAAqB,kBAFf,EAGL;AACD,aAAO,IAAIlB,QAAJ,CAAa,IAAb,EAAmB,kBAAnB,EAAuC,EAAvC,CAAP,CADC,CAGD;AACA,KAPM,MAOA,IAAI,CAACY,QAAQ,CAACE,SAAd,EAAyB;AAC/B,aAAO,IAAId,QAAJ,CAAa,KAAb,EAAoBY,QAAQ,CAACM,OAA7B,EAAsC,EAAtC,CAAP;AACA,KAFM,MAEA;AACN,aAAO,IAAIlB,QAAJ,CAAa,KAAb,EAAoBY,QAAQ,CAACM,OAA7B,EAAsCN,QAAQ,CAACG,IAA/C,CAAP;AACA;AACD;;AAEqB,QAAhBM,gBAAgB,CAACC,KAAD,EAMA;AACrB;AACA,UAAMD,gBAAgB,GAAG,IAAInB,YAAJ,CAAiB;AACzCqB,MAAAA,eAAe,EAAED,KAAK,CAACC,eADkB;AAEzCC,MAAAA,UAAU,EAAEF,KAAK,CAACE,UAFuB;AAGzCC,MAAAA,MAAM,EAAEH,KAAK,CAACG,MAH2B;AAIzCC,MAAAA,IAAI,EAAEJ,KAAK,CAACI,IAJ6B;AAKzCC,MAAAA,WAAW,EAAEL,KAAK,CAACK;AALsB,KAAjB,CAAzB,CAFqB,CAUrB;;AACA,UAAMC,IAAI,GAAGC,MAAM,CAACC,WAAP,CAAmBT,gBAAgB,CAACU,MAAjB,EAAnB,CAAb;AAEA,QAAItB,OAAO,GAAG;AACb,sBAAgB,kBADH;AAEbC,MAAAA,aAAa,EAAG,UAAS,MAAMZ,YAAY,CAACa,cAAb,EAA8B;AAFhD,KAAd;AAKA,QAAIC,QAAQ,GAAG,MAAM,KAAKR,UAAL,CAAgB4B,QAAhB,CACpB,mBADoB,EACC;AACrBJ,IAAAA,IAFoB,EAGpBnB,OAHoB,CAArB,CAlBqB,CAwBrB;;AACA,QACCG,QAAQ,CAACE,SAAT,IACAF,QAAQ,CAACG,IAAT,KAAkB,IADlB,IAEAH,QAAQ,CAACG,IAAT,KAAkB,EAHnB,EAIE;AACD,aAAO,IAAIf,QAAJ,CAAa,IAAb,EAAmBY,QAAQ,CAACM,OAA5B,EAAqCN,QAAQ,CAACG,IAA9C,CAAP,CADC,CAGD;AACA,KARD,MAQO,IACNH,QAAQ,CAACE,SAAT,IACAF,QAAQ,CAACM,OAAT,KAAqB,kBAFf,EAGL;AACD,aAAO,IAAIlB,QAAJ,CAAa,IAAb,EAAmB,kBAAnB,EAAuC,EAAvC,CAAP,CADC,CAGD;AACA,KAPM,MAOA,IAAI,CAACY,QAAQ,CAACE,SAAd,EAAyB;AAC/B,aAAO,IAAId,QAAJ,CAAa,KAAb,EAAoBY,QAAQ,CAACM,OAA7B,EAAsC,EAAtC,CAAP;AACA,KAFM,MAEA;AACN,aAAO,IAAIlB,QAAJ,CAAa,KAAb,EAAoBY,QAAQ,CAACM,OAA7B,EAAsCN,QAAQ,CAACG,IAA/C,CAAP;AACA;AACD;;AAEuB,QAAlBkB,kBAAkB,CAACX,KAAD,EAAyD;AAChF;AACA,UAAMY,mBAAmB,GAAG,IAAIhC,YAAJ,CAAiB;AAC5CqB,MAAAA,eAAe,EAAED,KAAK,CAACC;AADqB,KAAjB,CAA5B,CAFgF,CAMhF;;AACA,UAAMK,IAAI,GAAGC,MAAM,CAACC,WAAP,CAAmBI,mBAAmB,CAACH,MAApB,EAAnB,CAAb;AAEA,QAAItB,OAAO,GAAG;AACb,sBAAgB,kBADH;AAEbC,MAAAA,aAAa,EAAG,UAAS,MAAMZ,YAAY,CAACa,cAAb,EAA8B;AAFhD,KAAd;AAKA,QAAIC,QAAQ,GAAG,MAAM,KAAKR,UAAL,CAAgB+B,UAAhB,CACpB,qBADoB,EACG;AACvBP,IAAAA,IAFoB,EAGpBnB,OAHoB,CAArB,CAdgF,CAoBhF;;AACA,QACCG,QAAQ,CAACE,SAAT,IACAF,QAAQ,CAACG,IAAT,KAAkB,IADlB,IAEAH,QAAQ,CAACG,IAAT,KAAkB,EAHnB,EAIE;AACD,aAAO,IAAIf,QAAJ,CAAa,IAAb,EAAmBY,QAAQ,CAACM,OAA5B,EAAqCN,QAAQ,CAACG,IAA9C,CAAP,CADC,CAGD;AACA,KARD,MAQO,IACNH,QAAQ,CAACE,SAAT,IACAF,QAAQ,CAACM,OAAT,KAAqB,kBAFf,EAGL;AACD,aAAO,IAAIlB,QAAJ,CAAa,IAAb,EAAmB,kBAAnB,EAAuC,EAAvC,CAAP,CADC,CAGD;AACA,KAPM,MAOA,IAAI,CAACY,QAAQ,CAACE,SAAd,EAAyB;AAC/B,aAAO,IAAId,QAAJ,CAAa,KAAb,EAAoBY,QAAQ,CAACM,OAA7B,EAAsC,EAAtC,CAAP;AACA,KAFM,MAEA;AACN,aAAO,IAAIlB,QAAJ,CAAa,KAAb,EAAoBY,QAAQ,CAACM,OAA7B,EAAsCN,QAAQ,CAACG,IAA/C,CAAP;AACA;AACD;;AA/K4B","sourcesContent":["import { LocalStorage } from \"../../../utils/localStorage\";\nimport { Networking } from \"../../networking\";\nimport { Response } from \"../../response\";\nimport {\n\tGetRelationshipResponse,\n\tRelationship,\n} from \"../models/relationship_model\";\n\nexport class RelationshipRepo {\n\tnetworking = new Networking();\n\n\tasync getAllRelationship(value?: { userId: string }): Promise<Response> {\n\t\tconst path = `userId=${value?.userId}`;\n\t\tlet headers = {\n\t\t\tAuthorization: `Bearer ${await LocalStorage.getAccessToken()}`,\n\t\t};\n\t\tlet response = await this.networking.getData(\n\t\t\t`get_all_relationship_by_createdby_id?${path}`,\n\t\t\theaders\n\t\t);\n\t\t// If data is retrieved and the data is not empty, then return\n\t\tif (\n\t\t\tresponse.isSuccess &&\n\t\t\tresponse.data !== null &&\n\t\t\tresponse.data !== \"\"\n\t\t) {\n\t\t\tlet getRelationshipResponse =\n\t\t\t\tnew GetRelationshipResponse().fromJson(response.data);\n\t\t\treturn new Response(\n\t\t\t\ttrue,\n\t\t\t\tresponse.message,\n\t\t\t\tgetRelationshipResponse\n\t\t\t);\n\n\t\t\t// If data is retrieved and the data is empty, then return\n\t\t} else if (\n\t\t\tresponse.isSuccess &&\n\t\t\tresponse.message === \"No records found\"\n\t\t) {\n\t\t\treturn new Response(true, \"No records found\", \"\");\n\n\t\t\t// If http method is timeout or being halt, then return\n\t\t} else if (!response.isSuccess) {\n\t\t\treturn new Response(false, response.message, \"\");\n\t\t} else {\n\t\t\treturn new Response(false, response.message, response.data);\n\t\t}\n\t}\n\n\tasync getRelationshipById(value?: {\n\t\trelationshipId: string;\n\t}): Promise<Response> {\n\t\tconst path = `clientRoleRelId=${value?.relationshipId}`;\n\t\tlet headers = {\n\t\t\tAuthorization: `Bearer ${await LocalStorage.getAccessToken()}`,\n\t\t};\n\t\tlet response = await this.networking.getData(\n\t\t\t`get_relationship_by_id?${path}`,\n\t\t\theaders\n\t\t);\n\t\t// If data is retrieved and the data is not empty, then return\n\t\tif (\n\t\t\tresponse.isSuccess &&\n\t\t\tresponse.data !== null &&\n\t\t\tresponse.data !== \"\"\n\t\t) {\n\t\t\tlet getRelationshipResponse =\n\t\t\t\tnew GetRelationshipResponse().fromJson(response.data);\n\t\t\treturn new Response(\n\t\t\t\ttrue,\n\t\t\t\tresponse.message,\n\t\t\t\tgetRelationshipResponse\n\t\t\t);\n\n\t\t\t// If data is retrieved and the data is empty, then return\n\t\t} else if (\n\t\t\tresponse.isSuccess &&\n\t\t\tresponse.message === \"No records found\"\n\t\t) {\n\t\t\treturn new Response(true, \"No records found\", \"\");\n\n\t\t\t// If http method is timeout or being halt, then return\n\t\t} else if (!response.isSuccess) {\n\t\t\treturn new Response(false, response.message, \"\");\n\t\t} else {\n\t\t\treturn new Response(false, response.message, response.data);\n\t\t}\n\t}\n\n\tasync saveRelationship(props: {\n\t\tcreatedById?: string;\n\t\tclientRoleRelId?: string;\n\t\tpermission?: string;\n\t\tclient?: string;\n\t\trole?: string;\n\t}): Promise<Response> {\n\t\t// Initialize the save user model\n\t\tconst saveRelationship = new Relationship({\n\t\t\tclientRoleRelId: props.clientRoleRelId,\n\t\t\tpermission: props.permission,\n\t\t\tclient: props.client,\n\t\t\trole: props.role,\n\t\t\tcreatedById: props.createdById,\n\t\t});\n\n\t\t// Object to Map, then to JSON\n\t\tconst body = Object.fromEntries(saveRelationship.toJson());\n\n\t\tlet headers = {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tAuthorization: `Bearer ${await LocalStorage.getAccessToken()}`,\n\t\t};\n\n\t\tlet response = await this.networking.postData(\n\t\t\t\"save_relationship\", // API choice is depends on the usage\n\t\t\tbody,\n\t\t\theaders\n\t\t);\n\n\t\t// If data is retrieved and the data is not empty, then return\n\t\tif (\n\t\t\tresponse.isSuccess &&\n\t\t\tresponse.data !== null &&\n\t\t\tresponse.data !== \"\"\n\t\t) {\n\t\t\treturn new Response(true, response.message, response.data);\n\n\t\t\t// If data is retrieved and the data is empty, then return\n\t\t} else if (\n\t\t\tresponse.isSuccess &&\n\t\t\tresponse.message === \"No records found\"\n\t\t) {\n\t\t\treturn new Response(true, \"No records found\", \"\");\n\n\t\t\t// If http method is timeout or being halt, then return\n\t\t} else if (!response.isSuccess) {\n\t\t\treturn new Response(false, response.message, \"\");\n\t\t} else {\n\t\t\treturn new Response(false, response.message, response.data);\n\t\t}\n\t}\n\n\tasync deleteRelationship(props: { clientRoleRelId?: string }): Promise<Response> {\n\t\t// Initialize the save user model\n\t\tconst delete_relationship = new Relationship({\n\t\t\tclientRoleRelId: props.clientRoleRelId,\n\t\t});\n\n\t\t// Object to Map, then to JSON\n\t\tconst body = Object.fromEntries(delete_relationship.toJson());\n\n\t\tlet headers = {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tAuthorization: `Bearer ${await LocalStorage.getAccessToken()}`,\n\t\t};\n\n\t\tlet response = await this.networking.deleteData(\n\t\t\t\"delete_relationship\", // API choice is depends on the usage\n\t\t\tbody,\n\t\t\theaders\n\t\t);\n\n\t\t// If data is retrieved and the data is not empty, then return\n\t\tif (\n\t\t\tresponse.isSuccess &&\n\t\t\tresponse.data !== null &&\n\t\t\tresponse.data !== \"\"\n\t\t) {\n\t\t\treturn new Response(true, response.message, response.data);\n\n\t\t\t// If data is retrieved and the data is empty, then return\n\t\t} else if (\n\t\t\tresponse.isSuccess &&\n\t\t\tresponse.message === \"No records found\"\n\t\t) {\n\t\t\treturn new Response(true, \"No records found\", \"\");\n\n\t\t\t// If http method is timeout or being halt, then return\n\t\t} else if (!response.isSuccess) {\n\t\t\treturn new Response(false, response.message, \"\");\n\t\t} else {\n\t\t\treturn new Response(false, response.message, response.data);\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}