{"ast":null,"code":"var _jsxFileName = \"/Users/gohshengyang/Documents/GitHub/codagence-web/src/utils/AuthProvider.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { AuthContext } from \"./AuthContext\";\nimport { onAuthStateChanged } from \"firebase/auth\";\nimport { auth } from \"./configSetup\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n\n  const [user, setUser] = useState();\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, currentUser => {\n      console.log(\"State change\");\n      setUser(currentUser);\n      console.log(currentUser);\n    });\n    return unsubscribe;\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: user,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AuthProvider, \"hT6C72rcbfRUedrDq+TPaFfRI/M=\");\n\n_c = AuthProvider;\nexport const useAuthListener = () => {\n  _s2();\n\n  // assume user to be logged out\n  const [loggedIn, setLoggedIn] = useState(false); // keep track to display a spinner while auth status is being checked\n\n  const [checkingStatus, setCheckingStatus] = useState(true);\n  const [user, setUser] = useState();\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, currentUser => {\n      if (user) {\n        setLoggedIn(true);\n        setUser(currentUser);\n      }\n\n      setCheckingStatus(false);\n    });\n    return unsubscribe;\n  }, []);\n  return {\n    loggedIn,\n    checkingStatus,\n    user\n  };\n};\n\n_s2(useAuthListener, \"r0QS9HPGbbatKu5ph2jyVa0LNGg=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["/Users/gohshengyang/Documents/GitHub/codagence-web/src/utils/AuthProvider.tsx"],"names":["useEffect","useState","AuthContext","onAuthStateChanged","auth","AuthProvider","children","user","setUser","unsubscribe","currentUser","console","log","useAuthListener","loggedIn","setLoggedIn","checkingStatus","setCheckingStatus"],"mappings":";;;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,kBAAT,QAAmC,eAAnC;AACA,SAASC,IAAT,QAAqB,eAArB;;AAEA,OAAO,MAAMC,YAAsB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AACvD,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,EAAhC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACf,UAAMS,WAAW,GAAGN,kBAAkB,CAACC,IAAD,EAAQM,WAAD,IAAiB;AAC7DC,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAJ,MAAAA,OAAO,CAACE,WAAD,CAAP;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,WAAZ;AACA,KAJqC,CAAtC;AAMA,WAAOD,WAAP;AACA,GARQ,EAQN,EARM,CAAT;AAUA,sBAAO,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEF,IAA7B;AAAA,cAAoCD;AAApC;AAAA;AAAA;AAAA;AAAA,UAAP;AACA,CAdM;;GAAMD,Y;;KAAAA,Y;AAgBb,OAAO,MAAMQ,eAAe,GAAG,MAAM;AAAA;;AACpC;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0Bd,QAAQ,CAAC,KAAD,CAAxC,CAFoC,CAIpC;;AACA,QAAM,CAACe,cAAD,EAAiBC,iBAAjB,IAAsChB,QAAQ,CAAC,IAAD,CAApD;AAEA,QAAM,CAACM,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,EAAhC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACf,UAAMS,WAAW,GAAGN,kBAAkB,CAACC,IAAD,EAAQM,WAAD,IAAiB;AAC7D,UAAIH,IAAJ,EAAU;AACTQ,QAAAA,WAAW,CAAC,IAAD,CAAX;AACAP,QAAAA,OAAO,CAACE,WAAD,CAAP;AACA;;AACDO,MAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACA,KANqC,CAAtC;AAQA,WAAOR,WAAP;AACA,GAVQ,EAUN,EAVM,CAAT;AAYA,SAAO;AAAEK,IAAAA,QAAF;AAAYE,IAAAA,cAAZ;AAA4BT,IAAAA;AAA5B,GAAP;AACA,CAtBM;;IAAMM,e","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { AuthContext } from \"./AuthContext\";\nimport { onAuthStateChanged } from \"firebase/auth\";\nimport { auth } from \"./configSetup\";\n\nexport const AuthProvider: React.FC = ({ children }) => {\n\tconst [user, setUser] = useState<any>();\n\n\tuseEffect(() => {\n\t\tconst unsubscribe = onAuthStateChanged(auth, (currentUser) => {\n\t\t\tconsole.log(\"State change\");\n\t\t\tsetUser(currentUser);\n\t\t\tconsole.log(currentUser);\n\t\t});\n\n\t\treturn unsubscribe;\n\t}, []);\n\n\treturn <AuthContext.Provider value={user}>{children}</AuthContext.Provider>;\n};\n\nexport const useAuthListener = () => {\n\t// assume user to be logged out\n\tconst [loggedIn, setLoggedIn] = useState(false);\n\n\t// keep track to display a spinner while auth status is being checked\n\tconst [checkingStatus, setCheckingStatus] = useState(true);\n\n\tconst [user, setUser] = useState<any>();\n\n\tuseEffect(() => {\n\t\tconst unsubscribe = onAuthStateChanged(auth, (currentUser) => {\n\t\t\tif (user) {\n\t\t\t\tsetLoggedIn(true);\n\t\t\t\tsetUser(currentUser);\n\t\t\t}\n\t\t\tsetCheckingStatus(false);\n\t\t});\n\n\t\treturn unsubscribe;\n\t}, []);\n\n\treturn { loggedIn, checkingStatus, user };\n};\n"]},"metadata":{},"sourceType":"module"}