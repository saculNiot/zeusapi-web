{"ast":null,"code":"import { createUserWithEmailAndPassword, sendEmailVerification, sendPasswordResetEmail, signInWithEmailAndPassword, signOut } from \"firebase/auth\";\nimport { auth } from \"./firebaseSetup\";\nimport { Response } from \"../services/response\";\nexport class FirebaseServices {}\n\nFirebaseServices.convertToMessage = async errorCode => {\n  return errorCode.substring(errorCode.indexOf(\"/\") + 1).replaceAll(\"-\", \" \").replace(/(^\\w|\\s\\w)/g, m => m.toUpperCase());\n};\n\nFirebaseServices.createAccount = async (email, password) => {\n  try {\n    let userCredential = await createUserWithEmailAndPassword(auth, email, password);\n    sendEmailVerification(userCredential.user);\n    return new Response(true, \"Registration Success\", userCredential.user);\n  } catch (error) {\n    return new Response(false, await FirebaseServices.convertToMessage(error.code.toString()), \"\");\n  }\n};\n\nFirebaseServices.sendEmailVerification = async user => {\n  try {\n    sendEmailVerification(user);\n    return new Response(true, \"Send email verification success\", \"\");\n  } catch (error) {\n    return new Response(false, await FirebaseServices.convertToMessage(error.code.toString()), \"\");\n  }\n};\n\nFirebaseServices.logIn = async (email, password) => {\n  try {\n    let userCredential = await signInWithEmailAndPassword(auth, email, password);\n    return new Response(true, \"Log In sucess\", userCredential.user);\n  } catch (error) {\n    return new Response(false, await FirebaseServices.convertToMessage(error.code.toString()), \"\");\n  }\n};\n\nFirebaseServices.resetPassword = async email => {\n  try {\n    await sendPasswordResetEmail(auth, email);\n    return new Response(true, \"Log In sucess\", \"Success\");\n  } catch (error) {\n    return new Response(false, await FirebaseServices.convertToMessage(error.code.toString()), \"\");\n  }\n};\n\nFirebaseServices.signOut = async () => {\n  signOut(auth);\n};","map":{"version":3,"sources":["/Users/gohshengyang/Documents/GitHub/codagence-web/src/utils/firebaseServices.tsx"],"names":["createUserWithEmailAndPassword","sendEmailVerification","sendPasswordResetEmail","signInWithEmailAndPassword","signOut","auth","Response","FirebaseServices","convertToMessage","errorCode","substring","indexOf","replaceAll","replace","m","toUpperCase","createAccount","email","password","userCredential","user","error","code","toString","logIn","resetPassword"],"mappings":"AAAA,SACCA,8BADD,EAECC,qBAFD,EAGCC,sBAHD,EAICC,0BAJD,EAKCC,OALD,QAMO,eANP;AAOA,SAASC,IAAT,QAAqB,iBAArB;AACA,SAASC,QAAT,QAAyB,sBAAzB;AAEA,OAAO,MAAMC,gBAAN,CAAuB;;AAAjBA,gB,CACLC,gB,GAAmB,MAAOC,SAAP,IAA6B;AACtD,SAAOA,SAAS,CACdC,SADK,CACKD,SAAS,CAACE,OAAV,CAAkB,GAAlB,IAAyB,CAD9B,EAELC,UAFK,CAEM,GAFN,EAEW,GAFX,EAGLC,OAHK,CAGG,aAHH,EAGmBC,CAAD,IAAOA,CAAC,CAACC,WAAF,EAHzB,CAAP;AAIA,C;;AANWR,gB,CAOLS,a,GAAgB,OAAOC,KAAP,EAAsBC,QAAtB,KAA2C;AACjE,MAAI;AACH,QAAIC,cAAc,GAAG,MAAMnB,8BAA8B,CACxDK,IADwD,EAExDY,KAFwD,EAGxDC,QAHwD,CAAzD;AAKAjB,IAAAA,qBAAqB,CAACkB,cAAc,CAACC,IAAhB,CAArB;AACA,WAAO,IAAId,QAAJ,CACN,IADM,EAEN,sBAFM,EAGNa,cAAc,CAACC,IAHT,CAAP;AAKA,GAZD,CAYE,OAAOC,KAAP,EAAmB;AACpB,WAAO,IAAIf,QAAJ,CACN,KADM,EAEN,MAAMC,gBAAgB,CAACC,gBAAjB,CAAkCa,KAAK,CAACC,IAAN,CAAWC,QAAX,EAAlC,CAFA,EAGN,EAHM,CAAP;AAKA;AACD,C;;AA3BWhB,gB,CA6BLN,qB,GAAwB,MAAOmB,IAAP,IAAqB;AACnD,MAAI;AACHnB,IAAAA,qBAAqB,CAACmB,IAAD,CAArB;AACA,WAAO,IAAId,QAAJ,CAAa,IAAb,EAAmB,iCAAnB,EAAsD,EAAtD,CAAP;AACA,GAHD,CAGE,OAAOe,KAAP,EAAmB;AACpB,WAAO,IAAIf,QAAJ,CACN,KADM,EAEN,MAAMC,gBAAgB,CAACC,gBAAjB,CAAkCa,KAAK,CAACC,IAAN,CAAWC,QAAX,EAAlC,CAFA,EAGN,EAHM,CAAP;AAKA;AACD,C;;AAxCWhB,gB,CA0CLiB,K,GAAQ,OAAOP,KAAP,EAAsBC,QAAtB,KAA2C;AACzD,MAAI;AACH,QAAIC,cAAc,GAAG,MAAMhB,0BAA0B,CACpDE,IADoD,EAEpDY,KAFoD,EAGpDC,QAHoD,CAArD;AAKA,WAAO,IAAIZ,QAAJ,CAAa,IAAb,EAAmB,eAAnB,EAAoCa,cAAc,CAACC,IAAnD,CAAP;AACA,GAPD,CAOE,OAAOC,KAAP,EAAmB;AACpB,WAAO,IAAIf,QAAJ,CACN,KADM,EAEN,MAAMC,gBAAgB,CAACC,gBAAjB,CAAkCa,KAAK,CAACC,IAAN,CAAWC,QAAX,EAAlC,CAFA,EAGN,EAHM,CAAP;AAKA;AACD,C;;AAzDWhB,gB,CA2DLkB,a,GAAgB,MAAOR,KAAP,IAAyB;AAC/C,MAAI;AACH,UAAMf,sBAAsB,CAACG,IAAD,EAAOY,KAAP,CAA5B;AACA,WAAO,IAAIX,QAAJ,CAAa,IAAb,EAAmB,eAAnB,EAAoC,SAApC,CAAP;AACA,GAHD,CAGE,OAAOe,KAAP,EAAmB;AACpB,WAAO,IAAIf,QAAJ,CACN,KADM,EAEN,MAAMC,gBAAgB,CAACC,gBAAjB,CAAkCa,KAAK,CAACC,IAAN,CAAWC,QAAX,EAAlC,CAFA,EAGN,EAHM,CAAP;AAKA;AACD,C;;AAtEWhB,gB,CAwELH,O,GAAU,YAAY;AAC5BA,EAAAA,OAAO,CAACC,IAAD,CAAP;AACA,C","sourcesContent":["import {\n\tcreateUserWithEmailAndPassword,\n\tsendEmailVerification,\n\tsendPasswordResetEmail,\n\tsignInWithEmailAndPassword,\n\tsignOut,\n} from \"firebase/auth\";\nimport { auth } from \"./firebaseSetup\";\nimport { Response } from \"../services/response\";\n\nexport class FirebaseServices {\n\tstatic convertToMessage = async (errorCode: string) => {\n\t\treturn errorCode\n\t\t\t.substring(errorCode.indexOf(\"/\") + 1)\n\t\t\t.replaceAll(\"-\", \" \")\n\t\t\t.replace(/(^\\w|\\s\\w)/g, (m) => m.toUpperCase());\n\t};\n\tstatic createAccount = async (email: string, password: string) => {\n\t\ttry {\n\t\t\tlet userCredential = await createUserWithEmailAndPassword(\n\t\t\t\tauth,\n\t\t\t\temail,\n\t\t\t\tpassword\n\t\t\t);\n\t\t\tsendEmailVerification(userCredential.user);\n\t\t\treturn new Response(\n\t\t\t\ttrue,\n\t\t\t\t\"Registration Success\",\n\t\t\t\tuserCredential.user\n\t\t\t);\n\t\t} catch (error: any) {\n\t\t\treturn new Response(\n\t\t\t\tfalse,\n\t\t\t\tawait FirebaseServices.convertToMessage(error.code.toString()),\n\t\t\t\t\"\"\n\t\t\t);\n\t\t}\n\t};\n\n\tstatic sendEmailVerification = async (user: any) => {\n\t\ttry {\n\t\t\tsendEmailVerification(user);\n\t\t\treturn new Response(true, \"Send email verification success\", \"\");\n\t\t} catch (error: any) {\n\t\t\treturn new Response(\n\t\t\t\tfalse,\n\t\t\t\tawait FirebaseServices.convertToMessage(error.code.toString()),\n\t\t\t\t\"\"\n\t\t\t);\n\t\t}\n\t};\n\n\tstatic logIn = async (email: string, password: string) => {\n\t\ttry {\n\t\t\tlet userCredential = await signInWithEmailAndPassword(\n\t\t\t\tauth,\n\t\t\t\temail,\n\t\t\t\tpassword\n\t\t\t);\n\t\t\treturn new Response(true, \"Log In sucess\", userCredential.user);\n\t\t} catch (error: any) {\n\t\t\treturn new Response(\n\t\t\t\tfalse,\n\t\t\t\tawait FirebaseServices.convertToMessage(error.code.toString()),\n\t\t\t\t\"\"\n\t\t\t);\n\t\t}\n\t};\n\n\tstatic resetPassword = async (email: string) => {\n\t\ttry {\n\t\t\tawait sendPasswordResetEmail(auth, email);\n\t\t\treturn new Response(true, \"Log In sucess\", \"Success\");\n\t\t} catch (error: any) {\n\t\t\treturn new Response(\n\t\t\t\tfalse,\n\t\t\t\tawait FirebaseServices.convertToMessage(error.code.toString()),\n\t\t\t\t\"\"\n\t\t\t);\n\t\t}\n\t};\n\n\tstatic signOut = async () => {\n\t\tsignOut(auth);\n\t};\n}\n"]},"metadata":{},"sourceType":"module"}