{"ast":null,"code":"import axios from \"axios\";\nimport { Constants } from \"../utils/constants\";\nimport { Response } from \"./response\";\nexport class Networking {\n  constructor() {\n    this.url = Constants.urlLocal;\n    this.apiVer = Constants.apiver;\n  }\n\n  async getData(path, headers) {\n    try {\n      if (this.url === \"\") {\n        this.url = Constants.urlCloud;\n      }\n\n      let response = await axios.get(`${this.url}/${this.apiVer}/${path}`, {\n        headers\n      });\n\n      if (response.status === 200) {\n        let e = response.data;\n        let data = e instanceof Array ? e.map(x => new Map(Object.entries(x))) : new Map(Object.entries(e));\n        return new Response(true, \"\", data);\n      } else if (response.status === 204) {\n        return new Response(true, \"No records found\", \"\");\n      } else if (response.status === 401) {\n        return new Response(true, \"Session expired\", \"Session expired\");\n      } else {\n        return new Response(false, response.data, response.data);\n      }\n    } catch (error) {\n      console.log(error.status);\n\n      if (axios.isAxiosError(error)) {\n        if (error.response) {\n          /*\n           * The request was made and the server responded with a\n           * status code that falls out of the range of 2xx\n           */\n          return new Response(false, error.response.data.toString(), error.response.data.toString());\n        } else if (error.request) {\n          /*\n           * The request was made but no response was received, `error.request`\n           * is an instance of XMLHttpRequest in the browser and an instance\n           * of http.ClientRequest in Node.js\n           */\n          return new Response(false, error.request.toString(), error.request.toString());\n        } else {\n          // Something happened in setting up the request and triggered an Error\n          return new Response(false, error.message.toString(), error.message.toString());\n        }\n      }\n\n      return new Response(false, \"error\", error);\n    }\n  }\n\n  async postData(api, body, headers) {\n    try {\n      if (this.url === \"\") {\n        this.url = Constants.urlCloud;\n      }\n\n      let response = await axios.post(`${this.url}/${this.apiVer}/${api}`, body, {\n        headers\n      });\n\n      if (response.status === 201 || response.status === 200) {\n        var regexFormat = /[{}]/gm; // If the data retrieved is JSON\n\n        if (regexFormat.test(JSON.stringify(response.data))) {\n          return new Response(true, \"\", new Map(Object.entries(response.data)));\n        } else {\n          return new Response(true, \"\", response.data);\n        }\n      } else if (response.status === 204) {\n        return new Response(true, \"No records found\", response.data);\n      } else if (response.status === 401) {\n        return new Response(true, \"Session expired\", \"Session expired\");\n      } else {\n        return new Response(false, response.data, response.data);\n      }\n    } catch (error) {\n      if (axios.isAxiosError(error)) {\n        if (error.response) {\n          /*\n           * The request was made and the server responded with a\n           * status code that falls out of the range of 2xx\n           */\n          return new Response(false, error.response.data.toString(), error.response.data.toString());\n        } else if (error.request) {\n          /*\n           * The request was made but no response was received, `error.request`\n           * is an instance of XMLHttpRequest in the browser and an instance\n           * of http.ClientRequest in Node.js\n           */\n          return new Response(false, error.request.toString(), error.request.toString());\n        } else {\n          // Something happened in setting up the request and triggered an Error\n          return new Response(false, error.message.toString(), error.message.toString());\n        }\n      }\n\n      return new Response(false, \"error\", error);\n    }\n  }\n\n  async patchData(api, body, headers) {\n    if (this.url === \"\") {\n      this.url = Constants.urlCloud;\n    }\n\n    let response = await axios.patch(`${this.url}/${this.apiVer}/${api}`, body, {\n      headers\n    });\n    return new Response(true, response.statusText, response.data);\n  }\n\n  async deleteData(api, body, headers) {\n    if (this.url === \"\") {\n      this.url = Constants.urlCloud;\n    }\n\n    let response = await axios.delete(`${this.url}/${this.apiVer}/${api}`, {\n      headers,\n      data: body\n    });\n\n    if (response.status === 201 || response.status === 200) {\n      var regexFormat = /[{}]/gm; // If the data retrieved is JSON\n\n      if (regexFormat.test(JSON.stringify(response.data))) {\n        return new Response(true, \"\", new Map(Object.entries(response.data)));\n      } else {\n        return new Response(true, response.statusText, response.data);\n      }\n    } else if (response.status === 204) {\n      return new Response(true, \"No records found\", response.data);\n    } else if (response.status === 401) {\n      return new Response(true, \"Session expired\", \"Session expired\");\n    }\n\n    return new Response(false, \"error\", response.data);\n  }\n\n}","map":{"version":3,"sources":["/Users/gohshengyang/Documents/GitHub/zeusapi-web/src/services/networking.tsx"],"names":["axios","Constants","Response","Networking","url","urlLocal","apiVer","apiver","getData","path","headers","urlCloud","response","get","status","e","data","Array","map","x","Map","Object","entries","error","console","log","isAxiosError","toString","request","message","postData","api","body","post","regexFormat","test","JSON","stringify","patchData","patch","statusText","deleteData","delete"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { useHistory } from \"react-router-dom\";\nimport { Constants } from \"../utils/constants\";\nimport { Response } from \"./response\";\n\nexport class Networking {\n\turl = Constants.urlLocal;\n\tapiVer = Constants.apiver;\n\n\tasync getData(path: string, headers: any): Promise<Response> {\n\t\ttry {\n\t\t\tif (this.url === \"\") {\n\t\t\t\tthis.url = Constants.urlCloud;\n\t\t\t}\n\n\t\t\tlet response = await axios.get(\n\t\t\t\t`${this.url}/${this.apiVer}/${path}`,\n\t\t\t\t{ headers }\n\t\t\t);\n\t\t\tif (response.status === 200) {\n\t\t\t\tlet e = response.data;\n\n\t\t\t\tlet data =\n\t\t\t\t\te instanceof Array\n\t\t\t\t\t\t? e.map((x) => new Map<String, any>(Object.entries(x)))\n\t\t\t\t\t\t: new Map<String, any>(Object.entries(e));\n\n\t\t\t\treturn new Response(true, \"\", data);\n\t\t\t} else if (response.status === 204) {\n\t\t\t\treturn new Response(true, \"No records found\", \"\");\n\t\t\t} else if (response.status === 401) {\n\t\t\t\t\n\t\t\t\treturn new Response(true, \"Session expired\", \"Session expired\");\n\t\t\t} else {\n\t\t\t\treturn new Response(false, response.data, response.data);\n\t\t\t}\n\t\t} catch (error : any) {\n\t\t\tconsole.log(error.status)\n\t\t\tif (axios.isAxiosError(error)) {\n\t\t\t\tif (error.response) {\n\t\t\t\t\t/*\n\t\t\t\t\t * The request was made and the server responded with a\n\t\t\t\t\t * status code that falls out of the range of 2xx\n\t\t\t\t\t */\n\t\t\t\t\treturn new Response(\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\terror.response.data.toString(),\n\t\t\t\t\t\terror.response.data.toString()\n\t\t\t\t\t);\n\t\t\t\t} else if (error.request) {\n\t\t\t\t\t/*\n\t\t\t\t\t * The request was made but no response was received, `error.request`\n\t\t\t\t\t * is an instance of XMLHttpRequest in the browser and an instance\n\t\t\t\t\t * of http.ClientRequest in Node.js\n\t\t\t\t\t */\n\t\t\t\t\treturn new Response(\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\terror.request.toString(),\n\t\t\t\t\t\terror.request.toString()\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\t// Something happened in setting up the request and triggered an Error\n\t\t\t\t\treturn new Response(\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\terror.message.toString(),\n\t\t\t\t\t\terror.message.toString()\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn new Response(false, \"error\", error);\n\t\t}\n\t}\n\n\tasync postData(api: string, body: any, headers: any): Promise<Response> {\n\t\ttry {\n\t\t\tif (this.url === \"\") {\n\t\t\t\tthis.url = Constants.urlCloud;\n\t\t\t}\n\n\t\t\tlet response = await axios.post(\n\t\t\t\t`${this.url}/${this.apiVer}/${api}`,\n\t\t\t\tbody,\n\t\t\t\t{ headers }\n\t\t\t);\n\t\t\tif (response.status === 201 || response.status === 200) {\n\t\t\t\tvar regexFormat = /[{}]/gm;\n\n\t\t\t\t// If the data retrieved is JSON\n\t\t\t\tif (regexFormat.test(JSON.stringify(response.data))) {\n\t\t\t\t\treturn new Response(\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\"\",\n\t\t\t\t\t\tnew Map(Object.entries(response.data))\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\treturn new Response(true, \"\", response.data);\n\t\t\t\t}\n\t\t\t} else if (response.status === 204) {\n\t\t\t\treturn new Response(true, \"No records found\", response.data);\n\t\t\t} else if (response.status === 401) {\n\t\t\t\treturn new Response(true, \"Session expired\", \"Session expired\");\n\t\t\t} else {\n\t\t\t\treturn new Response(false, response.data, response.data);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tif (axios.isAxiosError(error)) {\n\t\t\t\tif (error.response) {\n\t\t\t\t\t/*\n\t\t\t\t\t * The request was made and the server responded with a\n\t\t\t\t\t * status code that falls out of the range of 2xx\n\t\t\t\t\t */\n\n\t\t\t\t\treturn new Response(\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\terror.response.data.toString(),\n\t\t\t\t\t\terror.response.data.toString()\n\t\t\t\t\t);\n\t\t\t\t} else if (error.request) {\n\t\t\t\t\t/*\n\t\t\t\t\t * The request was made but no response was received, `error.request`\n\t\t\t\t\t * is an instance of XMLHttpRequest in the browser and an instance\n\t\t\t\t\t * of http.ClientRequest in Node.js\n\t\t\t\t\t */\n\t\t\t\t\treturn new Response(\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\terror.request.toString(),\n\t\t\t\t\t\terror.request.toString()\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\t// Something happened in setting up the request and triggered an Error\n\t\t\t\t\treturn new Response(\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\terror.message.toString(),\n\t\t\t\t\t\terror.message.toString()\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn new Response(false, \"error\", error);\n\t\t}\n\t}\n\n\tasync patchData(api: string, body: any, headers: any): Promise<Response> {\n\t\tif (this.url === \"\") {\n\t\t\tthis.url = Constants.urlCloud;\n\t\t}\n\n\t\tlet response = await axios.patch(\n\t\t\t`${this.url}/${this.apiVer}/${api}`,\n\t\t\tbody,\n\t\t\t{ headers }\n\t\t);\n\n\t\treturn new Response(true, response.statusText, response.data);\n\t}\n\n\tasync deleteData(api: string, body: any, headers?: any): Promise<Response> {\n\t\tif (this.url === \"\") {\n\t\t\tthis.url = Constants.urlCloud;\n\t\t}\n\n\t\tlet response = await axios.delete(`${this.url}/${this.apiVer}/${api}`, {\n\t\t\theaders,\n\t\t\tdata: body,\n\t\t});\n\t\tif (response.status === 201 || response.status === 200) {\n\t\t\tvar regexFormat = /[{}]/gm;\n\n\t\t\t// If the data retrieved is JSON\n\t\t\tif (regexFormat.test(JSON.stringify(response.data))) {\n\t\t\t\treturn new Response(\n\t\t\t\t\ttrue,\n\t\t\t\t\t\"\",\n\t\t\t\t\tnew Map(Object.entries(response.data))\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\treturn new Response(true, response.statusText, response.data);\n\t\t\t}\n\t\t} else if (response.status === 204) {\n\t\t\treturn new Response(true, \"No records found\", response.data);\n\t\t} else if (response.status === 401) {\n\t\t\treturn new Response(true, \"Session expired\", \"Session expired\");\n\t\t}\n\t\treturn new Response(false, \"error\", response.data);\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}