{"ast":null,"code":"import axios from \"axios\";\nimport { Constants } from \"../utils/constants\";\nimport { Response } from \"./response\";\nexport class Networking {\n  constructor() {\n    this.url = Constants.urlLocal;\n    this.apiVer = Constants.apiver;\n  }\n\n  async getData(path) {\n    try {\n      if (this.url === \"\") {\n        this.url = Constants.urlCloud;\n      }\n\n      let response = await axios.get(`${this.url}/${this.apiVer}/${path}`);\n      console.log(`${this.url}/${this.apiVer}/${path}`);\n\n      if (response.status === 200) {\n        let e = response.data;\n        let data = e instanceof Array ? e.map(x => new Map(Object.entries(x))) : new Map(Object.entries(e));\n        console.log(\"Return data:\" + data);\n        return new Response(true, \"\", data);\n      } else if (response.status === 204) {\n        return new Response(true, \"No records found\", \"\");\n      } else {\n        return new Response(false, response.data, response.data);\n      }\n    } catch (error) {\n      if (axios.isAxiosError(error)) {\n        if (error.response) {\n          /*\n           * The request was made and the server responded with a\n           * status code that falls out of the range of 2xx\n           */\n          console.log(error.response.data);\n          console.log(error.response.status);\n          console.log(error.response.headers);\n          return new Response(false, error.response.data.toString(), error.response.data.toString());\n        } else if (error.request) {\n          /*\n           * The request was made but no response was received, `error.request`\n           * is an instance of XMLHttpRequest in the browser and an instance\n           * of http.ClientRequest in Node.js\n           */\n          console.log(error.request);\n          return new Response(false, error.request.toString(), error.request.toString());\n        } else {\n          // Something happened in setting up the request and triggered an Error\n          console.log(\"Error\", error.message);\n          return new Response(false, error.message.toString(), error.message.toString());\n        }\n      }\n\n      return new Response(false, \"error\", error);\n    }\n  }\n\n  async postData(api, body, headers) {\n    try {\n      if (this.url === \"\") {\n        this.url = Constants.urlCloud;\n      }\n\n      console.log(body);\n      let response = await axios.post(`${this.url}/${this.apiVer}/${api}`, body, {\n        headers\n      });\n      console.log(`${this.url}/${this.apiVer}/${api}`);\n      console.log(response.status);\n\n      if (response.status === 201 || response.status === 200) {\n        console.log(response === null || response === void 0 ? void 0 : response.status);\n        console.log(response.data);\n        var regexFormat = /[{}]/gm; // If the data retrieved is JSON\n\n        if (regexFormat.test(JSON.stringify(response.data))) {\n          return new Response(true, \"\", new Map(Object.entries(response.data)));\n        } else {\n          return new Response(true, \"\", response.data);\n        }\n      } else if (response.status === 204) {\n        return new Response(true, \"No records found\", response.data);\n      } else {\n        return new Response(false, response.data, response.data);\n      }\n    } catch (error) {\n      if (axios.isAxiosError(error)) {\n        if (error.response) {\n          /*\n           * The request was made and the server responded with a\n           * status code that falls out of the range of 2xx\n           */\n          console.log(error.response.data);\n          console.log(error.response.status);\n          console.log(error.response.headers);\n          return new Response(false, error.response.data.toString(), error.response.data.toString());\n        } else if (error.request) {\n          /*\n           * The request was made but no response was received, `error.request`\n           * is an instance of XMLHttpRequest in the browser and an instance\n           * of http.ClientRequest in Node.js\n           */\n          console.log(error.request);\n          return new Response(false, error.request.toString(), error.request.toString());\n        } else {\n          // Something happened in setting up the request and triggered an Error\n          console.log(\"Error\", error.message);\n          return new Response(false, error.message.toString(), error.message.toString());\n        }\n      }\n\n      return new Response(false, \"error\", error);\n    }\n  }\n\n  async patchData(api, body, headers) {\n    if (this.url === \"\") {\n      this.url = Constants.urlCloud;\n    }\n\n    let response = await axios.patch(`${this.url}/${this.apiVer}/${api}`, body, {\n      headers\n    });\n    console.log(response.request.responseURL);\n    return new Response(true, response.statusText, response.data);\n  }\n\n  async deleteData(api, body, headers) {\n    if (this.url === \"\") {\n      this.url = Constants.urlCloud;\n    }\n\n    let response = await axios.delete(`${this.url}/${this.apiVer}/${api}`, {\n      data: body\n    });\n    console.log(response.request.responseURL);\n    return new Response(true, response.statusText, response.data);\n  }\n\n}","map":{"version":3,"sources":["/Users/gohshengyang/Documents/GitHub/codagence-web/src/services/networking.tsx"],"names":["axios","Constants","Response","Networking","url","urlLocal","apiVer","apiver","getData","path","urlCloud","response","get","console","log","status","e","data","Array","map","x","Map","Object","entries","error","isAxiosError","headers","toString","request","message","postData","api","body","post","regexFormat","test","JSON","stringify","patchData","patch","responseURL","statusText","deleteData","delete"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { Constants } from \"../utils/constants\";\nimport { Response } from \"./response\";\n\nexport class Networking {\n  url = Constants.urlLocal;\n  apiVer = Constants.apiver;\n\n  async getData(path: string): Promise<Response> {\n    try {\n      if (this.url === \"\") {\n        this.url = Constants.urlCloud;\n      }\n\n      let response = await axios.get(`${this.url}/${this.apiVer}/${path}`);\n      console.log(`${this.url}/${this.apiVer}/${path}`);\n      if (response.status === 200) {\n        let e = response.data;\n\n        let data =\n          e instanceof Array\n            ? e.map((x) => new Map<String, any>(Object.entries(x)))\n            : new Map<String, any>(Object.entries(e));\n\n        console.log(\"Return data:\" + data);\n\n        return new Response(true, \"\", data);\n      } else if (response.status === 204) {\n        return new Response(true, \"No records found\", \"\");\n      } else {\n        return new Response(false, response.data, response.data);\n      }\n    } catch (error) {\n      if (axios.isAxiosError(error)) {\n        if (error.response) {\n          /*\n           * The request was made and the server responded with a\n           * status code that falls out of the range of 2xx\n           */\n          console.log(error.response.data);\n          console.log(error.response.status);\n          console.log(error.response.headers);\n          return new Response(\n            false,\n            error.response.data.toString(),\n            error.response.data.toString()\n          );\n        } else if (error.request) {\n          /*\n           * The request was made but no response was received, `error.request`\n           * is an instance of XMLHttpRequest in the browser and an instance\n           * of http.ClientRequest in Node.js\n           */\n          console.log(error.request);\n          return new Response(\n            false,\n            error.request.toString(),\n            error.request.toString()\n          );\n        } else {\n          // Something happened in setting up the request and triggered an Error\n          console.log(\"Error\", error.message);\n          return new Response(\n            false,\n            error.message.toString(),\n            error.message.toString()\n          );\n        }\n      }\n\n      return new Response(false, \"error\", error);\n    }\n  }\n\n  async postData(api: string, body: any, headers: any): Promise<Response> {\n    try {\n      if (this.url === \"\") {\n        this.url = Constants.urlCloud;\n      }\n\n      console.log(body)\n\n      let response = await axios.post(\n        `${this.url}/${this.apiVer}/${api}`,\n        body,\n        { headers }\n      );\n      console.log(`${this.url}/${this.apiVer}/${api}`);\n      console.log(response.status)\n      if (response.status === 201 || response.status === 200) {\n        console.log(response?.status);\n        console.log(response.data);\n        var regexFormat = /[{}]/gm;\n\n        // If the data retrieved is JSON\n        if (regexFormat.test(JSON.stringify(response.data))) {\n          return new Response(true, \"\", new Map(Object.entries(response.data)));\n        } else {\n          return new Response(true, \"\", response.data);\n        }\n      } else if (response.status === 204) {\n        return new Response(true, \"No records found\", response.data);\n      } else {\n        return new Response(false, response.data, response.data);\n      }\n    } catch (error) {\n      if (axios.isAxiosError(error)) {\n        if (error.response) {\n          /*\n           * The request was made and the server responded with a\n           * status code that falls out of the range of 2xx\n           */\n          console.log(error.response.data);\n          console.log(error.response.status);\n          console.log(error.response.headers);\n          return new Response(\n            false,\n            error.response.data.toString(),\n            error.response.data.toString()\n          );\n        } else if (error.request) {\n          /*\n           * The request was made but no response was received, `error.request`\n           * is an instance of XMLHttpRequest in the browser and an instance\n           * of http.ClientRequest in Node.js\n           */\n          console.log(error.request);\n          return new Response(\n            false,\n            error.request.toString(),\n            error.request.toString()\n          );\n        } else {\n          // Something happened in setting up the request and triggered an Error\n          console.log(\"Error\", error.message);\n          return new Response(\n            false,\n            error.message.toString(),\n            error.message.toString()\n          );\n        }\n      }\n\n      return new Response(false, \"error\", error);\n    }\n  }\n\n  async patchData(api: string, body: any, headers: any): Promise<Response> {\n    if (this.url === \"\") {\n      this.url = Constants.urlCloud;\n    }\n\n    let response = await axios.patch(\n      `${this.url}/${this.apiVer}/${api}`,\n      body,\n      { headers }\n    );\n\n    console.log(response.request.responseURL);\n\n    return new Response(true, response.statusText, response.data);\n  }\n\n  async deleteData(api: string, body: any, headers?: any): Promise<Response> {\n    if (this.url === \"\") {\n      this.url = Constants.urlCloud;\n    }\n\n    let response = await axios.delete(`${this.url}/${this.apiVer}/${api}`, { data: body });\n\n    console.log(response.request.responseURL);\n\n    return new Response(true, response.statusText, response.data);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}