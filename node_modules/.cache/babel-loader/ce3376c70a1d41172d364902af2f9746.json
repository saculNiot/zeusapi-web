{"ast":null,"code":"import { Networking } from \"../../networking\";\nimport { Report } from \"../models/report_model\";\nexport class ReportRepo {\n  constructor(fileId) {\n    this.networking = new Networking();\n    this.fileId = void 0;\n    this.fileId = fileId;\n  }\n\n  async createReport(name, url) {\n    let response = await this.networking.postData(`report/create_in/${this.fileId}`, {\n      title: name,\n      url: url\n    }, {\n      \"Content-Type\": \"application/json\"\n    });\n    return response;\n  }\n\n  async getReports() {\n    let response = await this.networking.getData(`report/get_all/${this.fileId}`);\n\n    if (response.isSuccess) {\n      let data = response.data;\n      let reports = data.map(x => Report.fromJson(x));\n      return reports;\n    }\n\n    return [];\n  }\n\n  static async getReportPreview(fileId) {\n    let response = await new Networking().getData(`report/get_all/${fileId}`);\n    let data = response.data;\n\n    if (data instanceof Array && data.length !== 0) {\n      return Report.fromJson(data[0]);\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/gohshengyang/Documents/GitHub/zeusapi-web/src/services/api/repositories/report_repo.tsx"],"names":["Networking","Report","ReportRepo","constructor","fileId","networking","createReport","name","url","response","postData","title","getReports","getData","isSuccess","data","reports","map","x","fromJson","getReportPreview","Array","length"],"mappings":"AAAA,SAASA,UAAT,QAA2B,kBAA3B;AAEA,SAASC,MAAT,QAAuB,wBAAvB;AAEA,OAAO,MAAMC,UAAN,CAAiB;AAItBC,EAAAA,WAAW,CAACC,MAAD,EAAiB;AAAA,SAHpBC,UAGoB,GAHP,IAAIL,UAAJ,EAGO;AAAA,SAFnBI,MAEmB;AAC1B,SAAKA,MAAL,GAAcA,MAAd;AACD;;AAEiB,QAAZE,YAAY,CAACC,IAAD,EAAeC,GAAf,EAA+C;AAC/D,QAAIC,QAAQ,GAAG,MAAM,KAAKJ,UAAL,CAAgBK,QAAhB,CAClB,oBAAmB,KAAKN,MAAO,EADb,EAEnB;AAAEO,MAAAA,KAAK,EAAEJ,IAAT;AAAeC,MAAAA,GAAG,EAAEA;AAApB,KAFmB,EAGnB;AAAE,sBAAgB;AAAlB,KAHmB,CAArB;AAMA,WAAOC,QAAP;AACD;;AAEe,QAAVG,UAAU,GAAsB;AACpC,QAAIH,QAAQ,GAAG,MAAM,KAAKJ,UAAL,CAAgBQ,OAAhB,CAClB,kBAAiB,KAAKT,MAAO,EADX,CAArB;;AAIA,QAAIK,QAAQ,CAACK,SAAb,EAAwB;AACtB,UAAIC,IAA6B,GAAGN,QAAQ,CAACM,IAA7C;AAEA,UAAIC,OAAiB,GAAGD,IAAI,CAACE,GAAL,CAAUC,CAAD,IAAOjB,MAAM,CAACkB,QAAP,CAAgBD,CAAhB,CAAhB,CAAxB;AAEA,aAAOF,OAAP;AACD;;AAED,WAAO,EAAP;AACD;;AAE4B,eAAhBI,gBAAgB,CAAChB,MAAD,EAA8C;AACzE,QAAIK,QAAQ,GAAG,MAAM,IAAIT,UAAJ,GAAiBa,OAAjB,CAA0B,kBAAiBT,MAAO,EAAlD,CAArB;AAEA,QAAIW,IAAI,GAAGN,QAAQ,CAACM,IAApB;;AAEA,QAAIA,IAAI,YAAYM,KAAhB,IAAyBN,IAAI,CAACO,MAAL,KAAgB,CAA7C,EAAgD;AAC9C,aAAOrB,MAAM,CAACkB,QAAP,CAAgBJ,IAAI,CAAC,CAAD,CAApB,CAAP;AACD;AACF;;AA1CqB","sourcesContent":["import { Networking } from \"../../networking\";\nimport { Response } from \"../../response\";\nimport { Report } from \"../models/report_model\";\n\nexport class ReportRepo {\n  private networking = new Networking();\n  readonly fileId: string;\n\n  constructor(fileId: string) {\n    this.fileId = fileId;\n  }\n\n  async createReport(name: string, url: string): Promise<Response> {\n    let response = await this.networking.postData(\n      `report/create_in/${this.fileId}`,\n      { title: name, url: url },\n      { \"Content-Type\": \"application/json\" }\n    );\n\n    return response;\n  }\n\n  async getReports(): Promise<Report[]> {\n    let response = await this.networking.getData(\n      `report/get_all/${this.fileId}`\n    );\n\n    if (response.isSuccess) {\n      let data: Array<Map<string, any>> = response.data;\n\n      let reports: Report[] = data.map((x) => Report.fromJson(x));\n\n      return reports;\n    }\n\n    return [];\n  }\n\n  static async getReportPreview(fileId: string): Promise<Report | undefined> {\n    let response = await new Networking().getData(`report/get_all/${fileId}`);\n\n    let data = response.data;\n\n    if (data instanceof Array && data.length !== 0) {\n      return Report.fromJson(data[0]);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}