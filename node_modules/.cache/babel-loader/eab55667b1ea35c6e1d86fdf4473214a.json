{"ast":null,"code":"var _jsxFileName = \"/Users/gohshengyang/Documents/GitHub/codagence-web/src/pages/dashboard/MainDashboard.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Button, Layout, Menu, Typography, Row, Col, List, Avatar, message, Skeleton, Popconfirm } from \"antd\";\nimport \"./MainDashboard.less\";\nimport { RoutePath } from \"../../utils/routePath\";\nimport { AuthContext } from \"../../utils/AuthContext\";\nimport { LocalStorage } from \"../../utils/localStorage\";\nimport { UserRepo } from \"../../services/api/repositories/user_repo\";\nimport { DeleteOutlined, PlusCircleOutlined } from \"@ant-design/icons\";\nimport { UrlRepo } from \"../../services/api/repositories/url_repo\";\nimport Nav from \"./Nav\";\nimport mixpanel from \"mixpanel-browser\";\nimport { Link } from \"@chakra-ui/react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  SubMenu\n} = Menu;\nconst {\n  Header\n} = Layout;\nconst {\n  Title\n} = Typography;\nexport const MainDashboard = () => {\n  _s();\n\n  let userRepo = new UserRepo();\n  let urlRepo = new UrlRepo();\n  let history = useHistory(); // Get current sign in User\n\n  const user = useContext(AuthContext); // Handle the state of each option in Menu bar\n\n  const [_userApiId, setUserApiId] = useState(\"\");\n  const [_urls, setUrls] = useState([]);\n  const [_listLoading, setListLoading] = useState(true);\n\n  async function getUrls() {\n    let userId = await LocalStorage.getUserID();\n    let apiResult = await urlRepo.getAllUserUrlByUserId({\n      userId: userId\n    });\n\n    if (apiResult.isSuccess) {\n      if (apiResult.data.length > 0) apiResult.data.forEach(element => {\n        setUrls(prevState => {\n          return [...prevState, element];\n        });\n      });\n    }\n\n    setListLoading(false);\n  }\n\n  useEffect(() => {\n    async function initState() {\n      let userId = await LocalStorage.getUserID();\n      let apiResult = await userRepo.getUserById({\n        userId: userId\n      });\n\n      if (apiResult.isSuccess) {\n        var _usermodel$email, _usermodel$nickname, _usermodel$packagePla, _usermodel$userApiId;\n\n        let usermodel = apiResult.data[0];\n        await LocalStorage.setEmail((_usermodel$email = usermodel === null || usermodel === void 0 ? void 0 : usermodel.email) !== null && _usermodel$email !== void 0 ? _usermodel$email : \"\");\n        await LocalStorage.setNickName((_usermodel$nickname = usermodel === null || usermodel === void 0 ? void 0 : usermodel.nickname) !== null && _usermodel$nickname !== void 0 ? _usermodel$nickname : \"\");\n        await LocalStorage.setPackagePlan((_usermodel$packagePla = usermodel === null || usermodel === void 0 ? void 0 : usermodel.packagePlan) !== null && _usermodel$packagePla !== void 0 ? _usermodel$packagePla : \"free\");\n        setUserApiId((_usermodel$userApiId = usermodel === null || usermodel === void 0 ? void 0 : usermodel.userApiId) !== null && _usermodel$userApiId !== void 0 ? _usermodel$userApiId : \"\");\n      }\n    }\n\n    initState();\n    getUrls();\n    return () => {\n      setUserApiId(\"\"); // This worked for me\n\n      setUrls([]);\n      setListLoading(true);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Nav, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Layout, {\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        className: \"dashboard_row\",\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          xs: 24,\n          xl: 6,\n          className: \"dashboard_col\",\n          span: 6\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          xs: 24,\n          xl: 12,\n          className: \"dashboard_col\",\n          span: 12,\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            type: \"primary\",\n            shape: \"round\",\n            icon: /*#__PURE__*/_jsxDEV(PlusCircleOutlined, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 14\n            }, this),\n            size: \"large\",\n            onClick: () => {\n              mixpanel.track(\"Dashboard_View_Add_New_Url_Click\");\n              history.push({\n                pathname: RoutePath.fill_url,\n                state: {\n                  userApiId: _userApiId\n                }\n              });\n            },\n            children: \"Add Url\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              height: \"20px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(Skeleton, {\n            active: true,\n            loading: _listLoading,\n            children: [/*#__PURE__*/_jsxDEV(List, {\n              itemLayout: \"horizontal\",\n              dataSource: _urls,\n              renderItem: (item, index) => /*#__PURE__*/_jsxDEV(List.Item, {\n                actions: [/*#__PURE__*/_jsxDEV(Popconfirm, {\n                  title: \"Are you sure you want to delete?\",\n                  onCancel: () => {\n                    mixpanel.track(\"Dashboard_Execute_Delete_Url_Click\", {\n                      Confirmation: \"Deletion Cancel\"\n                    });\n                  },\n                  onConfirm: async () => {\n                    mixpanel.track(\"Dashboard_Execute_Delete_Url_Click\", {\n                      Confirmation: \"Deletion Approved\"\n                    });\n                    let apiResult = await urlRepo.deleteUrl({\n                      urlId: item.urlId\n                    });\n\n                    if (apiResult.isSuccess) {\n                      setListLoading(true);\n                      setUrls([]);\n                      getUrls();\n                      message.success(\"Delete success\");\n                    } else {\n                      message.success(\"Delete Fail\");\n                    }\n                  },\n                  children: /*#__PURE__*/_jsxDEV(Button, {\n                    shape: \"round\",\n                    icon: /*#__PURE__*/_jsxDEV(DeleteOutlined, {\n                      style: {\n                        color: \"red\"\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 188,\n                      columnNumber: 15\n                    }, this),\n                    size: \"large\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 185,\n                    columnNumber: 13\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 144,\n                  columnNumber: 12\n                }, this)],\n                children: /*#__PURE__*/_jsxDEV(List.Item.Meta, {\n                  avatar: /*#__PURE__*/_jsxDEV(Avatar, {\n                    src: `https://picsum.photos/200/300?random=${index}`\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 201,\n                    columnNumber: 13\n                  }, this),\n                  title: /*#__PURE__*/_jsxDEV(Link, {\n                    onClick: () => {\n                      mixpanel.track(\"Dashboard_View_Graph_Editor_Click\");\n                      history.push({\n                        pathname: RoutePath.graph_editor,\n                        state: {\n                          apiKey: item.apiKey,\n                          userApiId: _userApiId\n                        }\n                      });\n                    },\n                    children: item.url\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 206,\n                    columnNumber: 13\n                  }, this),\n                  description: \"Press the link to your ediotr\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 199,\n                  columnNumber: 11\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 10\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 8\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          xs: 24,\n          xl: 12,\n          className: \"dashboard_col\",\n          span: 6\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n};\n\n_s(MainDashboard, \"nh9qra9ewUgB9yAQzaZQQ7kCHVI=\", false, function () {\n  return [useHistory];\n});\n\n_c = MainDashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainDashboard\");","map":{"version":3,"sources":["/Users/gohshengyang/Documents/GitHub/codagence-web/src/pages/dashboard/MainDashboard.tsx"],"names":["React","useContext","useEffect","useState","useHistory","Button","Layout","Menu","Typography","Row","Col","List","Avatar","message","Skeleton","Popconfirm","RoutePath","AuthContext","LocalStorage","UserRepo","DeleteOutlined","PlusCircleOutlined","UrlRepo","Nav","mixpanel","Link","SubMenu","Header","Title","MainDashboard","userRepo","urlRepo","history","user","_userApiId","setUserApiId","_urls","setUrls","_listLoading","setListLoading","getUrls","userId","getUserID","apiResult","getAllUserUrlByUserId","isSuccess","data","length","forEach","element","prevState","initState","getUserById","usermodel","setEmail","email","setNickName","nickname","setPackagePlan","packagePlan","userApiId","track","push","pathname","fill_url","state","height","item","index","Confirmation","deleteUrl","urlId","success","color","graph_editor","apiKey","url"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport _ from \"lodash\";\nimport {\n\tButton,\n\tLayout,\n\tMenu,\n\tTypography,\n\tRow,\n\tCol,\n\tSpace,\n\tDivider,\n\tCard,\n\tList,\n\tAvatar,\n\tmessage,\n\tSkeleton,\n\tPopconfirm,\n\tSpin,\n} from \"antd\";\nimport \"./MainDashboard.less\";\nimport codagenceWordLogo from \"../../assets/logo/Codagence_main_logo.png\";\nimport { RoutePath } from \"../../utils/routePath\";\nimport { AuthContext } from \"../../utils/AuthContext\";\nimport { LocalStorage } from \"../../utils/localStorage\";\nimport { FirebaseServices } from \"../../utils/firebaseServices\";\nimport { PricingCards } from \"../../utils/components\";\nimport { PaymentRepo } from \"../../services/api/repositories/payment_repo\";\nimport { UserRepo } from \"../../services/api/repositories/user_repo\";\nimport { User } from \"../../services/api/models/user_model\";\nimport Meta from \"antd/lib/card/Meta\";\nimport {\n\tCopyOutlined,\n\tCopyTwoTone,\n\tDeleteOutlined,\n\tEyeInvisibleOutlined,\n\tPlusCircleOutlined,\n} from \"@ant-design/icons\";\nimport { UserUrl } from \"../../services/api/models/url_model\";\nimport { UrlRepo } from \"../../services/api/repositories/url_repo\";\nimport Nav from \"./Nav\";\nimport mixpanel from \"mixpanel-browser\";\nimport { Link } from \"@chakra-ui/react\";\n\nconst { SubMenu } = Menu;\nconst { Header } = Layout;\nconst { Title } = Typography;\n\nexport const MainDashboard: React.FC<any> = () => {\n\tlet userRepo = new UserRepo();\n\n\tlet urlRepo = new UrlRepo();\n\n\tlet history = useHistory();\n\n\t// Get current sign in User\n\tconst user = useContext(AuthContext);\n\n\t// Handle the state of each option in Menu bar\n\n\tconst [_userApiId, setUserApiId] = useState<string>(\"\");\n\n\tconst [_urls, setUrls] = useState<Array<UserUrl>>([]);\n\n\tconst [_listLoading, setListLoading] = useState<boolean>(true);\n\n\tasync function getUrls() {\n\t\tlet userId = await LocalStorage.getUserID();\n\t\tlet apiResult = await urlRepo.getAllUserUrlByUserId({\n\t\t\tuserId: userId!,\n\t\t});\n\n\t\tif (apiResult.isSuccess) {\n\t\t\tif (apiResult.data.length > 0)\n\t\t\t\tapiResult.data.forEach((element: UserUrl) => {\n\t\t\t\t\tsetUrls((prevState) => {\n\t\t\t\t\t\treturn [...prevState, element];\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t}\n\t\tsetListLoading(false);\n\t}\n\n\tuseEffect(() => {\n\t\tasync function initState() {\n\t\t\tlet userId = await LocalStorage.getUserID();\n\t\t\tlet apiResult = await userRepo.getUserById({\n\t\t\t\tuserId: userId!,\n\t\t\t});\n\t\t\tif (apiResult.isSuccess) {\n\t\t\t\tlet usermodel: User = apiResult.data[0];\n\t\t\t\tawait LocalStorage.setEmail(usermodel?.email ?? \"\");\n\t\t\t\tawait LocalStorage.setNickName(usermodel?.nickname ?? \"\");\n\t\t\t\tawait LocalStorage.setPackagePlan(\n\t\t\t\t\tusermodel?.packagePlan ?? \"free\"\n\t\t\t\t);\n\t\t\t\tsetUserApiId(usermodel?.userApiId ?? \"\");\n\t\t\t}\n\t\t}\n\n\t\tinitState();\n\t\tgetUrls();\n\n\t\treturn () => {\n\t\t\tsetUserApiId(\"\"); // This worked for me\n\t\t\tsetUrls([]);\n\t\t\tsetListLoading(true);\n\t\t};\n\t}, []);\n\n\treturn (\n\t\t<>\n\t\t\t<Nav />\n\t\t\t<Layout>\n\t\t\t\t<Row className=\"dashboard_row\">\n\t\t\t\t\t<Col xs={24} xl={6} className=\"dashboard_col\" span={6} />\n\t\t\t\t\t<Col xs={24} xl={12} className=\"dashboard_col\" span={12}>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\ttype=\"primary\"\n\t\t\t\t\t\t\tshape=\"round\"\n\t\t\t\t\t\t\ticon={<PlusCircleOutlined />}\n\t\t\t\t\t\t\tsize={\"large\"}\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tmixpanel.track(\n\t\t\t\t\t\t\t\t\t\"Dashboard_View_Add_New_Url_Click\"\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\thistory.push({\n\t\t\t\t\t\t\t\t\tpathname: RoutePath.fill_url,\n\t\t\t\t\t\t\t\t\tstate: { userApiId: _userApiId },\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tAdd Url\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t<div style={{ height: \"20px\" }}></div>\n\t\t\t\t\t\t<Skeleton active loading={_listLoading}>\n\t\t\t\t\t\t\t<List\n\t\t\t\t\t\t\t\titemLayout=\"horizontal\"\n\t\t\t\t\t\t\t\tdataSource={_urls}\n\t\t\t\t\t\t\t\trenderItem={(item, index) => (\n\t\t\t\t\t\t\t\t\t<List.Item\n\t\t\t\t\t\t\t\t\t\tactions={[\n\t\t\t\t\t\t\t\t\t\t\t<Popconfirm\n\t\t\t\t\t\t\t\t\t\t\t\ttitle=\"Are you sure you want to delete?\"\n\t\t\t\t\t\t\t\t\t\t\t\tonCancel={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tmixpanel.track(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Dashboard_Execute_Delete_Url_Click\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tConfirmation:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Deletion Cancel\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\tonConfirm={async () => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tmixpanel.track(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Dashboard_Execute_Delete_Url_Click\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tConfirmation:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Deletion Approved\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t\t\t\tlet apiResult =\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tawait urlRepo.deleteUrl(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\turlId: item.urlId!,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (apiResult.isSuccess) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetListLoading(true);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetUrls([]);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tgetUrls();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tmessage.success(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Delete success\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tmessage.success(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Delete Fail\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\t\t\tshape=\"round\"\n\t\t\t\t\t\t\t\t\t\t\t\t\ticon={\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<DeleteOutlined\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: \"red\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tsize={\"large\"}\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t</Popconfirm>,\n\t\t\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<List.Item.Meta\n\t\t\t\t\t\t\t\t\t\t\tavatar={\n\t\t\t\t\t\t\t\t\t\t\t\t<Avatar\n\t\t\t\t\t\t\t\t\t\t\t\t\tsrc={`https://picsum.photos/200/300?random=${index}`}\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\ttitle={\n\t\t\t\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tmixpanel.track(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Dashboard_View_Graph_Editor_Click\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\thistory.push({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpathname:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tRoutePath.graph_editor,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tapiKey: item.apiKey,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tuserApiId:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_userApiId,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{item.url}\n\t\t\t\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tdescription=\"Press the link to your ediotr\"\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</List.Item>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t/>{\" \"}\n\t\t\t\t\t\t</Skeleton>\n\t\t\t\t\t</Col>\n\t\t\t\t\t<Col xs={24} xl={12} className=\"dashboard_col\" span={6} />\n\t\t\t\t</Row>\n\t\t\t</Layout>\n\t\t</>\n\t);\n};\n"]},"metadata":{},"sourceType":"module"}