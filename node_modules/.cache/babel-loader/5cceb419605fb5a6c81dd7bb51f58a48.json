{"ast":null,"code":"import { FirebaseServices } from \"../../../utils/firebaseServices\";\nimport { LocalStorage } from \"../../../utils/localStorage\";\nimport { RoutePath } from \"../../../utils/routePath\";\nimport { Networking } from \"../../networking\";\nimport { Response } from \"../../response\";\nimport { GetAccessLogResponse } from \"../models/accesslog_model\";\nexport class AccessLogRepo {\n  constructor() {\n    this.networking = new Networking();\n  }\n\n  async getAccessLog(value) {\n    let headers = {\n      Authorization: `Bearer ${await LocalStorage.getAccessToken()}`\n    };\n    let path = `userId=${value === null || value === void 0 ? void 0 : value.userId}`;\n    let response = await this.networking.getData(`get_accesslog_by_createdby_id?${path}`, headers); // If data is retrieved and the data is not empty, then return\n\n    if (response.isSuccess && response.data !== null && response.data !== \"\") {\n      console.log(response.data);\n      let getAccessLogResponse = new GetAccessLogResponse().fromJson(response.data);\n      return new Response(true, response.message, getAccessLogResponse); // If data is retrieved and the data is empty, then return\n    } else if (response.isSuccess && response.message === \"No records found\") {\n      return new Response(true, \"No records found\", \"\"); // If http method is timeout or being halt, then return\n    } else if (!response.isSuccess && response.message === \"Session expired\") {\n      console.log(\"here2\"); // Go back to default page if session expired\n\n      await FirebaseServices.signOut();\n      await LocalStorage.resetStorage();\n      alert(\"Session Expired.Please sign in again.\");\n      value === null || value === void 0 ? void 0 : value.history.replace(RoutePath.default);\n      return new Response(false, \"Session expired\", \"\");\n    } else if (!response.isSuccess && response.message === \"Payment Required\") {\n      // Go back to product page if payment not made\n      alert(response.data);\n      value === null || value === void 0 ? void 0 : value.history.replace(RoutePath.product_choices);\n      return new Response(false, response.message, response.data); // If http method is timeout or being halt, then return\n    } else if (!response.isSuccess) {\n      return new Response(false, response.message, \"\");\n    } else {\n      return new Response(false, response.message, response.data);\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/gohshengyang/Documents/GitHub/zeusapi-web/src/services/api/repositories/accesslog_repo.tsx"],"names":["FirebaseServices","LocalStorage","RoutePath","Networking","Response","GetAccessLogResponse","AccessLogRepo","networking","getAccessLog","value","headers","Authorization","getAccessToken","path","userId","response","getData","isSuccess","data","console","log","getAccessLogResponse","fromJson","message","signOut","resetStorage","alert","history","replace","default","product_choices"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,iCAAjC;AACA,SAASC,YAAT,QAA6B,6BAA7B;AACA,SAASC,SAAT,QAA0B,0BAA1B;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,oBAAT,QAAqC,2BAArC;AAEA,OAAO,MAAMC,aAAN,CAAoB;AAAA;AAAA,SAC1BC,UAD0B,GACb,IAAIJ,UAAJ,EADa;AAAA;;AAGR,QAAZK,YAAY,CAACC,KAAD,EAGI;AACrB,QAAIC,OAAO,GAAG;AACbC,MAAAA,aAAa,EAAG,UAAS,MAAMV,YAAY,CAACW,cAAb,EAA8B;AADhD,KAAd;AAGA,QAAIC,IAAI,GAAI,UAASJ,KAAV,aAAUA,KAAV,uBAAUA,KAAK,CAAEK,MAAO,EAAnC;AACA,QAAIC,QAAQ,GAAG,MAAM,KAAKR,UAAL,CAAgBS,OAAhB,CACnB,iCAAgCH,IAAK,EADlB,EAEpBH,OAFoB,CAArB,CALqB,CASrB;;AACA,QACCK,QAAQ,CAACE,SAAT,IACAF,QAAQ,CAACG,IAAT,KAAkB,IADlB,IAEAH,QAAQ,CAACG,IAAT,KAAkB,EAHnB,EAIE;AACDC,MAAAA,OAAO,CAACC,GAAR,CAAYL,QAAQ,CAACG,IAArB;AACA,UAAIG,oBAAoB,GAAG,IAAIhB,oBAAJ,GAA2BiB,QAA3B,CAC1BP,QAAQ,CAACG,IADiB,CAA3B;AAGA,aAAO,IAAId,QAAJ,CAAa,IAAb,EAAmBW,QAAQ,CAACQ,OAA5B,EAAqCF,oBAArC,CAAP,CALC,CAOD;AACA,KAZD,MAYO,IACNN,QAAQ,CAACE,SAAT,IACAF,QAAQ,CAACQ,OAAT,KAAqB,kBAFf,EAGL;AACD,aAAO,IAAInB,QAAJ,CAAa,IAAb,EAAmB,kBAAnB,EAAuC,EAAvC,CAAP,CADC,CAGD;AACA,KAPM,MAOA,IACN,CAACW,QAAQ,CAACE,SAAV,IACAF,QAAQ,CAACQ,OAAT,KAAqB,iBAFf,EAGL;AACDJ,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EADC,CAED;;AACA,YAAMpB,gBAAgB,CAACwB,OAAjB,EAAN;AACA,YAAMvB,YAAY,CAACwB,YAAb,EAAN;AACAC,MAAAA,KAAK,CAAC,uCAAD,CAAL;AACAjB,MAAAA,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEkB,OAAP,CAAeC,OAAf,CAAuB1B,SAAS,CAAC2B,OAAjC;AACA,aAAO,IAAIzB,QAAJ,CAAa,KAAb,EAAoB,iBAApB,EAAuC,EAAvC,CAAP;AACA,KAXM,MAWA,IACN,CAACW,QAAQ,CAACE,SAAV,IACAF,QAAQ,CAACQ,OAAT,KAAqB,kBAFf,EAGL;AACD;AACAG,MAAAA,KAAK,CAACX,QAAQ,CAACG,IAAV,CAAL;AACAT,MAAAA,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEkB,OAAP,CAAeC,OAAf,CAAuB1B,SAAS,CAAC4B,eAAjC;AACA,aAAO,IAAI1B,QAAJ,CAAa,KAAb,EAAoBW,QAAQ,CAACQ,OAA7B,EAAsCR,QAAQ,CAACG,IAA/C,CAAP,CAJC,CAMD;AACA,KAVM,MAUA,IAAI,CAACH,QAAQ,CAACE,SAAd,EAAyB;AAC/B,aAAO,IAAIb,QAAJ,CAAa,KAAb,EAAoBW,QAAQ,CAACQ,OAA7B,EAAsC,EAAtC,CAAP;AACA,KAFM,MAEA;AACN,aAAO,IAAInB,QAAJ,CAAa,KAAb,EAAoBW,QAAQ,CAACQ,OAA7B,EAAsCR,QAAQ,CAACG,IAA/C,CAAP;AACA;AACD;;AA7DyB","sourcesContent":["import { FirebaseServices } from \"../../../utils/firebaseServices\";\nimport { LocalStorage } from \"../../../utils/localStorage\";\nimport { RoutePath } from \"../../../utils/routePath\";\nimport { Networking } from \"../../networking\";\nimport { Response } from \"../../response\";\nimport { GetAccessLogResponse } from \"../models/accesslog_model\";\n\nexport class AccessLogRepo {\n\tnetworking = new Networking();\n\n\tasync getAccessLog(value?: {\n\t\thistory?: any;\n\t\tuserId: string;\n\t}): Promise<Response> {\n\t\tlet headers = {\n\t\t\tAuthorization: `Bearer ${await LocalStorage.getAccessToken()}`,\n\t\t};\n\t\tlet path = `userId=${value?.userId}`;\n\t\tlet response = await this.networking.getData(\n\t\t\t`get_accesslog_by_createdby_id?${path}`,\n\t\t\theaders\n\t\t);\n\t\t// If data is retrieved and the data is not empty, then return\n\t\tif (\n\t\t\tresponse.isSuccess &&\n\t\t\tresponse.data !== null &&\n\t\t\tresponse.data !== \"\"\n\t\t) {\n\t\t\tconsole.log(response.data);\n\t\t\tlet getAccessLogResponse = new GetAccessLogResponse().fromJson(\n\t\t\t\tresponse.data\n\t\t\t);\n\t\t\treturn new Response(true, response.message, getAccessLogResponse);\n\n\t\t\t// If data is retrieved and the data is empty, then return\n\t\t} else if (\n\t\t\tresponse.isSuccess &&\n\t\t\tresponse.message === \"No records found\"\n\t\t) {\n\t\t\treturn new Response(true, \"No records found\", \"\");\n\n\t\t\t// If http method is timeout or being halt, then return\n\t\t} else if (\n\t\t\t!response.isSuccess &&\n\t\t\tresponse.message === \"Session expired\"\n\t\t) {\n\t\t\tconsole.log(\"here2\");\n\t\t\t// Go back to default page if session expired\n\t\t\tawait FirebaseServices.signOut();\n\t\t\tawait LocalStorage.resetStorage();\n\t\t\talert(\"Session Expired.Please sign in again.\");\n\t\t\tvalue?.history.replace(RoutePath.default);\n\t\t\treturn new Response(false, \"Session expired\", \"\");\n\t\t} else if (\n\t\t\t!response.isSuccess &&\n\t\t\tresponse.message === \"Payment Required\"\n\t\t) {\n\t\t\t// Go back to product page if payment not made\n\t\t\talert(response.data);\n\t\t\tvalue?.history.replace(RoutePath.product_choices);\n\t\t\treturn new Response(false, response.message, response.data);\n\n\t\t\t// If http method is timeout or being halt, then return\n\t\t} else if (!response.isSuccess) {\n\t\t\treturn new Response(false, response.message, \"\");\n\t\t} else {\n\t\t\treturn new Response(false, response.message, response.data);\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}