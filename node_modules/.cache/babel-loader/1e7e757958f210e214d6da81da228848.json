{"ast":null,"code":"var _jsxFileName = \"/Users/gohshengyang/Documents/GitHub/zeusapi-web/src/pages/relationship/CreateRelationship.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { FillForm } from \"../../utils/components\";\nimport { FormLabel, Stack, Spinner, Link } from \"@chakra-ui/react\";\nimport { Form, message, Select } from \"antd\";\nimport { LocalStorage } from \"../../utils/localStorage\";\nimport { RoleRepo } from \"../../services/api/repositories/role_repo\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { RoutePath } from \"../../utils/routePath\";\nimport { ClientRepo } from \"../../services/api/repositories/client_repo\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  Option\n} = Select;\nexport const CreateRelationship = () => {\n  _s();\n\n  let location = useLocation();\n  let history = useHistory();\n  let clientRepo = new ClientRepo();\n  let roleRepo = new RoleRepo();\n  const locationState = location.state;\n  const [form] = Form.useForm();\n  const [_roleList, setRoleList] = useState([]);\n  const [_clientList, setClientList] = useState([]);\n  const [_isFormLoading, setFormLoading] = useState(true);\n  const [_isRoleListLoading, setRoleListLoading] = useState(true);\n  const [_isClientListLoading, setClientListLoading] = useState(true);\n\n  async function getClients() {\n    let userId = await LocalStorage.getUserID();\n    let apiResult = await clientRepo.getAllClients({\n      userId: userId\n    });\n\n    if (apiResult.isSuccess) {\n      if (apiResult.data.length > 0) apiResult.data.forEach(element => {\n        setClientList(prevState => {\n          return [...prevState, element];\n        });\n      });\n    }\n\n    setClientListLoading(false);\n  }\n\n  async function getRoles() {\n    let userId = await LocalStorage.getUserID();\n    let apiResult = await roleRepo.getAllRoles({\n      userId: userId\n    });\n\n    if (apiResult.isSuccess) {\n      if (apiResult.data.length > 0) apiResult.data.forEach(element => {\n        setRoleList(prevState => {\n          return [...prevState, element];\n        });\n      });\n    }\n\n    setRoleListLoading(false);\n  }\n\n  const proceedToCreatePage = value => {\n    if (value === RoutePath.create_client || value === RoutePath.create_role) history.replace(value);\n  };\n\n  const children = /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n      children: \"Client\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n      name: \"client\",\n      rules: [{\n        required: true,\n        message: \"Please select a client\"\n      }],\n      children: /*#__PURE__*/_jsxDEV(Stack, {\n        direction: \"row\",\n        spacing: 4,\n        width: \"50%\",\n        children: [/*#__PURE__*/_jsxDEV(Select, {\n          placeholder: \"Select a client\",\n          onChange: proceedToCreatePage,\n          allowClear: true,\n          children: [/*#__PURE__*/_jsxDEV(Option, {\n            value: RoutePath.create_client,\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              onClick: () => {\n                console.log(\"tapped\");\n                history.replace(RoutePath.create_client);\n              },\n              color: \"gray.500\",\n              children: [\" \", \"Click here to create a new client\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 8\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 7\n          }, this), _clientList.map(item => {\n            return /*#__PURE__*/_jsxDEV(Option, {\n              value: item.clientId,\n              children: item.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 9\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 6\n        }, this), _isClientListLoading ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 30\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(FormLabel, {\n      children: \"Role\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n      name: \"role\",\n      rules: [{\n        required: true,\n        message: \"Please select a role\"\n      }],\n      children: /*#__PURE__*/_jsxDEV(Stack, {\n        direction: \"row\",\n        spacing: 4,\n        width: \"50%\",\n        children: [/*#__PURE__*/_jsxDEV(Select, {\n          placeholder: \"Select a role\",\n          value: RoutePath.create_role,\n          allowClear: true,\n          children: [/*#__PURE__*/_jsxDEV(Option, {\n            value: \"\",\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              onClick: () => {\n                console.log(\"tapped\");\n                history.replace(RoutePath.create_role);\n              },\n              color: \"gray.500\",\n              children: [\" \", \"Click here to create a new role\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 8\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 7\n          }, this), _roleList.map(item => {\n            return /*#__PURE__*/_jsxDEV(Option, {\n              value: item.roleId,\n              children: item.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 9\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 6\n        }, this), _isRoleListLoading ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 28\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n\n  const onSubmit = async values => {\n    let userId = await LocalStorage.getUserID();\n    let apiResult = await roleRepo.saveRole({\n      roleId: locationState !== undefined ? locationState.roleId : null,\n      createdById: userId !== null && userId !== void 0 ? userId : \"\",\n      name: values[\"name\"]\n    });\n\n    if (apiResult.isSuccess) {\n      message.success(\"Role has created\");\n      locationState !== undefined ? history.replace(RoutePath.dashboard) : form.resetFields();\n    } else {\n      message.error(\"Fail to save\");\n    }\n  };\n\n  useEffect(() => {\n    async function initState() {\n      if (locationState !== undefined) {\n        let apiResult = await roleRepo.getRoleById({\n          roleId: locationState.roleId\n        });\n\n        if (apiResult.isSuccess) {// setRoleData(\n          // \tnew Role({\n          // \t\tname: apiResult.data[0].name,\n          // \t})\n          // );\n        }\n      }\n\n      setFormLoading(false);\n    }\n\n    initState();\n    getClients();\n    getRoles();\n    return () => {// setRoleData(new Role({}));\n    };\n  }, []); // Set Initial Values Using State in antd form\n\n  useEffect(() => {\n    form.resetFields();\n  }, [_clientList, _roleList]);\n  return /*#__PURE__*/_jsxDEV(FillForm, {\n    formComponents: children,\n    title: \"Relationship details\",\n    subtitle: \"Please fill in the relationship\",\n    initialValue: {},\n    form: form,\n    onSubmit: onSubmit,\n    isFormLoading: _isFormLoading,\n    children: \" \"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 208,\n    columnNumber: 3\n  }, this);\n};\n\n_s(CreateRelationship, \"6lxM2yFaHFgV69qqI0SUK+RhfHA=\", false, function () {\n  return [useLocation, useHistory, Form.useForm];\n});\n\n_c = CreateRelationship;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateRelationship\");","map":{"version":3,"sources":["/Users/gohshengyang/Documents/GitHub/zeusapi-web/src/pages/relationship/CreateRelationship.tsx"],"names":["React","useEffect","useState","FillForm","FormLabel","Stack","Spinner","Link","Form","message","Select","LocalStorage","RoleRepo","useHistory","useLocation","RoutePath","ClientRepo","Option","CreateRelationship","location","history","clientRepo","roleRepo","locationState","state","form","useForm","_roleList","setRoleList","_clientList","setClientList","_isFormLoading","setFormLoading","_isRoleListLoading","setRoleListLoading","_isClientListLoading","setClientListLoading","getClients","userId","getUserID","apiResult","getAllClients","isSuccess","data","length","forEach","element","prevState","getRoles","getAllRoles","proceedToCreatePage","value","create_client","create_role","replace","children","required","console","log","map","item","clientId","name","roleId","onSubmit","values","saveRole","undefined","createdById","success","dashboard","resetFields","error","initState","getRoleById"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { FillForm } from \"../../utils/components\";\nimport {\n\tFormLabel,\n\tButton as ChakraButton,\n\tText,\n\tStack,\n\tSpinner,\n\tButton,\n\tLink,\n} from \"@chakra-ui/react\";\nimport { Form, Input, message, Select } from \"antd\";\nimport { LocalStorage } from \"../../utils/localStorage\";\nimport { RoleRepo } from \"../../services/api/repositories/role_repo\";\nimport { Role } from \"../../services/api/models/role_model\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { RoutePath } from \"../../utils/routePath\";\nimport { UserRepo } from \"../../services/api/repositories/user_repo\";\nimport { ClientRepo } from \"../../services/api/repositories/client_repo\";\nimport { Client } from \"../../services/api/models/client_model\";\n\nconst { Option } = Select;\n\nexport const CreateRelationship: React.FC<any> = () => {\n\tlet location = useLocation();\n\tlet history = useHistory();\n\n\tlet clientRepo = new ClientRepo();\n\tlet roleRepo = new RoleRepo();\n\n\tconst locationState: any = location.state;\n\tconst [form] = Form.useForm();\n\n\tconst [_roleList, setRoleList] = useState<Array<Role>>([]);\n\tconst [_clientList, setClientList] = useState<Array<Client>>([]);\n\tconst [_isFormLoading, setFormLoading] = useState<boolean>(true);\n\tconst [_isRoleListLoading, setRoleListLoading] = useState<boolean>(true);\n\tconst [_isClientListLoading, setClientListLoading] =\n\t\tuseState<boolean>(true);\n\n\tasync function getClients() {\n\t\tlet userId = await LocalStorage.getUserID();\n\t\tlet apiResult = await clientRepo.getAllClients({\n\t\t\tuserId: userId!,\n\t\t});\n\n\t\tif (apiResult.isSuccess) {\n\t\t\tif (apiResult.data.length > 0)\n\t\t\t\tapiResult.data.forEach((element: Client) => {\n\t\t\t\t\tsetClientList((prevState) => {\n\t\t\t\t\t\treturn [...prevState, element];\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t}\n\t\tsetClientListLoading(false);\n\t}\n\n\tasync function getRoles() {\n\t\tlet userId = await LocalStorage.getUserID();\n\t\tlet apiResult = await roleRepo.getAllRoles({\n\t\t\tuserId: userId!,\n\t\t});\n\n\t\tif (apiResult.isSuccess) {\n\t\t\tif (apiResult.data.length > 0)\n\t\t\t\tapiResult.data.forEach((element: Client) => {\n\t\t\t\t\tsetRoleList((prevState) => {\n\t\t\t\t\t\treturn [...prevState, element];\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t}\n\t\tsetRoleListLoading(false);\n\t}\n\n\tconst proceedToCreatePage = (value: string) => {\n\t\tif (\n\t\t\tvalue === RoutePath.create_client ||\n\t\t\tvalue === RoutePath.create_role\n\t\t)\n\t\t\thistory.replace(value);\n\t};\n\n\tconst children = (\n\t\t<>\n\t\t\t<FormLabel>Client</FormLabel>\n\t\t\t<Form.Item\n\t\t\t\tname=\"client\"\n\t\t\t\trules={[\n\t\t\t\t\t{\n\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\tmessage: \"Please select a client\",\n\t\t\t\t\t},\n\t\t\t\t]}\n\t\t\t>\n\t\t\t\t<Stack direction={\"row\"} spacing={4} width={\"50%\"}>\n\t\t\t\t\t<Select\n\t\t\t\t\t\tplaceholder=\"Select a client\"\n\t\t\t\t\t\tonChange={proceedToCreatePage}\n\t\t\t\t\t\tallowClear\n\t\t\t\t\t>\n\t\t\t\t\t\t<Option value={RoutePath.create_client}>\n\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\tconsole.log(\"tapped\");\n\t\t\t\t\t\t\t\t\thistory.replace(RoutePath.create_client);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tcolor={\"gray.500\"}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{\" \"}\n\t\t\t\t\t\t\t\tClick here to create a new client\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t</Option>\n\t\t\t\t\t\t{_clientList.map((item) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<Option value={item.clientId}>\n\t\t\t\t\t\t\t\t\t{item.name}\n\t\t\t\t\t\t\t\t</Option>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</Select>\n\t\t\t\t\t{_isClientListLoading ? <Spinner /> : <></>}\n\t\t\t\t</Stack>\n\t\t\t</Form.Item>\n\t\t\t<FormLabel>Role</FormLabel>\n\t\t\t<Form.Item\n\t\t\t\tname=\"role\"\n\t\t\t\trules={[\n\t\t\t\t\t{\n\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\tmessage: \"Please select a role\",\n\t\t\t\t\t},\n\t\t\t\t]}\n\t\t\t>\n\t\t\t\t<Stack direction={\"row\"} spacing={4} width={\"50%\"}>\n\t\t\t\t\t<Select placeholder=\"Select a role\" value={RoutePath.create_role} allowClear>\n\t\t\t\t\t\t<Option value=\"\">\n\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\tconsole.log(\"tapped\");\n\t\t\t\t\t\t\t\t\thistory.replace(RoutePath.create_role);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tcolor={\"gray.500\"}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{\" \"}\n\t\t\t\t\t\t\t\tClick here to create a new role\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t</Option>\n\t\t\t\t\t\t{_roleList.map((item) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<Option value={item.roleId}>{item.name}</Option>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</Select>\n\t\t\t\t\t{_isRoleListLoading ? <Spinner /> : <></>}\n\t\t\t\t</Stack>\n\t\t\t</Form.Item>\n\t\t</>\n\t);\n\n\tconst onSubmit = async (values: any) => {\n\t\tlet userId = await LocalStorage.getUserID();\n\t\tlet apiResult = await roleRepo.saveRole({\n\t\t\troleId: locationState !== undefined ? locationState.roleId : null,\n\t\t\tcreatedById: userId ?? \"\",\n\t\t\tname: values[\"name\"],\n\t\t});\n\t\tif (apiResult.isSuccess) {\n\t\t\tmessage.success(\"Role has created\");\n\t\t\tlocationState !== undefined\n\t\t\t\t? history.replace(RoutePath.dashboard)\n\t\t\t\t: form.resetFields();\n\t\t} else {\n\t\t\tmessage.error(\"Fail to save\");\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tasync function initState() {\n\t\t\tif (locationState !== undefined) {\n\t\t\t\tlet apiResult = await roleRepo.getRoleById({\n\t\t\t\t\troleId: locationState.roleId!,\n\t\t\t\t});\n\t\t\t\tif (apiResult.isSuccess) {\n\t\t\t\t\t// setRoleData(\n\t\t\t\t\t// \tnew Role({\n\t\t\t\t\t// \t\tname: apiResult.data[0].name,\n\t\t\t\t\t// \t})\n\t\t\t\t\t// );\n\t\t\t\t}\n\t\t\t}\n\t\t\tsetFormLoading(false);\n\t\t}\n\n\t\tinitState();\n\t\tgetClients();\n\t\tgetRoles();\n\t\treturn () => {\n\t\t\t// setRoleData(new Role({}));\n\t\t};\n\t}, []);\n\n\t// Set Initial Values Using State in antd form\n\tuseEffect(() => {\n\t\tform.resetFields();\n\t}, [_clientList, _roleList]);\n\n\treturn (\n\t\t<FillForm\n\t\t\tformComponents={children}\n\t\t\ttitle={\"Relationship details\"}\n\t\t\tsubtitle={\"Please fill in the relationship\"}\n\t\t\tinitialValue={{}}\n\t\t\tform={form}\n\t\t\tonSubmit={onSubmit}\n\t\t\tisFormLoading={_isFormLoading}\n\t\t>\n\t\t\t{\" \"}\n\t\t</FillForm>\n\t);\n};\n"]},"metadata":{},"sourceType":"module"}