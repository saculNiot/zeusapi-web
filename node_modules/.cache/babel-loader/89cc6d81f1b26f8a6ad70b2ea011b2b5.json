{"ast":null,"code":"export class Payment {\n  constructor(userId, email, paymentMethodId, productId, amount, sessionUrl) {\n    this.userId = void 0;\n    this.email = void 0;\n    this.paymentMethodId = void 0;\n    this.productId = void 0;\n    this.amount = void 0;\n    this.sessionUrl = void 0;\n    this.userId = userId;\n    this.email = email;\n    this.paymentMethodId = paymentMethodId;\n    this.productId = productId;\n    this.amount = amount;\n    this.sessionUrl = sessionUrl;\n  } // Convert the map into the User object\n\n\n  fromJson(json) {\n    this.userId = json.get(\"user_id\");\n    this.email = json.get(\"email\");\n    this.paymentMethodId = json.get(\"payment_method_id\");\n    this.productId = json.get(\"product_id\");\n    this.amount = json.get(\"amount\");\n    this.sessionUrl = json.get(\"session_url\");\n    return this;\n  } // Convert User Object into map\n\n\n  toJson() {\n    let data = new Map();\n    data.set(\"userId\", this.userId);\n    data.set(\"email\", this.email);\n    data.set(\"paymentMethodId\", this.paymentMethodId);\n    data.set(\"productId\", this.productId);\n    data.set(\"amount\", this.amount);\n    data.set(\"sessionUrl\", this.sessionUrl);\n    return data;\n  }\n\n}\nexport class GetPaymentResponse {\n  constructor(payment) {\n    this.payment = void 0;\n    this.payment = payment;\n  } // Convert JSON (containing list of data) to array\n\n\n  fromJson(json) {\n    if (json.get(\"Payment\") != null) {\n      this.payment = [];\n      json.get(\"Payment\").forEach(v => {\n        var _this$payment;\n\n        (_this$payment = this.payment) === null || _this$payment === void 0 ? void 0 : _this$payment.push(new Payment().fromJson(new Map(Object.entries(v))));\n      });\n    }\n\n    return this.payment;\n  }\n\n}","map":{"version":3,"sources":["/Users/gohshengyang/Documents/GitHub/codagence-web/src/services/api/models/payment_model.tsx"],"names":["Payment","constructor","userId","email","paymentMethodId","productId","amount","sessionUrl","fromJson","json","get","toJson","data","Map","set","GetPaymentResponse","payment","forEach","v","push","Object","entries"],"mappings":"AAAA,OAAO,MAAMA,OAAN,CAAc;AAQnBC,EAAAA,WAAW,CACTC,MADS,EAETC,KAFS,EAGTC,eAHS,EAITC,SAJS,EAKTC,MALS,EAMTC,UANS,EAOT;AAAA,SAdFL,MAcE;AAAA,SAbFC,KAaE;AAAA,SAZFC,eAYE;AAAA,SAXFC,SAWE;AAAA,SAVFC,MAUE;AAAA,SATFC,UASE;AACA,SAAKL,MAAL,GAAcA,MAAd;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,eAAL,GAAuBA,eAAvB;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACD,GAtBkB,CAwBnB;;;AACAC,EAAAA,QAAQ,CAACC,IAAD,EAAyB;AAC/B,SAAKP,MAAL,GAAcO,IAAI,CAACC,GAAL,CAAS,SAAT,CAAd;AACA,SAAKP,KAAL,GAAaM,IAAI,CAACC,GAAL,CAAS,OAAT,CAAb;AACA,SAAKN,eAAL,GAAuBK,IAAI,CAACC,GAAL,CAAS,mBAAT,CAAvB;AACA,SAAKL,SAAL,GAAiBI,IAAI,CAACC,GAAL,CAAS,YAAT,CAAjB;AACA,SAAKJ,MAAL,GAAcG,IAAI,CAACC,GAAL,CAAS,QAAT,CAAd;AACA,SAAKH,UAAL,GAAkBE,IAAI,CAACC,GAAL,CAAS,aAAT,CAAlB;AAEA,WAAO,IAAP;AACD,GAlCkB,CAoCnB;;;AACAC,EAAAA,MAAM,GAAG;AACP,QAAIC,IAAI,GAAG,IAAIC,GAAJ,EAAX;AACAD,IAAAA,IAAI,CAACE,GAAL,CAAS,QAAT,EAAmB,KAAKZ,MAAxB;AACAU,IAAAA,IAAI,CAACE,GAAL,CAAS,OAAT,EAAkB,KAAKX,KAAvB;AACAS,IAAAA,IAAI,CAACE,GAAL,CAAS,iBAAT,EAA4B,KAAKV,eAAjC;AACAQ,IAAAA,IAAI,CAACE,GAAL,CAAS,WAAT,EAAsB,KAAKT,SAA3B;AACAO,IAAAA,IAAI,CAACE,GAAL,CAAS,QAAT,EAAmB,KAAKR,MAAxB;AACAM,IAAAA,IAAI,CAACE,GAAL,CAAS,YAAT,EAAuB,KAAKP,UAA5B;AAEA,WAAOK,IAAP;AACD;;AA/CkB;AAkDrB,OAAO,MAAMG,kBAAN,CAAyB;AAG9Bd,EAAAA,WAAW,CAACe,OAAD,EAA2B;AAAA,SAFtCA,OAEsC;AACpC,SAAKA,OAAL,GAAeA,OAAf;AACD,GAL6B,CAO9B;;;AACAR,EAAAA,QAAQ,CAACC,IAAD,EAAyB;AAC/B,QAAIA,IAAI,CAACC,GAAL,CAAS,SAAT,KAAuB,IAA3B,EAAiC;AAC/B,WAAKM,OAAL,GAAe,EAAf;AACAP,MAAAA,IAAI,CAACC,GAAL,CAAS,SAAT,EAAoBO,OAApB,CAA6BC,CAAD,IAAyB;AAAA;;AACnD,8BAAKF,OAAL,gEAAcG,IAAd,CAAmB,IAAInB,OAAJ,GAAcQ,QAAd,CAAuB,IAAIK,GAAJ,CAAQO,MAAM,CAACC,OAAP,CAAeH,CAAf,CAAR,CAAvB,CAAnB;AACD,OAFD;AAGD;;AAED,WAAO,KAAKF,OAAZ;AACD;;AAjB6B","sourcesContent":["export class Payment {\n  userId?: string;\n  email?: string;\n  paymentMethodId?: string;\n  productId?: string;\n  amount?: number;\n  sessionUrl?: string;\n\n  constructor(\n    userId?: string,\n    email?: string,\n    paymentMethodId?: string,\n    productId?: string,\n    amount?: number,\n    sessionUrl?: string\n  ) {\n    this.userId = userId;\n    this.email = email;\n    this.paymentMethodId = paymentMethodId;\n    this.productId = productId;\n    this.amount = amount;\n    this.sessionUrl = sessionUrl;\n  }\n\n  // Convert the map into the User object\n  fromJson(json: Map<String, any>) {\n    this.userId = json.get(\"user_id\");\n    this.email = json.get(\"email\");\n    this.paymentMethodId = json.get(\"payment_method_id\");\n    this.productId = json.get(\"product_id\");\n    this.amount = json.get(\"amount\");\n    this.sessionUrl = json.get(\"session_url\");\n\n    return this;\n  }\n\n  // Convert User Object into map\n  toJson() {\n    let data = new Map<String, any>();\n    data.set(\"userId\", this.userId);\n    data.set(\"email\", this.email);\n    data.set(\"paymentMethodId\", this.paymentMethodId);\n    data.set(\"productId\", this.productId);\n    data.set(\"amount\", this.amount);\n    data.set(\"sessionUrl\", this.sessionUrl);\n\n    return data;\n  }\n}\n\nexport class GetPaymentResponse {\n  payment?: Array<Payment>;\n\n  constructor(payment?: Array<Payment>) {\n    this.payment = payment;\n  }\n\n  // Convert JSON (containing list of data) to array\n  fromJson(json: Map<String, any>) {\n    if (json.get(\"Payment\") != null) {\n      this.payment = [];\n      json.get(\"Payment\").forEach((v: Map<String, any>) => {\n        this.payment?.push(new Payment().fromJson(new Map(Object.entries(v))));\n      });\n    }\n\n    return this.payment;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}