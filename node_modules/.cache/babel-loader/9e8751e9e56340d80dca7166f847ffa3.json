{"ast":null,"code":"import { AES, enc } from \"crypto-js\";\nexport class Encryption {}\n\nEncryption.encrypt = secretPhrase => {\n  // Encrypt the encrypted string\n  var iv = CryptoJS.lib.WordArray.random(16);\n  var key = CryptoJS.enc.Base64.parse(\"SecretPhase\");\n  var encrypted = AES.encrypt(secretPhrase, key, {\n    iv: iv\n  });\n  var joinedData = iv.clone().concat(encrypted.ciphertext);\n  var joinedDataB64 = CryptoJS.enc.Base64.stringify(joinedData);\n  return joinedDataB64.replace(/(.{64})/g, \"$1\\n\");\n};\n\nEncryption.decrypt = encryptedPhrase => {\n  // Decrypt the encrypted string\n  return AES.decrypt(encryptedPhrase, \"Secret Phrase\").toString(enc.Utf8);\n};","map":{"version":3,"sources":["/Users/gohshengyang/Documents/GitHub/zeusapi-web/src/utils/encryption.tsx"],"names":["AES","enc","Encryption","encrypt","secretPhrase","iv","CryptoJS","lib","WordArray","random","key","Base64","parse","encrypted","joinedData","clone","concat","ciphertext","joinedDataB64","stringify","replace","decrypt","encryptedPhrase","toString","Utf8"],"mappings":"AAAA,SAAQA,GAAR,EAAaC,GAAb,QAAuB,WAAvB;AAEA,OAAO,MAAMC,UAAN,CAAiB;;AAAXA,U,CAEFC,O,GAAWC,YAAD,IAA0B;AACvC;AACA,MAAIC,EAAE,GAAGC,QAAQ,CAACC,GAAT,CAAaC,SAAb,CAAuBC,MAAvB,CAA8B,EAA9B,CAAT;AACA,MAAIC,GAAG,GAAGJ,QAAQ,CAACL,GAAT,CAAaU,MAAb,CAAoBC,KAApB,CAA0B,aAA1B,CAAV;AAEA,MAAIC,SAAS,GAAIb,GAAG,CAACG,OAAJ,CAAYC,YAAZ,EAA0BM,GAA1B,EAA+B;AAACL,IAAAA,EAAE,EAACA;AAAJ,GAA/B,CAAjB;AACA,MAAIS,UAAU,GAAGT,EAAE,CAACU,KAAH,GAAWC,MAAX,CAAkBH,SAAS,CAACI,UAA5B,CAAjB;AACA,MAAIC,aAAa,GAAGZ,QAAQ,CAACL,GAAT,CAAaU,MAAb,CAAoBQ,SAApB,CAA8BL,UAA9B,CAApB;AACA,SAAOI,aAAa,CAACE,OAAd,CAAsB,UAAtB,EAAiC,MAAjC,CAAP;AACH,C;;AAXQlB,U,CAaFmB,O,GAAWC,eAAD,IAA6B;AAC1C;AACA,SAAOtB,GAAG,CAACqB,OAAJ,CAAYC,eAAZ,EAA6B,eAA7B,EAA8CC,QAA9C,CAAuDtB,GAAG,CAACuB,IAA3D,CAAP;AACH,C","sourcesContent":["import {AES, enc} from \"crypto-js\";\n\nexport class Encryption {\n    /*----- Encruption using Advanced Encryption Standard (AES) ------*/\n    static encrypt = (secretPhrase: string) => {\n        // Encrypt the encrypted string\n        var iv = CryptoJS.lib.WordArray.random(16);\n        var key = CryptoJS.enc.Base64.parse(\"SecretPhase\");\n\n        var encrypted  = AES.encrypt(secretPhrase, key, {iv:iv});\n        var joinedData = iv.clone().concat(encrypted.ciphertext)\n        var joinedDataB64 = CryptoJS.enc.Base64.stringify(joinedData)\n        return joinedDataB64.replace(/(.{64})/g,\"$1\\n\");\n    };\n\n    static decrypt = (encryptedPhrase: string) => {\n        // Decrypt the encrypted string\n        return AES.decrypt(encryptedPhrase, \"Secret Phrase\").toString(enc.Utf8);\n    };\n}\n"]},"metadata":{},"sourceType":"module"}