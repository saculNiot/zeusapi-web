{"ast":null,"code":"var _jsxFileName = \"/Users/gohshengyang/Documents/GitHub/zeusapi-web/src/pages/client/CreateClient.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { FillForm } from \"../../utils/components\";\nimport { FormLabel, Button as ChakraButton, Text } from \"@chakra-ui/react\";\nimport { MinusCircleOutlined, PlusOutlined } from \"@ant-design/icons\";\nimport { Form, Input, message, Space } from \"antd\";\nimport { ClientRepo } from \"../../services/api/repositories/client_repo\";\nimport { LocalStorage } from \"../../utils/localStorage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const CreateClient = () => {\n  _s();\n\n  const [form] = Form.useForm();\n  const clientRepo = new ClientRepo();\n\n  const children = /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n      children: \"Name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n      name: \"name\",\n      rules: [{\n        required: true,\n        message: \"Please input the Client's name\"\n      }],\n      children: /*#__PURE__*/_jsxDEV(Input, {\n        placeholder: \"Name\",\n        style: {\n          width: \"50%\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n        children: \"Attribute\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Form.List, {\n        name: \"attribute\",\n        children: (fields, {\n          add,\n          remove\n        }) => /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [fields.map(({\n            key,\n            name,\n            ...restField\n          }) => /*#__PURE__*/_jsxDEV(Space, {\n            style: {\n              display: \"flex\",\n              marginBottom: 8\n            },\n            align: \"baseline\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Item, { ...restField,\n              name: [name, \"key\"],\n              rules: [{\n                required: true,\n                message: \"Missing attribute key\"\n              }],\n              children: /*#__PURE__*/_jsxDEV(Input, {\n                placeholder: \"Attribute Value\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 51,\n                columnNumber: 11\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 10\n            }, this), /*#__PURE__*/_jsxDEV(Form.Item, { ...restField,\n              name: [name, \"value\"],\n              rules: [{\n                required: true,\n                message: \"Missing attribute value\"\n              }],\n              children: /*#__PURE__*/_jsxDEV(Input, {\n                placeholder: \"Attribute value\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 64,\n                columnNumber: 11\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 10\n            }, this), /*#__PURE__*/_jsxDEV(MinusCircleOutlined, {\n              onClick: () => remove(name)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 10\n            }, this)]\n          }, key, true, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 9\n          }, this)), /*#__PURE__*/_jsxDEV(Form.Item, {\n            children: /*#__PURE__*/_jsxDEV(ChakraButton, {\n              variant: \"outline\",\n              onClick: () => add(),\n              leftIcon: /*#__PURE__*/_jsxDEV(PlusOutlined, {\n                color: \"blue.400\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 75,\n                columnNumber: 20\n              }, this),\n              children: /*#__PURE__*/_jsxDEV(Text, {\n                color: \"blue.400\",\n                children: \"Add Attribute\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 10\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 9\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 8\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true);\n\n  const onSubmit = async values => {\n    let userId = await LocalStorage.getUserID();\n    console.log(values['attribute']);\n    let apiResult = await clientRepo.saveClient({\n      createdById: userId !== null && userId !== void 0 ? userId : \"\",\n      name: values[\"name\"],\n      attribute: values[\"attribute\"]\n    });\n\n    if (apiResult.isSuccess) {\n      message.success(\"Client has created\");\n    } else {\n      message.error(\"Fail to save\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(FillForm, {\n    formComponents: children,\n    title: \"Client's Profile\",\n    subtitle: \"Please fill in the client's name and attributes\",\n    initialValue: [],\n    form: form,\n    onSubmit: onSubmit,\n    children: \" \"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 3\n  }, this);\n};\n\n_s(CreateClient, \"rI7DrJIrFu7YmlGWYiMFTzs8jF0=\", false, function () {\n  return [Form.useForm];\n});\n\n_c = CreateClient;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateClient\");","map":{"version":3,"sources":["/Users/gohshengyang/Documents/GitHub/zeusapi-web/src/pages/client/CreateClient.tsx"],"names":["React","FillForm","FormLabel","Button","ChakraButton","Text","MinusCircleOutlined","PlusOutlined","Form","Input","message","Space","ClientRepo","LocalStorage","CreateClient","form","useForm","clientRepo","children","required","width","fields","add","remove","map","key","name","restField","display","marginBottom","onSubmit","values","userId","getUserID","console","log","apiResult","saveClient","createdById","attribute","isSuccess","success","error"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { FillForm } from \"../../utils/components\";\nimport { FormLabel, Button as ChakraButton, Text } from \"@chakra-ui/react\";\nimport { MinusCircleOutlined, PlusOutlined } from \"@ant-design/icons\";\nimport { Form, Input, message, Space } from \"antd\";\nimport { ClientRepo } from \"../../services/api/repositories/client_repo\";\nimport { LocalStorage } from \"../../utils/localStorage\";\n\nexport const CreateClient: React.FC<any> = () => {\n\tconst [form] = Form.useForm();\n\tconst clientRepo = new ClientRepo();\n\tconst children = (\n\t\t<>\n\t\t\t<FormLabel>Name</FormLabel>\n\t\t\t<Form.Item\n\t\t\t\tname=\"name\"\n\t\t\t\trules={[\n\t\t\t\t\t{\n\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\tmessage: \"Please input the Client's name\",\n\t\t\t\t\t},\n\t\t\t\t]}\n\t\t\t>\n\t\t\t\t<Input placeholder=\"Name\" style={{ width: \"50%\" }} />\n\t\t\t</Form.Item>\n\t\t\t<>\n\t\t\t\t<FormLabel>Attribute</FormLabel>\n\t\t\t\t<Form.List name=\"attribute\">\n\t\t\t\t\t{(fields, { add, remove }) => (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t{fields.map(({ key, name, ...restField }) => (\n\t\t\t\t\t\t\t\t<Space\n\t\t\t\t\t\t\t\t\tkey={key}\n\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\tdisplay: \"flex\",\n\t\t\t\t\t\t\t\t\t\tmarginBottom: 8,\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\talign=\"baseline\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Form.Item\n\t\t\t\t\t\t\t\t\t\t{...restField}\n\t\t\t\t\t\t\t\t\t\tname={[name, \"key\"]}\n\t\t\t\t\t\t\t\t\t\trules={[\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\t\t\t\t\t\t\tmessage:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"Missing attribute key\",\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<Input placeholder=\"Attribute Value\" />\n\t\t\t\t\t\t\t\t\t</Form.Item>\n\t\t\t\t\t\t\t\t\t<Form.Item\n\t\t\t\t\t\t\t\t\t\t{...restField}\n\t\t\t\t\t\t\t\t\t\tname={[name, \"value\"]}\n\t\t\t\t\t\t\t\t\t\trules={[\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\t\t\t\t\t\t\tmessage:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"Missing attribute value\",\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<Input placeholder=\"Attribute value\" />\n\t\t\t\t\t\t\t\t\t</Form.Item>\n\t\t\t\t\t\t\t\t\t<MinusCircleOutlined\n\t\t\t\t\t\t\t\t\t\tonClick={() => remove(name)}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</Space>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t<Form.Item>\n\t\t\t\t\t\t\t\t<ChakraButton\n\t\t\t\t\t\t\t\t\tvariant=\"outline\"\n\t\t\t\t\t\t\t\t\tonClick={() => add()}\n\t\t\t\t\t\t\t\t\tleftIcon={<PlusOutlined color=\"blue.400\" />}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Text color=\"blue.400\">Add Attribute</Text>\n\t\t\t\t\t\t\t\t</ChakraButton>\n\t\t\t\t\t\t\t</Form.Item>\n\t\t\t\t\t\t</>\n\t\t\t\t\t)}\n\t\t\t\t</Form.List>\n\t\t\t</>\n\t\t</>\n\t);\n\n\tconst onSubmit = async (values: any) => {\n\t\tlet userId = await LocalStorage.getUserID();\n\t\tconsole.log(values['attribute'])\n\t\tlet apiResult = await clientRepo.saveClient({\n\t\t\tcreatedById: userId ?? \"\",\n\t\t\tname: values[\"name\"],\n\t\t\tattribute: values[\"attribute\"],\n\t\t});\n\t\tif (apiResult.isSuccess) {\n\t\t\tmessage.success(\"Client has created\");\n\t\t} else {\n\t\t\tmessage.error(\"Fail to save\");\n\t\t}\n\t};\n\n\treturn (\n\t\t<FillForm\n\t\t\tformComponents={children}\n\t\t\ttitle={\"Client's Profile\"}\n\t\t\tsubtitle={\"Please fill in the client's name and attributes\"}\n\t\t\tinitialValue={[]}\n\t\t\tform={form}\n\t\t\tonSubmit={onSubmit}\n\t\t>\n\t\t\t{\" \"}\n\t\t</FillForm>\n\t);\n};\n"]},"metadata":{},"sourceType":"module"}