{"ast":null,"code":"import { LocalStorage } from \"../../../utils/localStorage\";\nimport { Networking } from \"../../networking\";\nimport { Response } from \"../../response\";\nimport { Client, GetClientResponse } from \"../models/client_model\";\nexport class ClientRepo {\n  constructor() {\n    this.networking = new Networking();\n  }\n\n  async getAllClients(value) {\n    const path = `userId=${value === null || value === void 0 ? void 0 : value.userId}`;\n    let headers = {\n      Authorization: `Bearer ${await LocalStorage.getAccessToken()}`\n    };\n    let response = await this.networking.getData(`get_all_client_by_createdby_id?${path}`, headers); // If data is retrieved and the data is not empty, then return\n\n    if (response.isSuccess && response.data !== null && response.data !== \"\") {\n      let getClientResponse = new GetClientResponse().fromJson(response.data);\n      return new Response(true, response.message, getClientResponse); // If data is retrieved and the data is empty, then return\n    } else if (response.isSuccess && response.message === \"No records found\") {\n      return new Response(true, \"No records found\", \"\"); // If http method is timeout or being halt, then return\n    } else if (!response.isSuccess) {\n      return new Response(false, response.message, \"\");\n    } else {\n      return new Response(false, response.message, response.data);\n    }\n  }\n\n  async saveClient(props) {\n    // Initialize the save user model\n    const saveClient = new Client({\n      createdById: props.createdById,\n      clientId: props.clientId,\n      name: props.name,\n      attribute: props.attribute\n    }); // Object to Map, then to JSON\n\n    const body = Object.fromEntries(saveClient.toJson());\n    let headers = {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${await LocalStorage.getAccessToken()}`\n    };\n    let response = await this.networking.postData(\"save_client\", // API choice is depends on the usage\n    body, headers); // If data is retrieved and the data is not empty, then return\n\n    if (response.isSuccess && response.data !== null && response.data !== \"\") {\n      return new Response(true, response.message, response.data); // If data is retrieved and the data is empty, then return\n    } else if (response.isSuccess && response.message === \"No records found\") {\n      return new Response(true, \"No records found\", \"\"); // If http method is timeout or being halt, then return\n    } else if (!response.isSuccess) {\n      return new Response(false, response.message, \"\");\n    } else {\n      return new Response(false, response.message, response.data);\n    }\n  }\n\n  async deleteClient(props) {\n    // Initialize the save user model\n    const delete_url = new Client({\n      clientId: props.clientId\n    }); // Object to Map, then to JSON\n\n    const body = Object.fromEntries(delete_url.toJson());\n    let headers = {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${await LocalStorage.getAccessToken()}`\n    };\n    let response = await this.networking.deleteData(\"delete_client\", // API choice is depends on the usage\n    body, headers); // If data is retrieved and the data is not empty, then return\n\n    if (response.isSuccess && response.data !== null && response.data !== \"\") {\n      return new Response(true, response.message, response.data); // If data is retrieved and the data is empty, then return\n    } else if (response.isSuccess && response.message === \"No records found\") {\n      return new Response(true, \"No records found\", \"\"); // If http method is timeout or being halt, then return\n    } else if (!response.isSuccess) {\n      return new Response(false, response.message, \"\");\n    } else {\n      return new Response(false, response.message, response.data);\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/gohshengyang/Documents/GitHub/zeusapi-web/src/services/api/repositories/client_repo.tsx"],"names":["LocalStorage","Networking","Response","Client","GetClientResponse","ClientRepo","networking","getAllClients","value","path","userId","headers","Authorization","getAccessToken","response","getData","isSuccess","data","getClientResponse","fromJson","message","saveClient","props","createdById","clientId","name","attribute","body","Object","fromEntries","toJson","postData","deleteClient","delete_url","deleteData"],"mappings":"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","sourcesContent":["import { LocalStorage } from \"../../../utils/localStorage\";\nimport { Networking } from \"../../networking\";\nimport { Response } from \"../../response\";\nimport { Client, GetClientResponse } from \"../models/client_model\";\n\nexport class ClientRepo {\n\tnetworking = new Networking();\n\n\tasync getAllClients(value?: { userId: string }): Promise<Response> {\n\t\tconst path = `userId=${value?.userId}`;\n\t\tlet headers = {\n\t\t\tAuthorization: `Bearer ${await LocalStorage.getAccessToken()}`,\n\t\t};\n\t\tlet response = await this.networking.getData(\n\t\t\t`get_all_client_by_createdby_id?${path}`,\n\t\t\theaders\n\t\t);\n\t\t// If data is retrieved and the data is not empty, then return\n\t\tif (\n\t\t\tresponse.isSuccess &&\n\t\t\tresponse.data !== null &&\n\t\t\tresponse.data !== \"\"\n\t\t) {\n\t\t\tlet getClientResponse = new GetClientResponse().fromJson(\n\t\t\t\tresponse.data\n\t\t\t);\n\t\t\treturn new Response(true, response.message, getClientResponse);\n\n\t\t\t// If data is retrieved and the data is empty, then return\n\t\t} else if (\n\t\t\tresponse.isSuccess &&\n\t\t\tresponse.message === \"No records found\"\n\t\t) {\n\t\t\treturn new Response(true, \"No records found\", \"\");\n\n\t\t\t// If http method is timeout or being halt, then return\n\t\t} else if (!response.isSuccess) {\n\t\t\treturn new Response(false, response.message, \"\");\n\t\t} else {\n\t\t\treturn new Response(false, response.message, response.data);\n\t\t}\n\t}\n\n\tasync saveClient(props: {\n\t\tcreatedById?:string;\n\t\tclientId?: string;\n\t\tname?: string;\n\t\tattribute?: Array<any>;\n\t}): Promise<Response> {\n\t\t// Initialize the save user model\n\t\tconst saveClient = new Client({\n\t\t\tcreatedById: props.createdById,\n\t\t\tclientId: props.clientId,\n\t\t\tname: props.name,\n\t\t\tattribute: props.attribute,\n\t\t});\n\n\t\t// Object to Map, then to JSON\n\t\tconst body = Object.fromEntries(saveClient.toJson());\n\n\t\tlet headers = {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tAuthorization: `Bearer ${await LocalStorage.getAccessToken()}`,\n\t\t};\n\n\t\tlet response = await this.networking.postData(\n\t\t\t\"save_client\", // API choice is depends on the usage\n\t\t\tbody,\n\t\t\theaders\n\t\t);\n\n\t\t// If data is retrieved and the data is not empty, then return\n\t\tif (\n\t\t\tresponse.isSuccess &&\n\t\t\tresponse.data !== null &&\n\t\t\tresponse.data !== \"\"\n\t\t) {\n\t\t\treturn new Response(true, response.message, response.data);\n\n\t\t\t// If data is retrieved and the data is empty, then return\n\t\t} else if (\n\t\t\tresponse.isSuccess &&\n\t\t\tresponse.message === \"No records found\"\n\t\t) {\n\t\t\treturn new Response(true, \"No records found\", \"\");\n\n\t\t\t// If http method is timeout or being halt, then return\n\t\t} else if (!response.isSuccess) {\n\t\t\treturn new Response(false, response.message, \"\");\n\t\t} else {\n\t\t\treturn new Response(false, response.message, response.data);\n\t\t}\n\t}\n\n    async deleteClient(props: { clientId?: string }): Promise<Response> {\n\t\t// Initialize the save user model\n\t\tconst delete_url = new Client({\n\t\t\tclientId: props.clientId,\n\t\t});\n\n\t\t// Object to Map, then to JSON\n\t\tconst body = Object.fromEntries(delete_url.toJson());\n\n        let headers = {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tAuthorization: `Bearer ${await LocalStorage.getAccessToken()}`,\n\t\t};\n\n\n\t\tlet response = await this.networking.deleteData(\n\t\t\t\"delete_client\", // API choice is depends on the usage\n\t\t\tbody,\n            headers\n\t\t);\n\n\t\t// If data is retrieved and the data is not empty, then return\n\t\tif (\n\t\t\tresponse.isSuccess &&\n\t\t\tresponse.data !== null &&\n\t\t\tresponse.data !== \"\"\n\t\t) {\n\t\t\treturn new Response(true, response.message, response.data);\n\n\t\t\t// If data is retrieved and the data is empty, then return\n\t\t} else if (\n\t\t\tresponse.isSuccess &&\n\t\t\tresponse.message === \"No records found\"\n\t\t) {\n\t\t\treturn new Response(true, \"No records found\", \"\");\n\n\t\t\t// If http method is timeout or being halt, then return\n\t\t} else if (!response.isSuccess) {\n\t\t\treturn new Response(false, response.message, \"\");\n\t\t} else {\n\t\t\treturn new Response(false, response.message, response.data);\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}