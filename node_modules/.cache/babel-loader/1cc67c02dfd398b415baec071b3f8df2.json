{"ast":null,"code":"import { Networking } from \"../../networking\";\nimport { Ticket } from \"../models/support_model\";\nimport { Response } from \"../../response\";\nexport class SupportRepo {\n  constructor() {\n    this.networking = new Networking();\n  }\n\n  async saveTicket(props) {\n    // Initialize the save user model\n    const saveTicket = new Ticket(props.ticketId, props.userId, props.name, props.email, props.ticketType, props.issueDesc); // Object to Map, then to JSON\n\n    const body = Object.fromEntries(saveTicket.toJson());\n    let headers = {\n      \"Content-Type\": \"application/json\"\n    };\n    let response = await this.networking.postData(\"save_ticket\", // API choice is depends on the usage\n    body, headers); // If data is retrieved and the data is not empty, then return\n\n    if (response.isSuccess && response.data !== null && response.data !== \"\") {\n      return new Response(true, response.message, response.data); // If data is retrieved and the data is empty, then return\n    } else if (response.isSuccess && response.message === \"No records found\") {\n      return new Response(true, \"No records found\", \"\"); // If http method is timeout or being halt, then return\n    } else if (!response.isSuccess) {\n      return new Response(false, response.message, \"\");\n    } else {\n      return new Response(false, response.message, response.data);\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/gohshengyang/Documents/GitHub/codagence-web/src/services/api/repositories/support_repo.tsx"],"names":["Networking","Ticket","Response","SupportRepo","networking","saveTicket","props","ticketId","userId","name","email","ticketType","issueDesc","body","Object","fromEntries","toJson","headers","response","postData","isSuccess","data","message"],"mappings":"AAAA,SAASA,UAAT,QAA2B,kBAA3B;AACA,SAASC,MAAT,QAAuB,yBAAvB;AACA,SAASC,QAAT,QAAyB,gBAAzB;AAEA,OAAO,MAAMC,WAAN,CAAkB;AAAA;AAAA,SACrBC,UADqB,GACR,IAAIJ,UAAJ,EADQ;AAAA;;AAGL,QAAVK,UAAU,CAACC,KAAD,EAOM;AAClB;AACA,UAAMD,UAAU,GAAG,IAAIJ,MAAJ,CACfK,KAAK,CAACC,QADS,EAEfD,KAAK,CAACE,MAFS,EAGfF,KAAK,CAACG,IAHS,EAIfH,KAAK,CAACI,KAJS,EAKfJ,KAAK,CAACK,UALS,EAMfL,KAAK,CAACM,SANS,CAAnB,CAFkB,CAWlB;;AACA,UAAMC,IAAI,GAAGC,MAAM,CAACC,WAAP,CAAmBV,UAAU,CAACW,MAAX,EAAnB,CAAb;AAEA,QAAIC,OAAO,GAAG;AACV,sBAAgB;AADN,KAAd;AAIA,QAAIC,QAAQ,GAAG,MAAM,KAAKd,UAAL,CAAgBe,QAAhB,CACjB,aADiB,EACF;AACfN,IAAAA,IAFiB,EAGjBI,OAHiB,CAArB,CAlBkB,CAwBlB;;AACA,QACIC,QAAQ,CAACE,SAAT,IACAF,QAAQ,CAACG,IAAT,KAAkB,IADlB,IAEAH,QAAQ,CAACG,IAAT,KAAkB,EAHtB,EAIE;AACE,aAAO,IAAInB,QAAJ,CAAa,IAAb,EAAmBgB,QAAQ,CAACI,OAA5B,EAAqCJ,QAAQ,CAACG,IAA9C,CAAP,CADF,CAGE;AACH,KARD,MAQO,IACHH,QAAQ,CAACE,SAAT,IACAF,QAAQ,CAACI,OAAT,KAAqB,kBAFlB,EAGL;AACE,aAAO,IAAIpB,QAAJ,CAAa,IAAb,EAAmB,kBAAnB,EAAuC,EAAvC,CAAP,CADF,CAGE;AACH,KAPM,MAOA,IAAI,CAACgB,QAAQ,CAACE,SAAd,EAAyB;AAC5B,aAAO,IAAIlB,QAAJ,CAAa,KAAb,EAAoBgB,QAAQ,CAACI,OAA7B,EAAsC,EAAtC,CAAP;AACH,KAFM,MAEA;AACH,aAAO,IAAIpB,QAAJ,CAAa,KAAb,EAAoBgB,QAAQ,CAACI,OAA7B,EAAsCJ,QAAQ,CAACG,IAA/C,CAAP;AACH;AACJ;;AAvDoB","sourcesContent":["import { Networking } from \"../../networking\";\nimport { Ticket } from \"../models/support_model\";\nimport { Response } from \"../../response\";\n\nexport class SupportRepo {\n    networking = new Networking();\n\n    async saveTicket(props:{\n        userId?: string,\n        name?: string,\n        email?: string,\n        ticketType?: string,\n        issueDesc?: string,\n        ticketId?: string\n    }): Promise<Response> {\n        // Initialize the save user model\n        const saveTicket = new Ticket(\n            props.ticketId,\n            props.userId,\n            props.name,\n            props.email,\n            props.ticketType,\n            props.issueDesc\n        );\n\n        // Object to Map, then to JSON\n        const body = Object.fromEntries(saveTicket.toJson());\n\n        let headers = {\n            \"Content-Type\": \"application/json\",\n        };\n\n        let response = await this.networking.postData(\n            \"save_ticket\", // API choice is depends on the usage\n            body,\n            headers\n        );\n\n        // If data is retrieved and the data is not empty, then return\n        if (\n            response.isSuccess &&\n            response.data !== null &&\n            response.data !== \"\"\n        ) {\n            return new Response(true, response.message, response.data);\n\n            // If data is retrieved and the data is empty, then return\n        } else if (\n            response.isSuccess &&\n            response.message === \"No records found\"\n        ) {\n            return new Response(true, \"No records found\", \"\");\n\n            // If http method is timeout or being halt, then return\n        } else if (!response.isSuccess) {\n            return new Response(false, response.message, \"\");\n        } else {\n            return new Response(false, response.message, response.data);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}