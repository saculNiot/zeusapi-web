{"ast":null,"code":"import { GetRelationshipResponse } from \"./relationship_model\";\nexport class Role {\n  constructor(props) {\n    this.roleId = void 0;\n    this.name = void 0;\n    this.createdDateTime = void 0;\n    this.createdById = void 0;\n    this.clients = void 0;\n    this.roleId = props.roleId;\n    this.name = props.name;\n    this.createdById = props.createdById;\n    this.createdDateTime = props.createdDateTime;\n    this.clients = props.clients;\n  } // Convert the map into the User object\n\n\n  fromJson(json) {\n    this.roleId = json.get(\"role_id\");\n    this.name = json.get(\"name\");\n    this.createdById = json.get(\"created_by_id\");\n    this.createdDateTime = json.get(\"created_date_time\");\n    let clientMap = new Map().set(\"Relationship\", json.get(\"relationship\"));\n    this.clients = new GetRelationshipResponse().fromJson(clientMap);\n    return this;\n  } // Convert User Object into map\n\n\n  toJson() {\n    let data = new Map();\n    data.set(\"roleId\", this.roleId);\n    data.set(\"name\", this.name);\n    data.set(\"createdById\", this.createdById);\n    data.set(\"createdDateTime\", this.createdDateTime);\n    return data;\n  }\n\n}\nexport class GetRoleResponse {\n  constructor(client) {\n    this.role = void 0;\n    this.role = client;\n  } // Convert JSON (containing list of data) to array\n\n\n  fromJson(json) {\n    if (json.get(\"Role\") != null) {\n      this.role = [];\n      json.get(\"Role\").forEach(v => {\n        var _this$role;\n\n        (_this$role = this.role) === null || _this$role === void 0 ? void 0 : _this$role.push(new Role({}).fromJson(new Map(Object.entries(v))));\n      });\n    }\n\n    return this.role;\n  }\n\n}\nexport class RoleAttribute {\n  constructor(props) {\n    this.attributeId = void 0;\n    this.key = void 0;\n    this.value = void 0;\n    this.attributeId = props.attributeId;\n    this.key = props.key;\n    this.value = props.value;\n  } // Convert the map into the User object\n\n\n  fromJson(json) {\n    this.attributeId = json.get(\"role_attr_id\");\n    this.key = json.get(\"key\");\n    this.value = json.get(\"value\");\n    return this;\n  } // Convert User Object into map\n\n\n  toJson() {\n    let data = new Map();\n    data.set(\"client_attr_id\", this.attributeId);\n    data.set(\"key\", this.key);\n    data.set(\"value\", this.value);\n    return data;\n  }\n\n}\nexport class GetRoleAttributeResponse {\n  constructor(attribute) {\n    this.attribute = void 0;\n    this.attribute = attribute;\n  } // Convert JSON (containing list of data) to array\n\n\n  fromJson(json) {\n    if (json.get(\"attribute\") != null) {\n      this.attribute = [];\n      json.get(\"attribute\").forEach(v => {\n        var _this$attribute;\n\n        (_this$attribute = this.attribute) === null || _this$attribute === void 0 ? void 0 : _this$attribute.push(new RoleAttribute({}).fromJson(new Map(Object.entries(v))));\n      });\n    }\n\n    return this.attribute;\n  }\n\n}","map":{"version":3,"sources":["/Users/gohshengyang/Documents/GitHub/zeusapi-web/src/services/api/models/role_model.tsx"],"names":["GetRelationshipResponse","Role","constructor","props","roleId","name","createdDateTime","createdById","clients","fromJson","json","get","clientMap","Map","set","toJson","data","GetRoleResponse","client","role","forEach","v","push","Object","entries","RoleAttribute","attributeId","key","value","GetRoleAttributeResponse","attribute"],"mappings":"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","sourcesContent":["import { Client, GetClientResponse } from \"./client_model\";\nimport { GetRelationshipResponse } from \"./relationship_model\";\n\nexport class Role {\n\troleId?: string;\n\tname?: string;\n\tcreatedDateTime?: string;\n\tcreatedById?: string;\n\tclients?: Array<Client>;\n\n\tconstructor(props: {\n\t\troleId?: string;\n\t\tname?: string;\n\t\tcreatedDateTime?: string;\n\t\tcreatedById?: string;\n\t\tclients?: Array<Client>;\n\t}) {\n\t\tthis.roleId = props.roleId;\n\t\tthis.name = props.name;\n\t\tthis.createdById = props.createdById;\n\t\tthis.createdDateTime = props.createdDateTime;\n\t\tthis.clients = props.clients;\n\t}\n\n\t// Convert the map into the User object\n\tfromJson(json: Map<String, any>) {\n\t\tthis.roleId = json.get(\"role_id\");\n\t\tthis.name = json.get(\"name\");\n\t\tthis.createdById = json.get(\"created_by_id\");\n\t\tthis.createdDateTime = json.get(\"created_date_time\");\n\t\tlet clientMap = new Map<String, any>().set(\n\t\t\t\"Relationship\",\n\t\t\tjson.get(\"relationship\")\n\t\t);\n\n\t\tthis.clients = new GetRelationshipResponse().fromJson(clientMap);\n\n\t\treturn this;\n\t}\n\n\t// Convert User Object into map\n\ttoJson() {\n\t\tlet data = new Map<String, any>();\n\t\tdata.set(\"roleId\", this.roleId);\n\t\tdata.set(\"name\", this.name);\n\t\tdata.set(\"createdById\", this.createdById);\n\t\tdata.set(\"createdDateTime\", this.createdDateTime);\n\n\t\treturn data;\n\t}\n}\n\n\nexport class GetRoleResponse {\n\trole?: Array<Role>;\n\n\tconstructor(client?: Array<Role>) {\n\t\tthis.role = client;\n\t}\n\n\t// Convert JSON (containing list of data) to array\n\tfromJson(json: Map<String, any>) {\n\t\tif (json.get(\"Role\") != null) {\n\t\t\tthis.role = [];\n\t\t\tjson.get(\"Role\").forEach((v: Map<String, any>) => {\n\t\t\t\tthis.role?.push(\n\t\t\t\t\tnew Role({}).fromJson(new Map(Object.entries(v)))\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\n\t\treturn this.role;\n\t}\n}\n\nexport class RoleAttribute {\n\tattributeId?: string;\n\tkey?: string;\n\tvalue?: string;\n\n\tconstructor(props: { attributeId?: string; key?: string; value?: string }) {\n\t\tthis.attributeId = props.attributeId;\n\t\tthis.key = props.key;\n\t\tthis.value = props.value;\n\t}\n\n\t// Convert the map into the User object\n\tfromJson(json: Map<String, any>) {\n\t\tthis.attributeId = json.get(\"role_attr_id\");\n\t\tthis.key = json.get(\"key\");\n\t\tthis.value = json.get(\"value\");\n\n\t\treturn this;\n\t}\n\n\t// Convert User Object into map\n\ttoJson() {\n\t\tlet data = new Map<String, any>();\n\t\tdata.set(\"client_attr_id\", this.attributeId);\n\t\tdata.set(\"key\", this.key);\n\t\tdata.set(\"value\", this.value);\n\n\t\treturn data;\n\t}\n}\n\nexport class GetRoleAttributeResponse {\n\tattribute?: Array<RoleAttribute>;\n\n\tconstructor(attribute?: Array<RoleAttribute>) {\n\t\tthis.attribute = attribute;\n\t}\n\n\t// Convert JSON (containing list of data) to array\n\tfromJson(json: Map<String, any>) {\n\t\tif (json.get(\"attribute\") != null) {\n\t\t\tthis.attribute = [];\n\t\t\tjson.get(\"attribute\").forEach((v: Map<String, any>) => {\n\t\t\t\tthis.attribute?.push(\n\t\t\t\t\tnew RoleAttribute({}).fromJson(new Map(Object.entries(v)))\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\n\t\treturn this.attribute;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}