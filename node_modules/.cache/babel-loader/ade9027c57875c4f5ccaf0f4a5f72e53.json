{"ast":null,"code":"import { Networking } from \"../../networking\";\nimport { File } from \"../models/file_model\";\nimport { ReportRepo } from \"./report_repo\";\nexport class FileRepo {\n  constructor(userId) {\n    this.networking = new Networking();\n    this.userId = void 0;\n    this.userId = userId;\n  }\n\n  async createFile(filename, folderID) {\n    let response = await this.networking.postData(`file/create_in/${folderID}`, {\n      filename: filename,\n      created_by: this.userId\n    }, {\n      \"Content-Type\": \"application/json\"\n    });\n    return response;\n  }\n\n  async getUserFiles() {\n    let response = await this.networking.getData(`file/get_all_by_user/${this.userId}`);\n\n    if (response.isSuccess) {\n      let data = response.data;\n      let files = data.map(x => File.fromJson(x));\n\n      for (var x of files) {\n        x.preview = await ReportRepo.getReportPreview(x.fileId);\n      }\n\n      return files;\n    }\n\n    return [];\n  }\n\n  static async getFile(fileID) {\n    let response = await new Networking().getData(`file/get_by_id/${fileID}`);\n\n    if (response.isSuccess) {\n      return File.fromJson(response.data);\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/gohshengyang/Documents/GitHub/codagence-web/src/services/api/repositories/file_repo.tsx"],"names":["Networking","File","ReportRepo","FileRepo","constructor","userId","networking","createFile","filename","folderID","response","postData","created_by","getUserFiles","getData","isSuccess","data","files","map","x","fromJson","preview","getReportPreview","fileId","getFile","fileID"],"mappings":"AAAA,SAASA,UAAT,QAA2B,kBAA3B;AAEA,SAASC,IAAT,QAAqB,sBAArB;AACA,SAASC,UAAT,QAA2B,eAA3B;AAEA,OAAO,MAAMC,QAAN,CAAe;AAIpBC,EAAAA,WAAW,CAACC,MAAD,EAAiB;AAAA,SAHpBC,UAGoB,GAHP,IAAIN,UAAJ,EAGO;AAAA,SAFnBK,MAEmB;AAC1B,SAAKA,MAAL,GAAcA,MAAd;AACD;;AAEe,QAAVE,UAAU,CAACC,QAAD,EAAmBC,QAAnB,EAAwD;AACtE,QAAIC,QAAQ,GAAG,MAAM,KAAKJ,UAAL,CAAgBK,QAAhB,CAClB,kBAAiBF,QAAS,EADR,EAEnB;AACED,MAAAA,QAAQ,EAAEA,QADZ;AAEEI,MAAAA,UAAU,EAAE,KAAKP;AAFnB,KAFmB,EAMnB;AAAE,sBAAgB;AAAlB,KANmB,CAArB;AASA,WAAOK,QAAP;AACD;;AAEiB,QAAZG,YAAY,GAAoB;AACpC,QAAIH,QAAQ,GAAG,MAAM,KAAKJ,UAAL,CAAgBQ,OAAhB,CAClB,wBAAuB,KAAKT,MAAO,EADjB,CAArB;;AAIA,QAAIK,QAAQ,CAACK,SAAb,EAAwB;AACtB,UAAIC,IAA6B,GAAGN,QAAQ,CAACM,IAA7C;AAEA,UAAIC,KAAa,GAAGD,IAAI,CAACE,GAAL,CAAUC,CAAD,IAAOlB,IAAI,CAACmB,QAAL,CAAcD,CAAd,CAAhB,CAApB;;AAEA,WAAK,IAAIA,CAAT,IAAcF,KAAd,EAAqB;AACnBE,QAAAA,CAAC,CAACE,OAAF,GAAY,MAAMnB,UAAU,CAACoB,gBAAX,CAA4BH,CAAC,CAACI,MAA9B,CAAlB;AACD;;AAED,aAAON,KAAP;AACD;;AAED,WAAO,EAAP;AACD;;AAEmB,eAAPO,OAAO,CAACC,MAAD,EAA4C;AAC9D,QAAIf,QAAQ,GAAG,MAAM,IAAIV,UAAJ,GAAiBc,OAAjB,CAA0B,kBAAiBW,MAAO,EAAlD,CAArB;;AAEA,QAAIf,QAAQ,CAACK,SAAb,EAAwB;AACtB,aAAOd,IAAI,CAACmB,QAAL,CAAcV,QAAQ,CAACM,IAAvB,CAAP;AACD;AACF;;AA/CmB","sourcesContent":["import { Networking } from \"../../networking\";\nimport { Response } from \"../../response\";\nimport { File } from \"../models/file_model\";\nimport { ReportRepo } from \"./report_repo\";\n\nexport class FileRepo {\n  private networking = new Networking();\n  readonly userId: string;\n\n  constructor(userId: string) {\n    this.userId = userId;\n  }\n\n  async createFile(filename: string, folderID: string): Promise<Response> {\n    let response = await this.networking.postData(\n      `file/create_in/${folderID}`,\n      {\n        filename: filename,\n        created_by: this.userId,\n      },\n      { \"Content-Type\": \"application/json\" }\n    );\n\n    return response;\n  }\n\n  async getUserFiles(): Promise<File[]> {\n    let response = await this.networking.getData(\n      `file/get_all_by_user/${this.userId}`\n    );\n\n    if (response.isSuccess) {\n      let data: Array<Map<String, any>> = response.data;\n\n      let files: File[] = data.map((x) => File.fromJson(x));\n\n      for (var x of files) {\n        x.preview = await ReportRepo.getReportPreview(x.fileId);\n      }\n\n      return files;\n    }\n\n    return [];\n  }\n\n  static async getFile(fileID: string): Promise<File | undefined> {\n    let response = await new Networking().getData(`file/get_by_id/${fileID}`);\n\n    if (response.isSuccess) {\n      return File.fromJson(response.data);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}