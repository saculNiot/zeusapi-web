{"ast":null,"code":"var _jsxFileName = \"/Users/gohshengyang/Documents/GitHub/codagence-web/src/pages/sider/PageSider.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Layout, Typography, Select, Divider, Button, Input, Form, Row, Col, Spin } from \"antd\";\nimport \"./PageSider.less\";\nimport { UrlRepo } from \"../../services/api/repositories/url_repo\";\nimport { MinusCircleOutlined, PlusOutlined } from \"@ant-design/icons\";\nimport mixpanel from \"mixpanel-browser\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Sider\n} = Layout;\nconst {\n  Title,\n  Text\n} = Typography;\nconst {\n  Option\n} = Select;\nexport const PageSider = ({\n  siderVisibility,\n  setGraphValues,\n  graphValues,\n  selectedGraph,\n  schemaField,\n  apiKey,\n  userApiId\n}) => {\n  _s();\n\n  var _selectedGraph$dimens;\n\n  // Set dimensions\n  const [dimensionValues, setDimensionValues] = useState(); // Set metrics\n\n  const [metricsValues, setMetricsValues] = useState();\n  const [isLoading, setLoading] = useState(false);\n  let urlRepo = new UrlRepo();\n  const [form] = Form.useForm();\n\n  async function onFinish(values) {\n    setLoading(true);\n    mixpanel.track(\"Sider_Excecute_Generate_Data_Click\");\n    let apiResult = await urlRepo.generateDataResponse({\n      userApiId: userApiId,\n      apiKey: apiKey,\n      dimensionArray: values[\"dimensionValues\"],\n      metricsArray: values[\"metrics\"].map(item => {\n        return item.name;\n      }),\n      metricsOperation: values[\"metrics\"].map(item => {\n        switch (item.operation) {\n          case \"sum\":\n            item.operation = \"sum\";\n            break;\n\n          case \"cnt\":\n            item.operation = \"count\";\n            break;\n\n          case \"avg\":\n            item.operation = \"mean\";\n            break;\n\n          default:\n            break;\n        }\n\n        return item.operation;\n      })\n    });\n\n    if (apiResult.isSuccess) {\n      mixpanel.track(\"Sider_Excecute_Generate_Data_Click\", {\n        apiResult: apiResult.message\n      });\n      graphValues = graphValues.map(item => {\n        if (item.key === (selectedGraph === null || selectedGraph === void 0 ? void 0 : selectedGraph.key)) return { ...selectedGraph,\n          title: values[\"title\"],\n          dataSet: Object.entries(apiResult.data).length > 1 ? Object.entries(apiResult.data).slice(1).map((item, index) => {\n            return {\n              graph_type: values[\"metrics\"][index][\"graph_type\"],\n              label: item[0],\n              metrics: item[1]\n            };\n          }) : [],\n          dimension: [{\n            name: values[\"dimensionValues\"],\n            data: apiResult.data[Object.keys(apiResult.data)[0]]\n          }],\n          chosen_schema: values[\"metrics\"]\n        };\n        return item;\n      });\n      setGraphValues(graphValues);\n      setLoading(false);\n    } else {\n      mixpanel.track(\"Sider_Excecute_Generate_Data_Click\", {\n        apiResult: apiResult.message\n      });\n      setLoading(false);\n    }\n  }\n\n  useEffect(() => form.resetFields(), [selectedGraph]);\n  return /*#__PURE__*/_jsxDEV(Sider, {\n    className: \"page_sider\",\n    style: {\n      display: siderVisibility\n    },\n    width: \"330\",\n    theme: \"light\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: selectedGraph === undefined ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please select a graph\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 6\n      }, this) : /*#__PURE__*/_jsxDEV(Form, {\n        name: \"page_sider_form\",\n        className: \"page_sider_form\",\n        initialValues: {\n          title: selectedGraph.title,\n          metrics: selectedGraph.chosen_schema,\n          dimensionValues: (_selectedGraph$dimens = selectedGraph.dimension[0]) === null || _selectedGraph$dimens === void 0 ? void 0 : _selectedGraph$dimens.name\n        },\n        onFinish: onFinish,\n        form: form,\n        children: [/*#__PURE__*/_jsxDEV(Title, {\n          level: 5,\n          children: selectedGraph.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Title, {\n          level: 5,\n          children: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          name: \"title\",\n          rules: [{\n            required: true,\n            message: \"Missing Title\"\n          }],\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            className: \"input_bar\",\n            type: \"text\",\n            placeholder: \"Graph Label\",\n            name: \"label\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 8\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Title, {\n          level: 5,\n          children: \"Dimension\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          name: [\"dimensionValues\"],\n          rules: [{\n            required: true,\n            message: \"Missing Dimension\"\n          }],\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            className: \"selection_bar\",\n            placeholder: \"Select Dimension\",\n            optionFilterProp: \"children\",\n            children: schemaField.map((item, index) => {\n              return /*#__PURE__*/_jsxDEV(Option, {\n                value: item.name,\n                children: item.labelName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 228,\n                columnNumber: 11\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 8\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Title, {\n          level: 5,\n          children: \"Metrics\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Form.List, {\n          name: \"metrics\",\n          children: (fields, {\n            add,\n            remove\n          }) => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [fields.map(field => /*#__PURE__*/_jsxDEV(Row, {\n              children: [/*#__PURE__*/_jsxDEV(Col, {\n                span: 5,\n                className: \"param_col\",\n                children: /*#__PURE__*/_jsxDEV(Form.Item, { ...field,\n                  name: [field.name, \"operation\"],\n                  rules: [{\n                    required: true,\n                    message: \"Missing Operation\"\n                  }],\n                  children: /*#__PURE__*/_jsxDEV(Select, {\n                    className: \"selection_bar\",\n                    placeholder: \"Opt\",\n                    optionFilterProp: \"children\",\n                    children: [\"sum\", \"cnt\", \"avg\"].map((item, index) => {\n                      return /*#__PURE__*/_jsxDEV(Option, {\n                        value: item,\n                        name: item,\n                        children: item\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 270,\n                        columnNumber: 17\n                      }, this);\n                    })\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 259,\n                    columnNumber: 14\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 245,\n                  columnNumber: 13\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 244,\n                columnNumber: 12\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                span: 12,\n                className: \"param_col\",\n                children: /*#__PURE__*/_jsxDEV(Form.Item, { ...field,\n                  name: [field.name, \"name\"],\n                  rules: [{\n                    required: true,\n                    message: \"Missing Metrics\"\n                  }],\n                  children: /*#__PURE__*/_jsxDEV(Select, {\n                    className: \"selection_bar\",\n                    placeholder: \"Select Metrics\",\n                    optionFilterProp: \"children\",\n                    children: schemaField.map((item, index) => {\n                      return /*#__PURE__*/_jsxDEV(Option, {\n                        value: item.name,\n                        children: item.labelName\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 305,\n                        columnNumber: 18\n                      }, this);\n                    })\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 296,\n                    columnNumber: 14\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 285,\n                  columnNumber: 13\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 281,\n                columnNumber: 12\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                span: 5,\n                className: \"param_col\",\n                children: /*#__PURE__*/_jsxDEV(Form.Item, { ...field,\n                  name: [field.name, \"graph_type\"],\n                  rules: [{\n                    required: true,\n                    message: \"Missing Graph Type\"\n                  }],\n                  children: /*#__PURE__*/_jsxDEV(Select, {\n                    className: \"selection_bar\",\n                    placeholder: \"Graph Type\",\n                    optionFilterProp: \"children\",\n                    children: [\"bar\", \"line\", \"pie\"].map((item, index) => {\n                      return /*#__PURE__*/_jsxDEV(Option, {\n                        value: item,\n                        children: item\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 347,\n                        columnNumber: 17\n                      }, this);\n                    })\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 335,\n                    columnNumber: 14\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 321,\n                  columnNumber: 13\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 320,\n                columnNumber: 12\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                xl: 2,\n                span: 2,\n                className: \"param_col\",\n                children: /*#__PURE__*/_jsxDEV(MinusCircleOutlined, {\n                  onClick: () => remove(field.name)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 362,\n                  columnNumber: 13\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 357,\n                columnNumber: 12\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 243,\n              columnNumber: 11\n            }, this)), /*#__PURE__*/_jsxDEV(Form.Item, {\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                type: \"dashed\",\n                onClick: () => add(),\n                block: true,\n                icon: /*#__PURE__*/_jsxDEV(PlusOutlined, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 375,\n                  columnNumber: 18\n                }, this),\n                children: \"Add sights\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 371,\n                columnNumber: 11\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 370,\n              columnNumber: 10\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          children: /*#__PURE__*/_jsxDEV(Spin, {\n            spinning: isLoading,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              type: \"ghost\",\n              size: \"large\",\n              shape: \"round\",\n              className: \"preview_button\",\n              htmlType: \"submit\",\n              children: \"Update\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 389,\n              columnNumber: 9\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 388,\n            columnNumber: 8\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 6\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 3\n  }, this);\n};\n\n_s(PageSider, \"nmGfgQBNYnxtR+N8uZ8Q4Y6QldE=\", false, function () {\n  return [Form.useForm];\n});\n\n_c = PageSider;\n\nvar _c;\n\n$RefreshReg$(_c, \"PageSider\");","map":{"version":3,"sources":["/Users/gohshengyang/Documents/GitHub/codagence-web/src/pages/sider/PageSider.tsx"],"names":["React","useEffect","useState","Layout","Typography","Select","Divider","Button","Input","Form","Row","Col","Spin","UrlRepo","MinusCircleOutlined","PlusOutlined","mixpanel","Sider","Title","Text","Option","PageSider","siderVisibility","setGraphValues","graphValues","selectedGraph","schemaField","apiKey","userApiId","dimensionValues","setDimensionValues","metricsValues","setMetricsValues","isLoading","setLoading","urlRepo","form","useForm","onFinish","values","track","apiResult","generateDataResponse","dimensionArray","metricsArray","map","item","name","metricsOperation","operation","isSuccess","message","key","title","dataSet","Object","entries","data","length","slice","index","graph_type","label","metrics","dimension","keys","chosen_schema","resetFields","display","undefined","required","labelName","fields","add","remove","field"],"mappings":"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","sourcesContent":["import React, { ReactElement, useEffect, useState } from \"react\";\nimport {\n\tTabs,\n\tLayout,\n\tTypography,\n\tSelect,\n\tDivider,\n\tSpace,\n\tCard,\n\tButton,\n\tInput,\n\tmessage,\n\tForm,\n\tRow,\n\tCol,\n\tSpin,\n} from \"antd\";\nimport \"./PageSider.less\";\nimport { SizeType } from \"antd/lib/config-provider/SizeContext\";\n\nimport { Chart } from \"react-chartjs-2\";\nimport faker from \"@faker-js/faker\";\nimport { MyBar, DataProps } from \"../chartManager/BarChart\";\nimport { SchemaField } from \"../../services/api/models/url_model\";\nimport { UrlRepo } from \"../../services/api/repositories/url_repo\";\nimport { MinusCircleOutlined, PlusOutlined } from \"@ant-design/icons\";\nimport { Item } from \"rc-menu\";\nimport mixpanel from \"mixpanel-browser\";\nconst { Sider } = Layout;\n\nconst { Title, Text } = Typography;\nconst { Option } = Select;\n\ninterface PageSiderProps {\n\t// To allow functions in other page to handle the visibility of sider.\n\tsiderVisibility: string;\n\t// To allow the functions in this page to handle the visibility of sider.\n\ttoggleCollapsed: (visibility: string) => void;\n\t// Selected Graph Value state\n\tselectedGraph?: DataProps[\"data\"];\n\t// Callback of setting the graph value\n\tsetGraphValues: (data: Array<DataProps[\"data\"]>) => void;\n\t// Graph Values state\n\tgraphValues: Array<DataProps[\"data\"]>;\n\t// Data Rows\n\tdataRows: any;\n\tschemaField: Array<SchemaField>;\n\tapiKey: string;\n\tuserApiId: string;\n}\n\nexport const PageSider: React.FC<PageSiderProps> = ({\n\tsiderVisibility,\n\tsetGraphValues,\n\tgraphValues,\n\tselectedGraph,\n\tschemaField,\n\tapiKey,\n\tuserApiId,\n}) => {\n\t// Set dimensions\n\tconst [dimensionValues, setDimensionValues] = useState<Array<string>>();\n\t// Set metrics\n\tconst [metricsValues, setMetricsValues] = useState<Array<string>>();\n\n\tconst [isLoading, setLoading] = useState<boolean>(false);\n\n\tlet urlRepo = new UrlRepo();\n\n\tconst [form] = Form.useForm();\n\n\tasync function onFinish(values: any) {\n\t\tsetLoading(true);\n\t\tmixpanel.track(\"Sider_Excecute_Generate_Data_Click\");\n\n\t\tlet apiResult = await urlRepo.generateDataResponse({\n\t\t\tuserApiId: userApiId,\n\t\t\tapiKey: apiKey,\n\t\t\tdimensionArray: values[\"dimensionValues\"],\n\t\t\tmetricsArray: values[\"metrics\"].map(\n\t\t\t\t(item: {\n\t\t\t\t\tname: string;\n\t\t\t\t\toperation: string;\n\t\t\t\t\tgraph_type: string;\n\t\t\t\t}) => {\n\t\t\t\t\treturn item.name;\n\t\t\t\t}\n\t\t\t),\n\t\t\tmetricsOperation: values[\"metrics\"].map(\n\t\t\t\t(item: {\n\t\t\t\t\tname: string;\n\t\t\t\t\toperation: string;\n\t\t\t\t\tgraph_type: string;\n\t\t\t\t}) => {\n\t\t\t\t\tswitch (item.operation) {\n\t\t\t\t\t\tcase \"sum\":\n\t\t\t\t\t\t\titem.operation = \"sum\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"cnt\":\n\t\t\t\t\t\t\titem.operation = \"count\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"avg\":\n\t\t\t\t\t\t\titem.operation = \"mean\";\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\treturn item.operation;\n\t\t\t\t}\n\t\t\t),\n\t\t});\n\n\t\tif (apiResult.isSuccess) {\n\t\t\tmixpanel.track(\"Sider_Excecute_Generate_Data_Click\", {\n\t\t\t\tapiResult: apiResult.message,\n\t\t\t});\n\t\t\tgraphValues = graphValues.map((item) => {\n\t\t\t\tif (item.key === selectedGraph?.key)\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...selectedGraph,\n\t\t\t\t\t\ttitle: values[\"title\"],\n\t\t\t\t\t\tdataSet:\n\t\t\t\t\t\t\tObject.entries(apiResult.data).length > 1\n\t\t\t\t\t\t\t\t? Object.entries(apiResult.data)\n\t\t\t\t\t\t\t\t\t\t.slice(1)!\n\t\t\t\t\t\t\t\t\t\t.map((item: any, index) => {\n\t\t\t\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\t\t\t\tgraph_type:\n\t\t\t\t\t\t\t\t\t\t\t\t\tvalues[\"metrics\"][index][\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"graph_type\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\tlabel: item[0],\n\t\t\t\t\t\t\t\t\t\t\t\tmetrics: item[1],\n\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t: [],\n\t\t\t\t\t\tdimension: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: values[\"dimensionValues\"],\n\t\t\t\t\t\t\t\tdata: apiResult.data[\n\t\t\t\t\t\t\t\t\tObject.keys(apiResult.data)[0]\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t\tchosen_schema: values[\"metrics\"],\n\t\t\t\t\t};\n\n\t\t\t\treturn item;\n\t\t\t});\n\t\t\tsetGraphValues(graphValues);\n\t\t\tsetLoading(false);\n\t\t} else {\n\t\t\tmixpanel.track(\"Sider_Excecute_Generate_Data_Click\", {\n\t\t\t\tapiResult: apiResult.message,\n\t\t\t});\n\n\t\t\tsetLoading(false);\n\t\t}\n\t}\n\n\tuseEffect(() => form.resetFields(), [selectedGraph]);\n\n\treturn (\n\t\t<Sider\n\t\t\tclassName=\"page_sider\"\n\t\t\tstyle={{ display: siderVisibility }}\n\t\t\twidth=\"330\"\n\t\t\ttheme=\"light\"\n\t\t>\n\t\t\t<div>\n\t\t\t\t{selectedGraph === undefined ? (\n\t\t\t\t\t<p>Please select a graph</p>\n\t\t\t\t) : (\n\t\t\t\t\t<Form\n\t\t\t\t\t\tname=\"page_sider_form\"\n\t\t\t\t\t\tclassName=\"page_sider_form\"\n\t\t\t\t\t\tinitialValues={{\n\t\t\t\t\t\t\ttitle: selectedGraph.title,\n\t\t\t\t\t\t\tmetrics: selectedGraph.chosen_schema,\n\t\t\t\t\t\t\tdimensionValues: selectedGraph.dimension[0]?.name,\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonFinish={onFinish}\n\t\t\t\t\t\tform={form}\n\t\t\t\t\t>\n\t\t\t\t\t\t<Title level={5}>{selectedGraph.title}</Title>\n\n\t\t\t\t\t\t<Title level={5}>Title</Title>\n\n\t\t\t\t\t\t{/* Input title */}\n\t\t\t\t\t\t<Form.Item\n\t\t\t\t\t\t\tname=\"title\"\n\t\t\t\t\t\t\trules={[\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\t\t\t\tmessage: \"Missing Title\",\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\tclassName=\"input_bar\"\n\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\tplaceholder=\"Graph Label\"\n\t\t\t\t\t\t\t\tname=\"label\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Form.Item>\n\n\t\t\t\t\t\t<Divider />\n\n\t\t\t\t\t\t{/* Select X-axis */}\n\t\t\t\t\t\t<Title level={5}>Dimension</Title>\n\t\t\t\t\t\t<Form.Item\n\t\t\t\t\t\t\tname={[\"dimensionValues\"]}\n\t\t\t\t\t\t\trules={[\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\t\t\t\tmessage: \"Missing Dimension\",\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\t\tclassName=\"selection_bar\"\n\t\t\t\t\t\t\t\tplaceholder=\"Select Dimension\"\n\t\t\t\t\t\t\t\toptionFilterProp=\"children\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{schemaField.map((item, index) => {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<Option value={item.name!}>\n\t\t\t\t\t\t\t\t\t\t\t{item.labelName}\n\t\t\t\t\t\t\t\t\t\t</Option>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t</Select>\n\t\t\t\t\t\t</Form.Item>\n\t\t\t\t\t\t<Divider />\n\n\t\t\t\t\t\t{/* Select metrics */}\n\t\t\t\t\t\t<Title level={5}>Metrics</Title>\n\t\t\t\t\t\t<Form.List name=\"metrics\">\n\t\t\t\t\t\t\t{(fields, { add, remove }) => (\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t{fields.map((field) => (\n\t\t\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t\t\t<Col span={5} className=\"param_col\">\n\t\t\t\t\t\t\t\t\t\t\t\t<Form.Item\n\t\t\t\t\t\t\t\t\t\t\t\t\t{...field}\n\t\t\t\t\t\t\t\t\t\t\t\t\tname={[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfield.name,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"operation\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\t\t\t\t\t\trules={[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmessage:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Missing Operation\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"selection_bar\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Opt\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\toptionFilterProp=\"children\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"sum\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"cnt\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"avg\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t].map((item, index) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Option\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={item}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tname={item}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{item}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Option>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Select>\n\t\t\t\t\t\t\t\t\t\t\t\t</Form.Item>\n\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t<Col\n\t\t\t\t\t\t\t\t\t\t\t\tspan={12}\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"param_col\"\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t<Form.Item\n\t\t\t\t\t\t\t\t\t\t\t\t\t{...field}\n\t\t\t\t\t\t\t\t\t\t\t\t\tname={[field.name, \"name\"]}\n\t\t\t\t\t\t\t\t\t\t\t\t\trules={[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmessage:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Missing Metrics\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"selection_bar\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Select Metrics\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\toptionFilterProp=\"children\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{schemaField.map(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(item, index) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Option\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\titem.name!\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\titem.labelName\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Option>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Select>\n\t\t\t\t\t\t\t\t\t\t\t\t</Form.Item>\n\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t<Col span={5} className=\"param_col\">\n\t\t\t\t\t\t\t\t\t\t\t\t<Form.Item\n\t\t\t\t\t\t\t\t\t\t\t\t\t{...field}\n\t\t\t\t\t\t\t\t\t\t\t\t\tname={[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfield.name,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"graph_type\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\t\t\t\t\t\trules={[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmessage:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Missing Graph Type\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"selection_bar\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Graph Type\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\toptionFilterProp=\"children\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"bar\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"line\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"pie\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t].map((item, index) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Option\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={item}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{item}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Option>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Select>\n\t\t\t\t\t\t\t\t\t\t\t\t</Form.Item>\n\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t<Col\n\t\t\t\t\t\t\t\t\t\t\t\txl={2}\n\t\t\t\t\t\t\t\t\t\t\t\tspan={2}\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"param_col\"\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t<MinusCircleOutlined\n\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tremove(field.name)\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t<Form.Item>\n\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\ttype=\"dashed\"\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => add()}\n\t\t\t\t\t\t\t\t\t\t\tblock\n\t\t\t\t\t\t\t\t\t\t\ticon={<PlusOutlined />}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\tAdd sights\n\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t</Form.Item>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</Form.List>\n\n\t\t\t\t\t\t<Divider />\n\n\t\t\t\t\t\t{/* Generate graph button */}\n\t\t\t\t\t\t<Form.Item>\n\t\t\t\t\t\t\t<Spin spinning={isLoading}>\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\ttype=\"ghost\"\n\t\t\t\t\t\t\t\t\tsize=\"large\"\n\t\t\t\t\t\t\t\t\tshape=\"round\"\n\t\t\t\t\t\t\t\t\tclassName=\"preview_button\"\n\t\t\t\t\t\t\t\t\thtmlType=\"submit\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tUpdate\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</Spin>\n\t\t\t\t\t\t</Form.Item>\n\t\t\t\t\t</Form>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</Sider>\n\t);\n};\n"]},"metadata":{},"sourceType":"module"}