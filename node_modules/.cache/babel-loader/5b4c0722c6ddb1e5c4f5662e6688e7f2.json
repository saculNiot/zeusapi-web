{"ast":null,"code":"import axios from \"axios\";\nimport { Constants } from \"../utils/constants\";\nimport { Response } from \"./response\";\nexport class Networking {\n  constructor() {\n    this.url = Constants.urlLocal;\n    this.apiVer = Constants.apiver;\n  }\n\n  async getData(path) {\n    try {\n      if (this.url === \"\") {\n        this.url = Constants.urlCloud;\n      }\n\n      let response = await axios.get(`${this.url}/${this.apiVer}/${path}`);\n\n      if (response.status === 200) {\n        let e = response.data;\n        let data = e instanceof Array ? e.map(x => new Map(Object.entries(x))) : new Map(Object.entries(e));\n        return new Response(true, \"\", data);\n      } else if (response.status === 204) {\n        return new Response(true, \"No records found\", \"\");\n      } else {\n        return new Response(false, response.data, response.data);\n      }\n    } catch (error) {\n      if (axios.isAxiosError(error)) {\n        if (error.response) {\n          /*\n           * The request was made and the server responded with a\n           * status code that falls out of the range of 2xx\n           */\n          return new Response(false, error.response.data.toString(), error.response.data.toString());\n        } else if (error.request) {\n          /*\n           * The request was made but no response was received, `error.request`\n           * is an instance of XMLHttpRequest in the browser and an instance\n           * of http.ClientRequest in Node.js\n           */\n          return new Response(false, error.request.toString(), error.request.toString());\n        } else {\n          // Something happened in setting up the request and triggered an Error\n          return new Response(false, error.message.toString(), error.message.toString());\n        }\n      }\n\n      return new Response(false, \"error\", error);\n    }\n  }\n\n  async postData(api, body, headers) {\n    try {\n      if (this.url === \"\") {\n        this.url = Constants.urlCloud;\n      }\n\n      let response = await axios.post(`${this.url}/${this.apiVer}/${api}`, body, {\n        headers\n      });\n\n      if (response.status === 201 || response.status === 200) {\n        var regexFormat = /[{}]/gm; // If the data retrieved is JSON\n\n        if (regexFormat.test(JSON.stringify(response.data))) {\n          return new Response(true, \"\", new Map(Object.entries(response.data)));\n        } else {\n          return new Response(true, \"\", response.data);\n        }\n      } else if (response.status === 204) {\n        return new Response(true, \"No records found\", response.data);\n      } else {\n        return new Response(false, response.data, response.data);\n      }\n    } catch (error) {\n      if (axios.isAxiosError(error)) {\n        if (error.response) {\n          /*\n           * The request was made and the server responded with a\n           * status code that falls out of the range of 2xx\n           */\n          return new Response(false, error.response.data.toString(), error.response.data.toString());\n        } else if (error.request) {\n          /*\n           * The request was made but no response was received, `error.request`\n           * is an instance of XMLHttpRequest in the browser and an instance\n           * of http.ClientRequest in Node.js\n           */\n          return new Response(false, error.request.toString(), error.request.toString());\n        } else {\n          // Something happened in setting up the request and triggered an Error\n          return new Response(false, error.message.toString(), error.message.toString());\n        }\n      }\n\n      return new Response(false, \"error\", error);\n    }\n  }\n\n  async patchData(api, body, headers) {\n    if (this.url === \"\") {\n      this.url = Constants.urlCloud;\n    }\n\n    let response = await axios.patch(`${this.url}/${this.apiVer}/${api}`, body, {\n      headers\n    });\n    return new Response(true, response.statusText, response.data);\n  }\n\n  async deleteData(api, body, headers) {\n    if (this.url === \"\") {\n      this.url = Constants.urlCloud;\n    }\n\n    let response = await axios.delete(`${this.url}/${this.apiVer}/${api}`, {\n      data: body\n    });\n    return new Response(true, response.statusText, response.data);\n  }\n\n}","map":{"version":3,"sources":["/Users/gohshengyang/Documents/GitHub/pagestore-web/src/services/networking.tsx"],"names":["axios","Constants","Response","Networking","url","urlLocal","apiVer","apiver","getData","path","urlCloud","response","get","status","e","data","Array","map","x","Map","Object","entries","error","isAxiosError","toString","request","message","postData","api","body","headers","post","regexFormat","test","JSON","stringify","patchData","patch","statusText","deleteData","delete"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { Constants } from \"../utils/constants\";\nimport { Response } from \"./response\";\n\nexport class Networking {\n  url = Constants.urlLocal;\n  apiVer = Constants.apiver;\n\n  async getData(path: string): Promise<Response> {\n    try {\n      if (this.url === \"\") {\n        this.url = Constants.urlCloud;\n      }\n\n      let response = await axios.get(`${this.url}/${this.apiVer}/${path}`);\n      if (response.status === 200) {\n        let e = response.data;\n\n        let data =\n          e instanceof Array\n            ? e.map((x) => new Map<String, any>(Object.entries(x)))\n            : new Map<String, any>(Object.entries(e));\n\n\n        return new Response(true, \"\", data);\n      } else if (response.status === 204) {\n        return new Response(true, \"No records found\", \"\");\n      } else {\n        return new Response(false, response.data, response.data);\n      }\n    } catch (error) {\n      if (axios.isAxiosError(error)) {\n        if (error.response) {\n          /*\n           * The request was made and the server responded with a\n           * status code that falls out of the range of 2xx\n           */\n          return new Response(\n            false,\n            error.response.data.toString(),\n            error.response.data.toString()\n          );\n        } else if (error.request) {\n          /*\n           * The request was made but no response was received, `error.request`\n           * is an instance of XMLHttpRequest in the browser and an instance\n           * of http.ClientRequest in Node.js\n           */\n          return new Response(\n            false,\n            error.request.toString(),\n            error.request.toString()\n          );\n        } else {\n          // Something happened in setting up the request and triggered an Error\n          return new Response(\n            false,\n            error.message.toString(),\n            error.message.toString()\n          );\n        }\n      }\n\n      return new Response(false, \"error\", error);\n    }\n  }\n\n  async postData(api: string, body: any, headers: any): Promise<Response> {\n    try {\n      if (this.url === \"\") {\n        this.url = Constants.urlCloud;\n      }\n\n\n      let response = await axios.post(\n        `${this.url}/${this.apiVer}/${api}`,\n        body,\n        { headers }\n      );\n      if (response.status === 201 || response.status === 200) {\n        var regexFormat = /[{}]/gm;\n\n        // If the data retrieved is JSON\n        if (regexFormat.test(JSON.stringify(response.data))) {\n          return new Response(true, \"\", new Map(Object.entries(response.data)));\n        } else {\n          return new Response(true, \"\", response.data);\n        }\n      } else if (response.status === 204) {\n        return new Response(true, \"No records found\", response.data);\n      } else {\n        return new Response(false, response.data, response.data);\n      }\n    } catch (error) {\n      if (axios.isAxiosError(error)) {\n        if (error.response) {\n          /*\n           * The request was made and the server responded with a\n           * status code that falls out of the range of 2xx\n           */\n\n          return new Response(\n            false,\n            error.response.data.toString(),\n            error.response.data.toString()\n          );\n        } else if (error.request) {\n          /*\n           * The request was made but no response was received, `error.request`\n           * is an instance of XMLHttpRequest in the browser and an instance\n           * of http.ClientRequest in Node.js\n           */\n          return new Response(\n            false,\n            error.request.toString(),\n            error.request.toString()\n          );\n        } else {\n          // Something happened in setting up the request and triggered an Error\n          return new Response(\n            false,\n            error.message.toString(),\n            error.message.toString()\n          );\n        }\n      }\n\n      return new Response(false, \"error\", error);\n    }\n  }\n\n  async patchData(api: string, body: any, headers: any): Promise<Response> {\n    if (this.url === \"\") {\n      this.url = Constants.urlCloud;\n    }\n\n    let response = await axios.patch(\n      `${this.url}/${this.apiVer}/${api}`,\n      body,\n      { headers }\n    );\n\n\n    return new Response(true, response.statusText, response.data);\n  }\n\n  async deleteData(api: string, body: any, headers?: any): Promise<Response> {\n    if (this.url === \"\") {\n      this.url = Constants.urlCloud;\n    }\n\n    let response = await axios.delete(`${this.url}/${this.apiVer}/${api}`, { data: body });\n\n\n    return new Response(true, response.statusText, response.data);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}