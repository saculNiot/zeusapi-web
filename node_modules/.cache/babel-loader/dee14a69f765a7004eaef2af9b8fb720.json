{"ast":null,"code":"// User model class\nexport class UserUrl {\n  constructor(prop) {\n    this.urlId = void 0;\n    this.userId = void 0;\n    this.apiKey = void 0;\n    this.url = void 0;\n    this.schema = void 0;\n    this.configParam = void 0;\n    this.urlId = prop.urlId;\n    this.userId = prop.userId;\n    this.apiKey = prop.apiKey;\n    this.url = prop.url;\n    this.schema = prop.schema;\n    this.configParam = prop.configParam;\n  } // Convert the map into the User object\n\n\n  fromJson(json) {\n    this.urlId = json.get(\"url_id\");\n    this.userId = json.get(\"user\");\n    this.apiKey = json.get(\"api_key\");\n    this.url = json.get(\"url\"); // Assign a key for the schema field value to avoid undefined key in getSchemaResposne method\n\n    this.schema = new GetSchemaFieldResponse().fromJson(new Map(Object.entries({\n      SchemaField: json.get(\"schema\")\n    }))); // Assign a key for the param field value to avoid undefined key in GetConfigParamResponse method\n\n    this.configParam = new GetConfigParamResponse().fromJson(new Map(Object.entries({\n      ConfigParam: json.get(\"config_param\")\n    })));\n    return this;\n  } // Convert User Object into map\n\n\n  toJson() {\n    let data = new Map();\n    data.set(\"urlId\", this.urlId);\n    data.set(\"user\", this.userId);\n    data.set(\"apiKey\", this.apiKey);\n    data.set(\"url\", this.url);\n    data.set(\"schema\", this.schema);\n    data.set(\"configParam\", this.configParam);\n    return data;\n  }\n\n}\nexport class GetUserUrlResponse {\n  constructor(userUrl) {\n    this.userUrl = void 0;\n    this.userUrl = userUrl;\n  } // Convert JSON (containing list of data) to array\n\n\n  fromJson(json) {\n    if (json.get(\"UserUrl\") != null) {\n      this.userUrl = [];\n      json.get(\"UserUrl\").forEach(v => {\n        var _this$userUrl;\n\n        (_this$userUrl = this.userUrl) === null || _this$userUrl === void 0 ? void 0 : _this$userUrl.push(new UserUrl({}).fromJson(new Map(Object.entries(v))));\n      });\n    }\n\n    return this.userUrl;\n  }\n\n}\nexport class SchemaField {\n  // Url id/ Url\n  constructor(prop) {\n    this.schemaFieldId = void 0;\n    this.url = void 0;\n    this.name = void 0;\n    this.labelName = void 0;\n    this.dataType = void 0;\n    this.createdDateTime = void 0;\n    this.schemaFieldId = prop.schemaFieldId;\n    this.url = prop.url;\n    this.name = prop.name;\n    this.labelName = prop.labelName;\n    this.dataType = prop.dataType;\n    this.createdDateTime = prop.createdDateTime;\n  } // Convert the map into the User object\n\n\n  fromJson(json) {\n    this.schemaFieldId = json.get(\"schema_field_id\");\n    this.url = json.get(\"url\");\n    this.name = json.get(\"name\");\n    this.labelName = json.get(\"label_name\");\n    this.dataType = json.get(\"data_type\");\n    this.createdDateTime = json.get(\"created_date_time\");\n    return this;\n  } // Convert User Object into map\n\n\n  toJson() {\n    let data = new Map();\n    data.set(\"schemaFieldId\", this.schemaFieldId);\n    data.set(\"url\", this.url);\n    data.set(\"name\", this.name);\n    data.set(\"labelName\", this.labelName);\n    data.set(\"dataType\", this.dataType);\n    data.set(\"createdDateTime\", this.createdDateTime);\n    return data;\n  }\n\n}\nexport class GetSchemaFieldResponse {\n  constructor(schemaField) {\n    this.schemaField = void 0;\n    this.schemaField = schemaField;\n  } // Convert JSON (containing list of data) to array\n\n\n  fromJson(json) {\n    if (json.get(\"SchemaField\") !== null && json.get(\"SchemaField\") !== undefined) {\n      this.schemaField = [];\n      json.get(\"SchemaField\").forEach(v => {\n        var _this$schemaField;\n\n        console.log(v);\n        (_this$schemaField = this.schemaField) === null || _this$schemaField === void 0 ? void 0 : _this$schemaField.push(new SchemaField({}).fromJson(new Map(Object.entries(v))));\n      });\n    }\n\n    return this.schemaField;\n  }\n\n}\nexport class ConfigParam {\n  // Url id/ Url\n  constructor(prop) {\n    this.paramId = void 0;\n    this.url = void 0;\n    this.name = void 0;\n    this.defaultValue = void 0;\n    this.createdDateTime = void 0;\n    this.paramId = prop.paramId;\n    this.url = prop.url;\n    this.name = prop.name;\n    this.defaultValue = prop.defaultValue;\n    this.createdDateTime = prop.createdDateTime;\n  } // Convert the map into the User object\n\n\n  fromJson(json) {\n    this.paramId = json.get(\"param_id\");\n    this.url = json.get(\"url\");\n    this.name = json.get(\"name\");\n    this.defaultValue = json.get(\"default_value\");\n    this.createdDateTime = json.get(\"created_date_time\");\n    return this;\n  } // Convert User Object into map\n\n\n  toJson() {\n    let data = new Map();\n    data.set(\"paramId\", this.paramId);\n    data.set(\"url\", this.url);\n    data.set(\"name\", this.name);\n    data.set(\"defaultValue\", this.defaultValue);\n    data.set(\"createdDateTime\", this.createdDateTime);\n    return data;\n  }\n\n}\nexport class GetConfigParamResponse {\n  constructor(configParam) {\n    this.configParam = void 0;\n    this.configParam = configParam;\n  } // Convert JSON (containing list of data) to array\n\n\n  fromJson(json) {\n    if (json.get(\"ConfigParam\") !== null && json.get(\"ConfigParam\") !== undefined) {\n      this.configParam = [];\n      json.get(\"ConfigParam\").forEach(v => {\n        var _this$configParam;\n\n        console.log(v);\n        (_this$configParam = this.configParam) === null || _this$configParam === void 0 ? void 0 : _this$configParam.push(new ConfigParam({}).fromJson(new Map(Object.entries(v))));\n      });\n    }\n\n    return this.configParam;\n  }\n\n}\nexport class DataRows {\n  constructor(prop) {\n    this.userApiId = void 0;\n    this.apiKey = void 0;\n    this.dimensionArray = void 0;\n    this.metricsArray = void 0;\n    this.metricsOperation = void 0;\n    this.userApiId = prop.userApiId;\n    this.apiKey = prop.apiKey;\n    this.dimensionArray = prop.dimensionArray;\n    this.metricsArray = prop.metricsArray;\n    this.metricsOperation = prop.metricsOperation;\n  } // Convert the map into the User object\n\n\n  fromJson(json) {\n    this.userApiId = json.get(\"user_api_id\");\n    this.apiKey = json.get(\"api_key\");\n    this.dimensionArray = json.get(\"dimension_array\");\n    this.metricsArray = json.get(\"metrics_array\");\n    this.metricsOperation = json.get(\"metrics_operation\");\n    return this;\n  } // Convert User Object into map\n\n\n  toJson() {\n    let data = new Map();\n    data.set(\"userApiId\", this.userApiId);\n    data.set(\"apiKey\", this.apiKey);\n    data.set(\"dimensionArray\", this.dimensionArray);\n    data.set(\"metricsArray\", this.metricsArray);\n    data.set(\"metricsOperation\", this.metricsOperation);\n    return data;\n  }\n\n}\nexport class GetDataRowsResponse {\n  constructor(dataRows) {\n    this.dataRows = void 0;\n    this.dataRows = dataRows;\n  } // Convert JSON (containing list of data) to array\n\n\n  fromJson(json) {\n    if (json.get(\"DataRows\") !== null && json.get(\"DataRows\") !== undefined) {\n      this.dataRows = json.get(\"DataRows\");\n    }\n\n    return this.dataRows;\n  }\n\n}\nexport class Graphs {\n  constructor(prop) {\n    this.userApiId = void 0;\n    this.apiKey = void 0;\n    this.layouts = void 0;\n    this.graphs = void 0;\n    this.userApiId = prop.userApiId;\n    this.apiKey = prop.apiKey;\n    this.layouts = prop.layouts;\n    this.graphs = prop.graphs;\n  } // Convert the map into the User object\n\n\n  fromJson(json) {\n    this.userApiId = json.get(\"user_api_id\");\n    this.apiKey = json.get(\"api_key\");\n    this.layouts = json.get(\"layouts\");\n    this.graphs = json.get(\"graphs\");\n    return this;\n  } // Convert User Object into map\n\n\n  toJson() {\n    let data = new Map();\n    data.set(\"userApiId\", this.userApiId);\n    data.set(\"apiKey\", this.apiKey);\n    data.set(\"layouts\", this.layouts);\n    data.set(\"graphs\", this.graphs);\n    return data;\n  }\n\n}\nexport class GetGraphsResponse {\n  constructor(dataRows) {\n    this.dataRows = void 0;\n    this.dataRows = dataRows;\n  } // Convert JSON (containing list of data) to array\n\n\n  fromJson(json) {\n    if (json.get(\"DataRows\") !== null && json.get(\"DataRows\") !== undefined) {\n      this.dataRows = json.get(\"DataRows\");\n    }\n\n    return this.dataRows;\n  }\n\n}","map":{"version":3,"sources":["/Users/gohshengyang/Documents/GitHub/codagence-web/src/services/api/models/url_model.tsx"],"names":["UserUrl","constructor","prop","urlId","userId","apiKey","url","schema","configParam","fromJson","json","get","GetSchemaFieldResponse","Map","Object","entries","SchemaField","GetConfigParamResponse","ConfigParam","toJson","data","set","GetUserUrlResponse","userUrl","forEach","v","push","schemaFieldId","name","labelName","dataType","createdDateTime","schemaField","undefined","console","log","paramId","defaultValue","DataRows","userApiId","dimensionArray","metricsArray","metricsOperation","GetDataRowsResponse","dataRows","Graphs","layouts","graphs","GetGraphsResponse"],"mappings":"AAAA;AACA,OAAO,MAAMA,OAAN,CAAc;AAQpBC,EAAAA,WAAW,CAACC,IAAD,EAOR;AAAA,SAdHC,KAcG;AAAA,SAbHC,MAaG;AAAA,SAZHC,MAYG;AAAA,SAXHC,GAWG;AAAA,SAVHC,MAUG;AAAA,SATHC,WASG;AACF,SAAKL,KAAL,GAAaD,IAAI,CAACC,KAAlB;AACA,SAAKC,MAAL,GAAcF,IAAI,CAACE,MAAnB;AACA,SAAKC,MAAL,GAAcH,IAAI,CAACG,MAAnB;AACA,SAAKC,GAAL,GAAWJ,IAAI,CAACI,GAAhB;AACA,SAAKC,MAAL,GAAcL,IAAI,CAACK,MAAnB;AACA,SAAKC,WAAL,GAAmBN,IAAI,CAACM,WAAxB;AACA,GAtBmB,CAwBpB;;;AACAC,EAAAA,QAAQ,CAACC,IAAD,EAAyB;AAChC,SAAKP,KAAL,GAAaO,IAAI,CAACC,GAAL,CAAS,QAAT,CAAb;AACA,SAAKP,MAAL,GAAcM,IAAI,CAACC,GAAL,CAAS,MAAT,CAAd;AACA,SAAKN,MAAL,GAAcK,IAAI,CAACC,GAAL,CAAS,SAAT,CAAd;AACA,SAAKL,GAAL,GAAWI,IAAI,CAACC,GAAL,CAAS,KAAT,CAAX,CAJgC,CAKhC;;AACA,SAAKJ,MAAL,GAAc,IAAIK,sBAAJ,GAA6BH,QAA7B,CACb,IAAII,GAAJ,CAAQC,MAAM,CAACC,OAAP,CAAe;AAAEC,MAAAA,WAAW,EAAEN,IAAI,CAACC,GAAL,CAAS,QAAT;AAAf,KAAf,CAAR,CADa,CAAd,CANgC,CAShC;;AAEA,SAAKH,WAAL,GAAmB,IAAIS,sBAAJ,GAA6BR,QAA7B,CAClB,IAAII,GAAJ,CAAQC,MAAM,CAACC,OAAP,CAAe;AAAEG,MAAAA,WAAW,EAAER,IAAI,CAACC,GAAL,CAAS,cAAT;AAAf,KAAf,CAAR,CADkB,CAAnB;AAIA,WAAO,IAAP;AACA,GAzCmB,CA2CpB;;;AACAQ,EAAAA,MAAM,GAAG;AACR,QAAIC,IAAI,GAAG,IAAIP,GAAJ,EAAX;AACAO,IAAAA,IAAI,CAACC,GAAL,CAAS,OAAT,EAAkB,KAAKlB,KAAvB;AACAiB,IAAAA,IAAI,CAACC,GAAL,CAAS,MAAT,EAAiB,KAAKjB,MAAtB;AACAgB,IAAAA,IAAI,CAACC,GAAL,CAAS,QAAT,EAAmB,KAAKhB,MAAxB;AACAe,IAAAA,IAAI,CAACC,GAAL,CAAS,KAAT,EAAgB,KAAKf,GAArB;AACAc,IAAAA,IAAI,CAACC,GAAL,CAAS,QAAT,EAAmB,KAAKd,MAAxB;AACAa,IAAAA,IAAI,CAACC,GAAL,CAAS,aAAT,EAAwB,KAAKb,WAA7B;AAEA,WAAOY,IAAP;AACA;;AAtDmB;AAyDrB,OAAO,MAAME,kBAAN,CAAyB;AAG/BrB,EAAAA,WAAW,CAACsB,OAAD,EAA2B;AAAA,SAFtCA,OAEsC;AACrC,SAAKA,OAAL,GAAeA,OAAf;AACA,GAL8B,CAO/B;;;AACAd,EAAAA,QAAQ,CAACC,IAAD,EAAyB;AAChC,QAAIA,IAAI,CAACC,GAAL,CAAS,SAAT,KAAuB,IAA3B,EAAiC;AAChC,WAAKY,OAAL,GAAe,EAAf;AACAb,MAAAA,IAAI,CAACC,GAAL,CAAS,SAAT,EAAoBa,OAApB,CAA6BC,CAAD,IAAyB;AAAA;;AACpD,8BAAKF,OAAL,gEAAcG,IAAd,CACC,IAAI1B,OAAJ,CAAY,EAAZ,EAAgBS,QAAhB,CAAyB,IAAII,GAAJ,CAAQC,MAAM,CAACC,OAAP,CAAeU,CAAf,CAAR,CAAzB,CADD;AAGA,OAJD;AAKA;;AAED,WAAO,KAAKF,OAAZ;AACA;;AAnB8B;AAsBhC,OAAO,MAAMP,WAAN,CAAkB;AAEV;AAMdf,EAAAA,WAAW,CAACC,IAAD,EAOR;AAAA,SAdHyB,aAcG;AAAA,SAbHrB,GAaG;AAAA,SAZHsB,IAYG;AAAA,SAXHC,SAWG;AAAA,SAVHC,QAUG;AAAA,SATHC,eASG;AACF,SAAKJ,aAAL,GAAqBzB,IAAI,CAACyB,aAA1B;AACA,SAAKrB,GAAL,GAAWJ,IAAI,CAACI,GAAhB;AACA,SAAKsB,IAAL,GAAY1B,IAAI,CAAC0B,IAAjB;AACA,SAAKC,SAAL,GAAiB3B,IAAI,CAAC2B,SAAtB;AACA,SAAKC,QAAL,GAAgB5B,IAAI,CAAC4B,QAArB;AACA,SAAKC,eAAL,GAAuB7B,IAAI,CAAC6B,eAA5B;AACA,GAtBuB,CAwBxB;;;AACAtB,EAAAA,QAAQ,CAACC,IAAD,EAAyB;AAChC,SAAKiB,aAAL,GAAqBjB,IAAI,CAACC,GAAL,CAAS,iBAAT,CAArB;AACA,SAAKL,GAAL,GAAWI,IAAI,CAACC,GAAL,CAAS,KAAT,CAAX;AACA,SAAKiB,IAAL,GAAYlB,IAAI,CAACC,GAAL,CAAS,MAAT,CAAZ;AACA,SAAKkB,SAAL,GAAiBnB,IAAI,CAACC,GAAL,CAAS,YAAT,CAAjB;AACA,SAAKmB,QAAL,GAAgBpB,IAAI,CAACC,GAAL,CAAS,WAAT,CAAhB;AACA,SAAKoB,eAAL,GAAuBrB,IAAI,CAACC,GAAL,CAAS,mBAAT,CAAvB;AAEA,WAAO,IAAP;AACA,GAlCuB,CAoCxB;;;AACAQ,EAAAA,MAAM,GAAG;AACR,QAAIC,IAAI,GAAG,IAAIP,GAAJ,EAAX;AACAO,IAAAA,IAAI,CAACC,GAAL,CAAS,eAAT,EAA0B,KAAKM,aAA/B;AACAP,IAAAA,IAAI,CAACC,GAAL,CAAS,KAAT,EAAgB,KAAKf,GAArB;AACAc,IAAAA,IAAI,CAACC,GAAL,CAAS,MAAT,EAAiB,KAAKO,IAAtB;AACAR,IAAAA,IAAI,CAACC,GAAL,CAAS,WAAT,EAAsB,KAAKQ,SAA3B;AACAT,IAAAA,IAAI,CAACC,GAAL,CAAS,UAAT,EAAqB,KAAKS,QAA1B;AACAV,IAAAA,IAAI,CAACC,GAAL,CAAS,iBAAT,EAA4B,KAAKU,eAAjC;AAEA,WAAOX,IAAP;AACA;;AA/CuB;AAkDzB,OAAO,MAAMR,sBAAN,CAA6B;AAGnCX,EAAAA,WAAW,CAAC+B,WAAD,EAAmC;AAAA,SAF9CA,WAE8C;AAC7C,SAAKA,WAAL,GAAmBA,WAAnB;AACA,GALkC,CAOnC;;;AACAvB,EAAAA,QAAQ,CAACC,IAAD,EAAyB;AAChC,QACCA,IAAI,CAACC,GAAL,CAAS,aAAT,MAA4B,IAA5B,IACAD,IAAI,CAACC,GAAL,CAAS,aAAT,MAA4BsB,SAF7B,EAGE;AACD,WAAKD,WAAL,GAAmB,EAAnB;AACAtB,MAAAA,IAAI,CAACC,GAAL,CAAS,aAAT,EAAwBa,OAAxB,CAAiCC,CAAD,IAAyB;AAAA;;AACxDS,QAAAA,OAAO,CAACC,GAAR,CAAYV,CAAZ;AACA,kCAAKO,WAAL,wEAAkBN,IAAlB,CACC,IAAIV,WAAJ,CAAgB,EAAhB,EAAoBP,QAApB,CAA6B,IAAII,GAAJ,CAAQC,MAAM,CAACC,OAAP,CAAeU,CAAf,CAAR,CAA7B,CADD;AAGA,OALD;AAMA;;AAED,WAAO,KAAKO,WAAZ;AACA;;AAvBkC;AA0BpC,OAAO,MAAMd,WAAN,CAAkB;AAEV;AAKdjB,EAAAA,WAAW,CAACC,IAAD,EAMR;AAAA,SAZHkC,OAYG;AAAA,SAXH9B,GAWG;AAAA,SAVHsB,IAUG;AAAA,SATHS,YASG;AAAA,SARHN,eAQG;AACF,SAAKK,OAAL,GAAelC,IAAI,CAACkC,OAApB;AACA,SAAK9B,GAAL,GAAWJ,IAAI,CAACI,GAAhB;AACA,SAAKsB,IAAL,GAAY1B,IAAI,CAAC0B,IAAjB;AACA,SAAKS,YAAL,GAAoBnC,IAAI,CAACmC,YAAzB;AACA,SAAKN,eAAL,GAAuB7B,IAAI,CAAC6B,eAA5B;AACA,GAnBuB,CAqBxB;;;AACAtB,EAAAA,QAAQ,CAACC,IAAD,EAAyB;AAChC,SAAK0B,OAAL,GAAe1B,IAAI,CAACC,GAAL,CAAS,UAAT,CAAf;AACA,SAAKL,GAAL,GAAWI,IAAI,CAACC,GAAL,CAAS,KAAT,CAAX;AACA,SAAKiB,IAAL,GAAYlB,IAAI,CAACC,GAAL,CAAS,MAAT,CAAZ;AACA,SAAK0B,YAAL,GAAoB3B,IAAI,CAACC,GAAL,CAAS,eAAT,CAApB;AACA,SAAKoB,eAAL,GAAuBrB,IAAI,CAACC,GAAL,CAAS,mBAAT,CAAvB;AAEA,WAAO,IAAP;AACA,GA9BuB,CAgCxB;;;AACAQ,EAAAA,MAAM,GAAG;AACR,QAAIC,IAAI,GAAG,IAAIP,GAAJ,EAAX;AACAO,IAAAA,IAAI,CAACC,GAAL,CAAS,SAAT,EAAoB,KAAKe,OAAzB;AACAhB,IAAAA,IAAI,CAACC,GAAL,CAAS,KAAT,EAAgB,KAAKf,GAArB;AACAc,IAAAA,IAAI,CAACC,GAAL,CAAS,MAAT,EAAiB,KAAKO,IAAtB;AACAR,IAAAA,IAAI,CAACC,GAAL,CAAS,cAAT,EAAyB,KAAKgB,YAA9B;AACAjB,IAAAA,IAAI,CAACC,GAAL,CAAS,iBAAT,EAA4B,KAAKU,eAAjC;AAEA,WAAOX,IAAP;AACA;;AA1CuB;AA6CzB,OAAO,MAAMH,sBAAN,CAA6B;AAGnChB,EAAAA,WAAW,CAACO,WAAD,EAAmC;AAAA,SAF9CA,WAE8C;AAC7C,SAAKA,WAAL,GAAmBA,WAAnB;AACA,GALkC,CAOnC;;;AACAC,EAAAA,QAAQ,CAACC,IAAD,EAAyB;AAChC,QACCA,IAAI,CAACC,GAAL,CAAS,aAAT,MAA4B,IAA5B,IACAD,IAAI,CAACC,GAAL,CAAS,aAAT,MAA4BsB,SAF7B,EAGE;AACD,WAAKzB,WAAL,GAAmB,EAAnB;AACAE,MAAAA,IAAI,CAACC,GAAL,CAAS,aAAT,EAAwBa,OAAxB,CAAiCC,CAAD,IAAyB;AAAA;;AACxDS,QAAAA,OAAO,CAACC,GAAR,CAAYV,CAAZ;AACA,kCAAKjB,WAAL,wEAAkBkB,IAAlB,CACC,IAAIR,WAAJ,CAAgB,EAAhB,EAAoBT,QAApB,CAA6B,IAAII,GAAJ,CAAQC,MAAM,CAACC,OAAP,CAAeU,CAAf,CAAR,CAA7B,CADD;AAGA,OALD;AAMA;;AAED,WAAO,KAAKjB,WAAZ;AACA;;AAvBkC;AA0BpC,OAAO,MAAM8B,QAAN,CAAe;AAQrBrC,EAAAA,WAAW,CAACC,IAAD,EAMR;AAAA,SAbHqC,SAaG;AAAA,SAZHlC,MAYG;AAAA,SAXHmC,cAWG;AAAA,SAVHC,YAUG;AAAA,SATHC,gBASG;AACF,SAAKH,SAAL,GAAiBrC,IAAI,CAACqC,SAAtB;AACA,SAAKlC,MAAL,GAAcH,IAAI,CAACG,MAAnB;AACA,SAAKmC,cAAL,GAAsBtC,IAAI,CAACsC,cAA3B;AACA,SAAKC,YAAL,GAAoBvC,IAAI,CAACuC,YAAzB;AACA,SAAKC,gBAAL,GAAwBxC,IAAI,CAACwC,gBAA7B;AACA,GApBoB,CAsBrB;;;AACAjC,EAAAA,QAAQ,CAACC,IAAD,EAAyB;AAChC,SAAK6B,SAAL,GAAiB7B,IAAI,CAACC,GAAL,CAAS,aAAT,CAAjB;AACA,SAAKN,MAAL,GAAcK,IAAI,CAACC,GAAL,CAAS,SAAT,CAAd;AACA,SAAK6B,cAAL,GAAsB9B,IAAI,CAACC,GAAL,CAAS,iBAAT,CAAtB;AACA,SAAK8B,YAAL,GAAoB/B,IAAI,CAACC,GAAL,CAAS,eAAT,CAApB;AACA,SAAK+B,gBAAL,GAAwBhC,IAAI,CAACC,GAAL,CAAS,mBAAT,CAAxB;AAEA,WAAO,IAAP;AACA,GA/BoB,CAiCrB;;;AACAQ,EAAAA,MAAM,GAAG;AACR,QAAIC,IAAI,GAAG,IAAIP,GAAJ,EAAX;AACAO,IAAAA,IAAI,CAACC,GAAL,CAAS,WAAT,EAAsB,KAAKkB,SAA3B;AACAnB,IAAAA,IAAI,CAACC,GAAL,CAAS,QAAT,EAAmB,KAAKhB,MAAxB;AACAe,IAAAA,IAAI,CAACC,GAAL,CAAS,gBAAT,EAA2B,KAAKmB,cAAhC;AACApB,IAAAA,IAAI,CAACC,GAAL,CAAS,cAAT,EAAyB,KAAKoB,YAA9B;AACArB,IAAAA,IAAI,CAACC,GAAL,CAAS,kBAAT,EAA6B,KAAKqB,gBAAlC;AAEA,WAAOtB,IAAP;AACA;;AA3CoB;AA8CtB,OAAO,MAAMuB,mBAAN,CAA0B;AAGhC1C,EAAAA,WAAW,CAAC2C,QAAD,EAAuB;AAAA,SAFlCA,QAEkC;AACjC,SAAKA,QAAL,GAAgBA,QAAhB;AACA,GAL+B,CAOhC;;;AACAnC,EAAAA,QAAQ,CAACC,IAAD,EAAyB;AAChC,QACCA,IAAI,CAACC,GAAL,CAAS,UAAT,MAAyB,IAAzB,IACAD,IAAI,CAACC,GAAL,CAAS,UAAT,MAAyBsB,SAF1B,EAGE;AACD,WAAKW,QAAL,GAAgBlC,IAAI,CAACC,GAAL,CAAS,UAAT,CAAhB;AACA;;AAED,WAAO,KAAKiC,QAAZ;AACA;;AAjB+B;AAoBjC,OAAO,MAAMC,MAAN,CAAa;AAUnB5C,EAAAA,WAAW,CAACC,IAAD,EASR;AAAA,SAlBHqC,SAkBG;AAAA,SAjBHlC,MAiBG;AAAA,SAhBHyC,OAgBG;AAAA,SAfHC,MAeG;AACF,SAAKR,SAAL,GAAiBrC,IAAI,CAACqC,SAAtB;AACA,SAAKlC,MAAL,GAAcH,IAAI,CAACG,MAAnB;AACA,SAAKyC,OAAL,GAAe5C,IAAI,CAAC4C,OAApB;AACA,SAAKC,MAAL,GAAc7C,IAAI,CAAC6C,MAAnB;AACA,GAxBkB,CA0BnB;;;AACAtC,EAAAA,QAAQ,CAACC,IAAD,EAAyB;AAChC,SAAK6B,SAAL,GAAiB7B,IAAI,CAACC,GAAL,CAAS,aAAT,CAAjB;AACA,SAAKN,MAAL,GAAcK,IAAI,CAACC,GAAL,CAAS,SAAT,CAAd;AACA,SAAKmC,OAAL,GAAepC,IAAI,CAACC,GAAL,CAAS,SAAT,CAAf;AACA,SAAKoC,MAAL,GAAcrC,IAAI,CAACC,GAAL,CAAS,QAAT,CAAd;AAEA,WAAO,IAAP;AACA,GAlCkB,CAoCnB;;;AACAQ,EAAAA,MAAM,GAAG;AACR,QAAIC,IAAI,GAAG,IAAIP,GAAJ,EAAX;AACAO,IAAAA,IAAI,CAACC,GAAL,CAAS,WAAT,EAAsB,KAAKkB,SAA3B;AACAnB,IAAAA,IAAI,CAACC,GAAL,CAAS,QAAT,EAAmB,KAAKhB,MAAxB;AACAe,IAAAA,IAAI,CAACC,GAAL,CAAS,SAAT,EAAoB,KAAKyB,OAAzB;AACA1B,IAAAA,IAAI,CAACC,GAAL,CAAS,QAAT,EAAmB,KAAK0B,MAAxB;AAEA,WAAO3B,IAAP;AACA;;AA7CkB;AAgDpB,OAAO,MAAM4B,iBAAN,CAAwB;AAG9B/C,EAAAA,WAAW,CAAC2C,QAAD,EAAuB;AAAA,SAFlCA,QAEkC;AACjC,SAAKA,QAAL,GAAgBA,QAAhB;AACA,GAL6B,CAO9B;;;AACAnC,EAAAA,QAAQ,CAACC,IAAD,EAAyB;AAChC,QACCA,IAAI,CAACC,GAAL,CAAS,UAAT,MAAyB,IAAzB,IACAD,IAAI,CAACC,GAAL,CAAS,UAAT,MAAyBsB,SAF1B,EAGE;AACD,WAAKW,QAAL,GAAgBlC,IAAI,CAACC,GAAL,CAAS,UAAT,CAAhB;AACA;;AAED,WAAO,KAAKiC,QAAZ;AACA;;AAjB6B","sourcesContent":["// User model class\nexport class UserUrl {\n\turlId?: string;\n\tuserId?: string;\n\tapiKey?: string;\n\turl?: string;\n\tschema?: Array<SchemaField>;\n\tconfigParam?: Array<ConfigParam>;\n\n\tconstructor(prop: {\n\t\turlId?: string;\n\t\tuserId?: string;\n\t\tapiKey?: string;\n\t\turl?: string;\n\t\tschema?: Array<SchemaField>;\n\t\tconfigParam?: Array<any>;\n\t}) {\n\t\tthis.urlId = prop.urlId;\n\t\tthis.userId = prop.userId;\n\t\tthis.apiKey = prop.apiKey;\n\t\tthis.url = prop.url;\n\t\tthis.schema = prop.schema;\n\t\tthis.configParam = prop.configParam;\n\t}\n\n\t// Convert the map into the User object\n\tfromJson(json: Map<String, any>) {\n\t\tthis.urlId = json.get(\"url_id\");\n\t\tthis.userId = json.get(\"user\");\n\t\tthis.apiKey = json.get(\"api_key\");\n\t\tthis.url = json.get(\"url\");\n\t\t// Assign a key for the schema field value to avoid undefined key in getSchemaResposne method\n\t\tthis.schema = new GetSchemaFieldResponse().fromJson(\n\t\t\tnew Map(Object.entries({ SchemaField: json.get(\"schema\") }))\n\t\t);\n\t\t// Assign a key for the param field value to avoid undefined key in GetConfigParamResponse method\n\n\t\tthis.configParam = new GetConfigParamResponse().fromJson(\n\t\t\tnew Map(Object.entries({ ConfigParam: json.get(\"config_param\") }))\n\t\t);\n\n\t\treturn this;\n\t}\n\n\t// Convert User Object into map\n\ttoJson() {\n\t\tlet data = new Map<String, any>();\n\t\tdata.set(\"urlId\", this.urlId);\n\t\tdata.set(\"user\", this.userId);\n\t\tdata.set(\"apiKey\", this.apiKey);\n\t\tdata.set(\"url\", this.url);\n\t\tdata.set(\"schema\", this.schema);\n\t\tdata.set(\"configParam\", this.configParam);\n\n\t\treturn data;\n\t}\n}\n\nexport class GetUserUrlResponse {\n\tuserUrl?: Array<UserUrl>;\n\n\tconstructor(userUrl?: Array<UserUrl>) {\n\t\tthis.userUrl = userUrl;\n\t}\n\n\t// Convert JSON (containing list of data) to array\n\tfromJson(json: Map<String, any>) {\n\t\tif (json.get(\"UserUrl\") != null) {\n\t\t\tthis.userUrl = [];\n\t\t\tjson.get(\"UserUrl\").forEach((v: Map<String, any>) => {\n\t\t\t\tthis.userUrl?.push(\n\t\t\t\t\tnew UserUrl({}).fromJson(new Map(Object.entries(v)))\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\n\t\treturn this.userUrl;\n\t}\n}\n\nexport class SchemaField {\n\tschemaFieldId?: string;\n\turl?: string; // Url id/ Url\n\tname?: string;\n\tlabelName?: string;\n\tdataType?: string;\n\tcreatedDateTime?: string;\n\n\tconstructor(prop: {\n\t\tschemaFieldId?: string;\n\t\turl?: string;\n\t\tname?: string;\n\t\tlabelName?: string;\n\t\tdataType?: string;\n\t\tcreatedDateTime?: string;\n\t}) {\n\t\tthis.schemaFieldId = prop.schemaFieldId;\n\t\tthis.url = prop.url;\n\t\tthis.name = prop.name;\n\t\tthis.labelName = prop.labelName;\n\t\tthis.dataType = prop.dataType;\n\t\tthis.createdDateTime = prop.createdDateTime;\n\t}\n\n\t// Convert the map into the User object\n\tfromJson(json: Map<String, any>) {\n\t\tthis.schemaFieldId = json.get(\"schema_field_id\");\n\t\tthis.url = json.get(\"url\");\n\t\tthis.name = json.get(\"name\");\n\t\tthis.labelName = json.get(\"label_name\");\n\t\tthis.dataType = json.get(\"data_type\");\n\t\tthis.createdDateTime = json.get(\"created_date_time\");\n\n\t\treturn this;\n\t}\n\n\t// Convert User Object into map\n\ttoJson() {\n\t\tlet data = new Map<String, any>();\n\t\tdata.set(\"schemaFieldId\", this.schemaFieldId);\n\t\tdata.set(\"url\", this.url);\n\t\tdata.set(\"name\", this.name);\n\t\tdata.set(\"labelName\", this.labelName);\n\t\tdata.set(\"dataType\", this.dataType);\n\t\tdata.set(\"createdDateTime\", this.createdDateTime);\n\n\t\treturn data;\n\t}\n}\n\nexport class GetSchemaFieldResponse {\n\tschemaField?: Array<SchemaField>;\n\n\tconstructor(schemaField?: Array<SchemaField>) {\n\t\tthis.schemaField = schemaField;\n\t}\n\n\t// Convert JSON (containing list of data) to array\n\tfromJson(json: Map<String, any>) {\n\t\tif (\n\t\t\tjson.get(\"SchemaField\") !== null &&\n\t\t\tjson.get(\"SchemaField\") !== undefined\n\t\t) {\n\t\t\tthis.schemaField = [];\n\t\t\tjson.get(\"SchemaField\").forEach((v: Map<String, any>) => {\n\t\t\t\tconsole.log(v);\n\t\t\t\tthis.schemaField?.push(\n\t\t\t\t\tnew SchemaField({}).fromJson(new Map(Object.entries(v)))\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\n\t\treturn this.schemaField;\n\t}\n}\n\nexport class ConfigParam {\n\tparamId?: string;\n\turl?: string; // Url id/ Url\n\tname?: string;\n\tdefaultValue?: string;\n\tcreatedDateTime?: string;\n\n\tconstructor(prop: {\n\t\tparamId?: string;\n\t\turl?: string;\n\t\tname ?: string;\n\t\tdefaultValue?: string;\n\t\tcreatedDateTime?: string;\n\t}) {\n\t\tthis.paramId = prop.paramId;\n\t\tthis.url = prop.url;\n\t\tthis.name = prop.name;\n\t\tthis.defaultValue = prop.defaultValue;\n\t\tthis.createdDateTime = prop.createdDateTime;\n\t}\n\n\t// Convert the map into the User object\n\tfromJson(json: Map<String, any>) {\n\t\tthis.paramId = json.get(\"param_id\");\n\t\tthis.url = json.get(\"url\");\n\t\tthis.name = json.get(\"name\");\n\t\tthis.defaultValue = json.get(\"default_value\");\n\t\tthis.createdDateTime = json.get(\"created_date_time\");\n\n\t\treturn this;\n\t}\n\n\t// Convert User Object into map\n\ttoJson() {\n\t\tlet data = new Map<String, any>();\n\t\tdata.set(\"paramId\", this.paramId);\n\t\tdata.set(\"url\", this.url);\n\t\tdata.set(\"name\", this.name);\n\t\tdata.set(\"defaultValue\", this.defaultValue);\n\t\tdata.set(\"createdDateTime\", this.createdDateTime);\n\n\t\treturn data;\n\t}\n}\n\nexport class GetConfigParamResponse {\n\tconfigParam?: Array<ConfigParam>;\n\n\tconstructor(configParam?: Array<ConfigParam>) {\n\t\tthis.configParam = configParam;\n\t}\n\n\t// Convert JSON (containing list of data) to array\n\tfromJson(json: Map<String, any>) {\n\t\tif (\n\t\t\tjson.get(\"ConfigParam\") !== null &&\n\t\t\tjson.get(\"ConfigParam\") !== undefined\n\t\t) {\n\t\t\tthis.configParam = [];\n\t\t\tjson.get(\"ConfigParam\").forEach((v: Map<String, any>) => {\n\t\t\t\tconsole.log(v);\n\t\t\t\tthis.configParam?.push(\n\t\t\t\t\tnew ConfigParam({}).fromJson(new Map(Object.entries(v)))\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\n\t\treturn this.configParam;\n\t}\n}\n\nexport class DataRows {\n\tuserApiId?: string;\n\tapiKey?: string;\n\tdimensionArray?: Array<string>;\n\tmetricsArray?: Array<string>;\n\tmetricsOperation?: Array<string>;\n\t\n\n\tconstructor(prop: {\n\t\tuserApiId?: string;\n\t\tapiKey?: string;\n\t\tdimensionArray?: Array<string>;\n\t\tmetricsArray?: Array<string>;\n\t\tmetricsOperation?: Array<string>;\n\t}) {\n\t\tthis.userApiId = prop.userApiId;\n\t\tthis.apiKey = prop.apiKey;\n\t\tthis.dimensionArray = prop.dimensionArray;\n\t\tthis.metricsArray = prop.metricsArray;\n\t\tthis.metricsOperation = prop.metricsOperation;\n\t}\n\n\t// Convert the map into the User object\n\tfromJson(json: Map<String, any>) {\n\t\tthis.userApiId = json.get(\"user_api_id\");\n\t\tthis.apiKey = json.get(\"api_key\");\n\t\tthis.dimensionArray = json.get(\"dimension_array\");\n\t\tthis.metricsArray = json.get(\"metrics_array\");\n\t\tthis.metricsOperation = json.get(\"metrics_operation\");\n\n\t\treturn this;\n\t}\n\n\t// Convert User Object into map\n\ttoJson() {\n\t\tlet data = new Map<String, any>();\n\t\tdata.set(\"userApiId\", this.userApiId);\n\t\tdata.set(\"apiKey\", this.apiKey);\n\t\tdata.set(\"dimensionArray\", this.dimensionArray);\n\t\tdata.set(\"metricsArray\", this.metricsArray);\n\t\tdata.set(\"metricsOperation\", this.metricsOperation);\n\n\t\treturn data;\n\t}\n}\n\nexport class GetDataRowsResponse {\n\tdataRows?: any;\n\n\tconstructor(dataRows?: Array<{}>) {\n\t\tthis.dataRows = dataRows;\n\t}\n\n\t// Convert JSON (containing list of data) to array\n\tfromJson(json: Map<String, any>) {\n\t\tif (\n\t\t\tjson.get(\"DataRows\") !== null &&\n\t\t\tjson.get(\"DataRows\") !== undefined\n\t\t) {\n\t\t\tthis.dataRows = json.get(\"DataRows\");\n\t\t}\n\n\t\treturn this.dataRows;\n\t}\n}\n\nexport class Graphs {\n\tuserApiId?: string;\n\tapiKey?: string;\n\tlayouts?:Array<any>;\n\tgraphs?: Array<{\n\t\tdimension_array: Array<any>;\n\t\tmetrics_operation_array: Array<string>;\n\t\tdata_grid:Array<any>;\n\t}>;\n\n\tconstructor(prop: {\n\t\tuserApiId?: string;\n\t\tapiKey?: string;\n\t\tlayouts?:Array<any>;\n\t\tgraphs?: Array<{\n\t\t\tdimension_array: Array<any>;\n\t\t\tmetrics_operation_array: Array<any>;\n\t\t\tdata_grid:Array<any>;\n\t\t}>;\n\t}) {\n\t\tthis.userApiId = prop.userApiId;\n\t\tthis.apiKey = prop.apiKey;\n\t\tthis.layouts = prop.layouts;\n\t\tthis.graphs = prop.graphs;\n\t}\n\n\t// Convert the map into the User object\n\tfromJson(json: Map<String, any>) {\n\t\tthis.userApiId = json.get(\"user_api_id\");\n\t\tthis.apiKey = json.get(\"api_key\");\n\t\tthis.layouts = json.get(\"layouts\");\n\t\tthis.graphs = json.get(\"graphs\");\n\n\t\treturn this;\n\t}\n\n\t// Convert User Object into map\n\ttoJson() {\n\t\tlet data = new Map<String, any>();\n\t\tdata.set(\"userApiId\", this.userApiId);\n\t\tdata.set(\"apiKey\", this.apiKey);\n\t\tdata.set(\"layouts\", this.layouts);\n\t\tdata.set(\"graphs\", this.graphs);\n\n\t\treturn data;\n\t}\n}\n\nexport class GetGraphsResponse {\n\tdataRows?: any;\n\n\tconstructor(dataRows?: Array<{}>) {\n\t\tthis.dataRows = dataRows;\n\t}\n\n\t// Convert JSON (containing list of data) to array\n\tfromJson(json: Map<String, any>) {\n\t\tif (\n\t\t\tjson.get(\"DataRows\") !== null &&\n\t\t\tjson.get(\"DataRows\") !== undefined\n\t\t) {\n\t\t\tthis.dataRows = json.get(\"DataRows\");\n\t\t}\n\n\t\treturn this.dataRows;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}