{"ast":null,"code":"var _jsxFileName = \"/Users/gohshengyang/Documents/GitHub/codagence-web/src/pages/graph_display/GraphDisplay.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Layout, message, Spin } from \"antd\";\nimport RGL from \"react-grid-layout\";\nimport \"react-grid-layout/css/styles.css\";\nimport { SizeMe, withSize } from \"react-sizeme\";\nimport { MyBar } from \"../chartManager/BarChart\";\nimport { Content } from \"antd/lib/layout/layout\";\nimport { UrlRepo } from \"../../services/api/repositories/url_repo\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Resize the Grid Layout according to the parent widget\nconst withSizeHOC = withSize();\nconst ReactGridLayout = withSizeHOC(RGL);\n_c = ReactGridLayout;\nexport const GraphDisplay = () => {\n  _s();\n\n  // State of managing graph properties\n  const [_graphValues, setGraphValues] = useState([]);\n  const windowUrl = window.location.search;\n  let param = new URLSearchParams(windowUrl);\n  const [_isEditorLoading, setEditorLoading] = useState(true);\n  let urlRepo = new UrlRepo();\n  useEffect(() => {\n    async function initState() {\n      let path = \"\";\n\n      for (var key in param.keys()) {\n        console.log(key);\n      }\n\n      let graphGetResult = await urlRepo.getGraphsWithParamByApiKey(path);\n\n      if (graphGetResult.isSuccess) {\n        graphGetResult.data.forEach(item => {\n          item[\"data_grid\"][\"static\"] = true;\n        });\n        setGraphValues(graphGetResult.data);\n      } else {\n        message.error(graphGetResult.message);\n      }\n\n      setEditorLoading(false);\n    }\n\n    initState();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    className: \"layout\",\n    children: /*#__PURE__*/_jsxDEV(Layout, {\n      style: {\n        overflow: \"auto\",\n        minHeight: \"70vh\",\n        width: \"100%\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Content, {\n        className: \"site-layout-background\",\n        style: {\n          padding: 0,\n          margin: 0,\n          alignItems: \"center\"\n        },\n        children: _isEditorLoading ? /*#__PURE__*/_jsxDEV(Spin, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 7\n        }, this) : /*#__PURE__*/_jsxDEV(SizeMe, {\n          children: ({\n            size\n          }) => /*#__PURE__*/_jsxDEV(ReactGridLayout, {\n            className: \"grid-layout\",\n            width: size.width,\n            rowHeight: size.width / 60,\n            cols: 30,\n            children: _graphValues.map((item, index) => {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                \"data-grid\": item.data_grid,\n                style: {\n                  width: \"auto\",\n                  border: \"1px solid #D3D3D3\",\n                  padding: \"10px 10px 10px 10px\",\n                  height: \"100px\" // To enable the chart responsive in height\n\n                },\n                children: /*#__PURE__*/_jsxDEV(MyBar, {\n                  data: {\n                    key: item.key,\n                    main_chart_type: item.main_chart_type,\n                    title: item.title,\n                    dataSet: item.dataSet,\n                    dimension: item.dimension,\n                    data_grid: item.data_grid,\n                    chosen_schema: item.chosen_schema\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 88,\n                  columnNumber: 13\n                }, this)\n              }, item.key, false, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 12\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 3\n  }, this);\n};\n\n_s(GraphDisplay, \"/wUsJoQS06WMxpZIY/q7RrAokLY=\");\n\n_c2 = GraphDisplay;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ReactGridLayout\");\n$RefreshReg$(_c2, \"GraphDisplay\");","map":{"version":3,"sources":["/Users/gohshengyang/Documents/GitHub/codagence-web/src/pages/graph_display/GraphDisplay.tsx"],"names":["React","useEffect","useState","Layout","message","Spin","RGL","SizeMe","withSize","MyBar","Content","UrlRepo","withSizeHOC","ReactGridLayout","GraphDisplay","_graphValues","setGraphValues","windowUrl","window","location","search","param","URLSearchParams","_isEditorLoading","setEditorLoading","urlRepo","initState","path","key","keys","console","log","graphGetResult","getGraphsWithParamByApiKey","isSuccess","data","forEach","item","error","overflow","minHeight","width","padding","margin","alignItems","size","map","index","data_grid","border","height","main_chart_type","title","dataSet","dimension","chosen_schema"],"mappings":"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","sourcesContent":["import React, { ReactElement, useEffect, useState } from \"react\";\nimport _ from \"lodash\";\nimport { Layout, message, Spin } from \"antd\";\nimport RGL, { Responsive, WidthProvider } from \"react-grid-layout\";\nimport \"react-grid-layout/css/styles.css\";\nimport { SizeMe, withSize } from \"react-sizeme\";\nimport { DataProps, MyBar } from \"../chartManager/BarChart\";\nimport { Content } from \"antd/lib/layout/layout\";\nimport { UrlRepo } from \"../../services/api/repositories/url_repo\";\nimport { ConfigParam } from \"../../services/api/models/url_model\";\n\n// Resize the Grid Layout according to the parent widget\nconst withSizeHOC = withSize();\nconst ReactGridLayout = withSizeHOC(RGL);\n\nexport const GraphDisplay: React.FC<any> = () => {\n\t// State of managing graph properties\n\tconst [_graphValues, setGraphValues] = useState<Array<DataProps[\"data\"]>>(\n\t\t[]\n\t);\n\tconst windowUrl = window.location.search;\n\tlet param = new URLSearchParams(windowUrl);\n\n\tconst [_isEditorLoading, setEditorLoading] = useState<boolean>(true);\n\n\tlet urlRepo = new UrlRepo();\n\n\tuseEffect(() => {\n\t\tasync function initState() {\n\t\t\tlet path = \"\";\n\n\t\t\tfor(var key in param.keys()) {\n\t\t\t\tconsole.log(key);\n\t\t\t  }\n\n\t\t\tlet graphGetResult = await urlRepo.getGraphsWithParamByApiKey(path);\n\n\t\t\tif (graphGetResult.isSuccess) {\n\t\t\t\tgraphGetResult.data.forEach((item: any) => {\n\t\t\t\t\titem[\"data_grid\"][\"static\"] = true;\n\t\t\t\t});\n\t\t\t\tsetGraphValues(graphGetResult.data);\n\t\t\t} else {\n\t\t\t\tmessage.error(graphGetResult.message);\n\t\t\t}\n\t\t\tsetEditorLoading(false);\n\t\t}\n\t\tinitState();\n\t}, []);\n\n\treturn (\n\t\t<Layout className=\"layout\">\n\t\t\t<Layout\n\t\t\t\tstyle={{ overflow: \"auto\", minHeight: \"70vh\", width: \"100%\" }}\n\t\t\t>\n\t\t\t\t<Content\n\t\t\t\t\tclassName=\"site-layout-background\"\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tpadding: 0,\n\t\t\t\t\t\tmargin: 0,\n\t\t\t\t\t\talignItems: \"center\",\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{_isEditorLoading ? (\n\t\t\t\t\t\t<Spin></Spin>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<SizeMe>\n\t\t\t\t\t\t\t{({ size }) => (\n\t\t\t\t\t\t\t\t<ReactGridLayout\n\t\t\t\t\t\t\t\t\tclassName=\"grid-layout\"\n\t\t\t\t\t\t\t\t\twidth={size.width as number}\n\t\t\t\t\t\t\t\t\trowHeight={(size.width as number) / 60}\n\t\t\t\t\t\t\t\t\tcols={30}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{_graphValues.map((item, index) => {\n\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\t\t\tkey={item.key}\n\t\t\t\t\t\t\t\t\t\t\t\tdata-grid={item.data_grid}\n\t\t\t\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\t\t\t\twidth: \"auto\",\n\t\t\t\t\t\t\t\t\t\t\t\t\tborder: \"1px solid #D3D3D3\",\n\t\t\t\t\t\t\t\t\t\t\t\t\tpadding:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"10px 10px 10px 10px\",\n\t\t\t\t\t\t\t\t\t\t\t\t\theight: \"100px\", // To enable the chart responsive in height\n\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t<MyBar\n\t\t\t\t\t\t\t\t\t\t\t\t\tdata={{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tkey: item.key,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tmain_chart_type:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\titem.main_chart_type,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttitle: item.title,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdataSet: item.dataSet,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdimension:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\titem.dimension,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdata_grid:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\titem.data_grid,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tchosen_schema:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\titem.chosen_schema,\n\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t</ReactGridLayout>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</SizeMe>\n\t\t\t\t\t)}\n\t\t\t\t</Content>\n\t\t\t</Layout>\n\t\t</Layout>\n\t);\n};\n"]},"metadata":{},"sourceType":"module"}