{"ast":null,"code":"import { FirebaseServices } from \"../../../utils/firebaseServices\";\nimport { LocalStorage } from \"../../../utils/localStorage\";\nimport { RoutePath } from \"../../../utils/routePath\";\nimport { Networking } from \"../../networking\";\nimport { Response } from \"../../response\";\nimport { Client, GetClientResponse } from \"../models/client_model\";\nexport class ClientRepo {\n  constructor() {\n    this.networking = new Networking();\n  }\n\n  async getAllClients(value) {\n    let headers = {\n      Authorization: `Bearer ${await LocalStorage.getAccessToken()}`\n    };\n    let response = await this.networking.getData(`get_all_client_by_createdby_id`, headers); // If data is retrieved and the data is not empty, then return\n\n    if (response.isSuccess && response.data !== null && response.data !== \"\") {\n      console.log(response.data);\n      let getClientResponse = new GetClientResponse().fromJson(response.data);\n      return new Response(true, response.message, getClientResponse); // If data is retrieved and the data is empty, then return\n    } else if (response.isSuccess && response.message === \"No records found\") {\n      return new Response(true, \"No records found\", \"\"); // If http method is timeout or being halt, then return\n    } else if (!response.isSuccess && response.message === \"Session expired\") {\n      console.log(\"here2\"); // Go back to default page if session expired\n\n      await FirebaseServices.signOut();\n      await LocalStorage.resetStorage();\n      alert(\"Session Expired.Please sign in again.\");\n      value === null || value === void 0 ? void 0 : value.history.replace(RoutePath.default);\n      return new Response(false, \"Session expired\", \"\"); // If http method is timeout or being halt, then return\n    } else if (!response.isSuccess) {\n      return new Response(false, response.message, \"\");\n    } else {\n      return new Response(false, response.message, response.data);\n    }\n  }\n\n  async getClientById(value) {\n    const path = `clientId=${value === null || value === void 0 ? void 0 : value.clientId}`;\n    let headers = {\n      Authorization: `Bearer ${await LocalStorage.getAccessToken()}`\n    };\n    let response = await this.networking.getData(`get_client_by_id?${path}`, headers); // If data is retrieved and the data is not empty, then return\n\n    if (response.isSuccess && response.data !== null && response.data !== \"\") {\n      console.log(response.data);\n      let getClientResponse = new GetClientResponse().fromJson(response.data);\n      return new Response(true, response.message, getClientResponse); // If data is retrieved and the data is empty, then return\n    } else if (response.isSuccess && response.message === \"No records found\") {\n      return new Response(true, \"No records found\", \"\"); // If http method is timeout or being halt, then return\n    } else if (!response.isSuccess && response.message === \"Session expired\") {\n      // Go back to default page if session expired\n      await FirebaseServices.signOut();\n      await LocalStorage.resetStorage();\n      alert(\"Session Expired.Please sign in again.\");\n      value === null || value === void 0 ? void 0 : value.history.replace(RoutePath.default);\n      return new Response(false, \"Session expired\", \"\"); // If http method is timeout or being halt, then return\n    } else if (!response.isSuccess) {\n      return new Response(false, response.message, \"\");\n    } else {\n      return new Response(false, response.message, response.data);\n    }\n  }\n\n  async saveClient(props) {\n    // Initialize the save user model\n    const saveClient = new Client({\n      createdById: props.createdById,\n      clientId: props.clientId,\n      name: props.name,\n      attribute: props.attribute\n    }); // Object to Map, then to JSON\n\n    const body = Object.fromEntries(saveClient.toJson());\n    let headers = {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${await LocalStorage.getAccessToken()}`\n    };\n    let response = await this.networking.postData(\"save_client\", // API choice is depends on the usage\n    body, headers); // If data is retrieved and the data is not empty, then return\n\n    if (response.isSuccess && response.data !== null && response.data !== \"\") {\n      console.log(response.data);\n      return new Response(true, response.message, response.data); // If data is retrieved and the data is empty, then return\n    } else if (response.isSuccess && response.message === \"No records found\") {\n      return new Response(true, \"No records found\", \"\"); // If http method is timeout or being halt, then return\n    } else if (!response.isSuccess && response.message === \"Session expired\") {\n      // Go back to default page if session expired\n      await FirebaseServices.signOut();\n      await LocalStorage.resetStorage();\n      alert(\"Session Expired.Please sign in again.\");\n      props === null || props === void 0 ? void 0 : props.history.replace(RoutePath.default);\n      return new Response(false, \"Session expired\", \"\"); // If http method is timeout or being halt, then return\n    } else if (!response.isSuccess) {\n      return new Response(false, response.message, \"\");\n    } else {\n      return new Response(false, response.message, response.data);\n    }\n  }\n\n  async deleteClient(props) {\n    // Initialize the save user model\n    const delete_url = new Client({\n      clientId: props.clientId\n    }); // Object to Map, then to JSON\n\n    const body = Object.fromEntries(delete_url.toJson());\n    let headers = {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${await LocalStorage.getAccessToken()}`\n    };\n    let response = await this.networking.deleteData(\"delete_client\", // API choice is depends on the usage\n    body, headers); // If data is retrieved and the data is not empty, then return\n\n    if (response.isSuccess && response.data !== null && response.data !== \"\") {\n      console.log(response.data);\n      return new Response(true, response.message, response.data); // If data is retrieved and the data is empty, then return\n    } else if (response.isSuccess && response.message === \"No records found\") {\n      return new Response(true, \"No records found\", \"\"); // If http method is timeout or being halt, then return\n    } else if (!response.isSuccess && response.message === \"Session expired\") {\n      // Go back to default page if session expired\n      await FirebaseServices.signOut();\n      await LocalStorage.resetStorage();\n      alert(\"Session Expired.Please sign in again.\");\n      props === null || props === void 0 ? void 0 : props.history.replace(RoutePath.default);\n      return new Response(false, \"Session expired\", \"\"); // If http method is timeout or being halt, then return\n    } else if (!response.isSuccess) {\n      return new Response(false, response.message, \"\");\n    } else {\n      return new Response(false, response.message, response.data);\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/gohshengyang/Documents/GitHub/zeusapi-web/src/services/api/repositories/client_repo.tsx"],"names":["FirebaseServices","LocalStorage","RoutePath","Networking","Response","Client","GetClientResponse","ClientRepo","networking","getAllClients","value","headers","Authorization","getAccessToken","response","getData","isSuccess","data","console","log","getClientResponse","fromJson","message","signOut","resetStorage","alert","history","replace","default","getClientById","path","clientId","saveClient","props","createdById","name","attribute","body","Object","fromEntries","toJson","postData","deleteClient","delete_url","deleteData"],"mappings":"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","sourcesContent":["import { FirebaseServices } from \"../../../utils/firebaseServices\";\nimport { LocalStorage } from \"../../../utils/localStorage\";\nimport { RoutePath } from \"../../../utils/routePath\";\nimport { Networking } from \"../../networking\";\nimport { Response } from \"../../response\";\nimport { Client, GetClientResponse } from \"../models/client_model\";\n\nexport class ClientRepo {\n\tnetworking = new Networking();\n\n\tasync getAllClients(value?: {\n\t\thistory?: any;\n\t}): Promise<Response> {\n\t\tlet headers = {\n\t\t\tAuthorization: `Bearer ${await LocalStorage.getAccessToken()}`,\n\t\t};\n\t\tlet response = await this.networking.getData(\n\t\t\t`get_all_client_by_createdby_id`,\n\t\t\theaders\n\t\t);\n\t\t// If data is retrieved and the data is not empty, then return\n\t\tif (\n\t\t\tresponse.isSuccess &&\n\t\t\tresponse.data !== null &&\n\t\t\tresponse.data !== \"\"\n\t\t) {\n\t\t\tconsole.log(response.data)\n\t\t\tlet getClientResponse = new GetClientResponse().fromJson(\n\t\t\t\tresponse.data\n\t\t\t);\n\t\t\treturn new Response(true, response.message, getClientResponse);\n\n\t\t\t// If data is retrieved and the data is empty, then return\n\t\t} else if (\n\t\t\tresponse.isSuccess &&\n\t\t\tresponse.message === \"No records found\"\n\t\t) {\n\t\t\treturn new Response(true, \"No records found\", \"\");\n\n\t\t\t// If http method is timeout or being halt, then return\n\t\t} else if (\n\t\t\t!response.isSuccess &&\n\t\t\tresponse.message === \"Session expired\"\n\t\t) {\n\t\t\tconsole.log(\"here2\")\n\t\t\t// Go back to default page if session expired\n\t\t\tawait FirebaseServices.signOut();\n\t\t\tawait LocalStorage.resetStorage();\n\t\t\talert(\"Session Expired.Please sign in again.\");\n\t\t\tvalue?.history.replace(RoutePath.default);\n\t\t\treturn new Response(false, \"Session expired\", \"\");\n\n\t\t\t// If http method is timeout or being halt, then return\n\t\t} else if (!response.isSuccess) {\n\t\t\treturn new Response(false, response.message, \"\");\n\t\t} else {\n\t\t\treturn new Response(false, response.message, response.data);\n\t\t}\n\t}\n\n\tasync getClientById(value?: {\n\t\thistory?: any;\n\t\tclientId: string;\n\t}): Promise<Response> {\n\t\tconst path = `clientId=${value?.clientId}`;\n\t\tlet headers = {\n\t\t\tAuthorization: `Bearer ${await LocalStorage.getAccessToken()}`,\n\t\t};\n\t\tlet response = await this.networking.getData(\n\t\t\t`get_client_by_id?${path}`,\n\t\t\theaders\n\t\t);\n\t\t// If data is retrieved and the data is not empty, then return\n\t\tif (\n\t\t\tresponse.isSuccess &&\n\t\t\tresponse.data !== null &&\n\t\t\tresponse.data !== \"\"\n\t\t) {\n\t\t\tconsole.log(response.data)\n\t\t\tlet getClientResponse = new GetClientResponse().fromJson(\n\t\t\t\tresponse.data\n\t\t\t);\n\t\t\treturn new Response(true, response.message, getClientResponse);\n\n\t\t\t// If data is retrieved and the data is empty, then return\n\t\t} else if (\n\t\t\tresponse.isSuccess &&\n\t\t\tresponse.message === \"No records found\"\n\t\t) {\n\t\t\treturn new Response(true, \"No records found\", \"\");\n\n\t\t\t// If http method is timeout or being halt, then return\n\t\t} else if (\n\t\t\t!response.isSuccess &&\n\t\t\tresponse.message === \"Session expired\"\n\t\t) {\n\t\t\t// Go back to default page if session expired\n\t\t\tawait FirebaseServices.signOut();\n\t\t\tawait LocalStorage.resetStorage();\n\t\t\talert(\"Session Expired.Please sign in again.\");\n\t\t\tvalue?.history.replace(RoutePath.default);\n\t\t\treturn new Response(false, \"Session expired\", \"\");\n\n\t\t\t// If http method is timeout or being halt, then return\n\t\t} else if (!response.isSuccess) {\n\t\t\treturn new Response(false, response.message, \"\");\n\t\t} else {\n\t\t\treturn new Response(false, response.message, response.data);\n\t\t}\n\t}\n\n\tasync saveClient(props: {\n\t\thistory?: any;\n\t\tcreatedById?: string;\n\t\tclientId?: string;\n\t\tname?: string;\n\t\tattribute?: Array<any>;\n\t}): Promise<Response> {\n\t\t// Initialize the save user model\n\t\tconst saveClient = new Client({\n\t\t\tcreatedById: props.createdById,\n\t\t\tclientId: props.clientId,\n\t\t\tname: props.name,\n\t\t\tattribute: props.attribute,\n\t\t});\n\n\t\t// Object to Map, then to JSON\n\t\tconst body = Object.fromEntries(saveClient.toJson());\n\n\t\tlet headers = {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tAuthorization: `Bearer ${await LocalStorage.getAccessToken()}`,\n\t\t};\n\n\t\tlet response = await this.networking.postData(\n\t\t\t\"save_client\", // API choice is depends on the usage\n\t\t\tbody,\n\t\t\theaders\n\t\t);\n\n\t\t// If data is retrieved and the data is not empty, then return\n\t\tif (\n\t\t\tresponse.isSuccess &&\n\t\t\tresponse.data !== null &&\n\t\t\tresponse.data !== \"\"\n\t\t) {\n\t\t\tconsole.log(response.data)\n\t\t\treturn new Response(true, response.message, response.data);\n\n\t\t\t// If data is retrieved and the data is empty, then return\n\t\t} else if (\n\t\t\tresponse.isSuccess &&\n\t\t\tresponse.message === \"No records found\"\n\t\t) {\n\t\t\treturn new Response(true, \"No records found\", \"\");\n\n\t\t\t// If http method is timeout or being halt, then return\n\t\t} else if (\n\t\t\t!response.isSuccess &&\n\t\t\tresponse.message === \"Session expired\"\n\t\t) {\n\t\t\t// Go back to default page if session expired\n\t\t\tawait FirebaseServices.signOut();\n\t\t\tawait LocalStorage.resetStorage();\n\t\t\talert(\"Session Expired.Please sign in again.\");\n\t\t\tprops?.history.replace(RoutePath.default);\n\t\t\treturn new Response(false, \"Session expired\", \"\");\n\n\t\t\t// If http method is timeout or being halt, then return\n\t\t}else if (!response.isSuccess) {\n\t\t\treturn new Response(false, response.message, \"\");\n\t\t} else {\n\t\t\treturn new Response(false, response.message, response.data);\n\t\t}\n\t}\n\n\tasync deleteClient(props: {\n\t\thistory?: any;\n\t\tclientId?: string;\n\t}): Promise<Response> {\n\t\t// Initialize the save user model\n\t\tconst delete_url = new Client({\n\t\t\tclientId: props.clientId,\n\t\t});\n\n\t\t// Object to Map, then to JSON\n\t\tconst body = Object.fromEntries(delete_url.toJson());\n\n\t\tlet headers = {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tAuthorization: `Bearer ${await LocalStorage.getAccessToken()}`,\n\t\t};\n\n\t\tlet response = await this.networking.deleteData(\n\t\t\t\"delete_client\", // API choice is depends on the usage\n\t\t\tbody,\n\t\t\theaders\n\t\t);\n\n\t\t// If data is retrieved and the data is not empty, then return\n\t\tif (\n\t\t\tresponse.isSuccess &&\n\t\t\tresponse.data !== null &&\n\t\t\tresponse.data !== \"\"\n\t\t) {\n\t\t\tconsole.log(response.data)\n\t\t\treturn new Response(true, response.message, response.data);\n\n\t\t\t// If data is retrieved and the data is empty, then return\n\t\t} else if (\n\t\t\tresponse.isSuccess &&\n\t\t\tresponse.message === \"No records found\"\n\t\t) {\n\t\t\treturn new Response(true, \"No records found\", \"\");\n\n\t\t\t// If http method is timeout or being halt, then return\n\t\t} else if (\n\t\t\t!response.isSuccess &&\n\t\t\tresponse.message === \"Session expired\"\n\t\t) {\n\t\t\t// Go back to default page if session expired\n\t\t\tawait FirebaseServices.signOut();\n\t\t\tawait LocalStorage.resetStorage();\n\t\t\talert(\"Session Expired.Please sign in again.\");\n\t\t\tprops?.history.replace(RoutePath.default);\n\t\t\treturn new Response(false, \"Session expired\", \"\");\n\n\t\t\t// If http method is timeout or being halt, then return\n\t\t}else if (!response.isSuccess) {\n\t\t\treturn new Response(false, response.message, \"\");\n\t\t} else {\n\t\t\treturn new Response(false, response.message, response.data);\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}