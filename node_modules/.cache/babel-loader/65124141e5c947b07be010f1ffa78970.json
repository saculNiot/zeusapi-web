{"ast":null,"code":"var _jsxFileName = \"/Users/gohshengyang/Documents/GitHub/zeusapi-web/src/pages/relationship/CreateRelationship.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { FillForm } from \"../../utils/components\";\nimport { FormLabel } from \"@chakra-ui/react\";\nimport { Form, message, Select } from \"antd\";\nimport { LocalStorage } from \"../../utils/localStorage\";\nimport { RoleRepo } from \"../../services/api/repositories/role_repo\";\nimport { Role } from \"../../services/api/models/role_model\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { RoutePath } from \"../../utils/routePath\";\nimport { ClientRepo } from \"../../services/api/repositories/client_repo\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  Option\n} = Select;\nexport const CreateRelationship = () => {\n  _s();\n\n  var _roleData2;\n\n  let location = useLocation();\n  let history = useHistory();\n  let clientRepo = new ClientRepo();\n  let roleRepo = new RoleRepo();\n  const locationState = location.state;\n  const [form] = Form.useForm();\n  const [_roleList, setRoleList] = useState();\n  const [_clientList, setClientList] = useState();\n  const [_isFormLoading, setFormLoading] = useState(true);\n\n  async function getClients() {\n    let userId = await LocalStorage.getUserID();\n    let apiResult = await clientRepo.getAllClients({\n      userId: userId\n    });\n\n    if (apiResult.isSuccess) {\n      if (apiResult.data.length > 0) apiResult.data.forEach(element => {\n        setClientList(prevState => {\n          return [...prevState, element];\n        });\n      });\n    }\n  }\n\n  const children = /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n      children: \"Client\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n      name: \"client\",\n      rules: [{\n        required: true,\n        message: \"Please select a client\"\n      }],\n      children: /*#__PURE__*/_jsxDEV(Select, {\n        placeholder: \"Select a client\",\n        allowClear: true,\n        children: [/*#__PURE__*/_jsxDEV(Option, {\n          value: \"male\",\n          children: \"male\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Option, {\n          value: \"female\",\n          children: \"female\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Option, {\n          value: \"other\",\n          children: \"other\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n\n  const onSubmit = async values => {\n    let userId = await LocalStorage.getUserID();\n    let apiResult = await roleRepo.saveRole({\n      roleId: locationState !== undefined ? locationState.roleId : null,\n      createdById: userId !== null && userId !== void 0 ? userId : \"\",\n      name: values[\"name\"]\n    });\n\n    if (apiResult.isSuccess) {\n      message.success(\"Role has created\");\n      locationState !== undefined ? history.replace(RoutePath.dashboard) : form.resetFields();\n    } else {\n      message.error(\"Fail to save\");\n    }\n  };\n\n  useEffect(() => {\n    async function initState() {\n      if (locationState !== undefined) {\n        let apiResult = await roleRepo.getRoleById({\n          roleId: locationState.roleId\n        });\n\n        if (apiResult.isSuccess) {\n          setRoleData(new Role({\n            name: apiResult.data[0].name\n          }));\n        }\n      }\n\n      setFormLoading(false);\n    }\n\n    initState();\n    return () => {\n      setRoleData(new Role({}));\n    };\n  }, []); // Set Initial Values Using State in antd form\n\n  useEffect(() => {\n    form.resetFields();\n  }, [_roleData]);\n  return /*#__PURE__*/_jsxDEV(FillForm, {\n    formComponents: children,\n    title: \"Role Details\",\n    subtitle: \"Please fill in the name of the role\",\n    initialValue: {\n      name: (_roleData2 = _roleData) === null || _roleData2 === void 0 ? void 0 : _roleData2.name\n    },\n    form: form,\n    onSubmit: onSubmit,\n    isFormLoading: _isFormLoading,\n    children: \" \"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 3\n  }, this);\n};\n\n_s(CreateRelationship, \"qKlyfxdiAgtXp2XXCPjmxn+EGA0=\", false, function () {\n  return [useLocation, useHistory, Form.useForm];\n});\n\n_c = CreateRelationship;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateRelationship\");","map":{"version":3,"sources":["/Users/gohshengyang/Documents/GitHub/zeusapi-web/src/pages/relationship/CreateRelationship.tsx"],"names":["React","useEffect","useState","FillForm","FormLabel","Form","message","Select","LocalStorage","RoleRepo","Role","useHistory","useLocation","RoutePath","ClientRepo","Option","CreateRelationship","location","history","clientRepo","roleRepo","locationState","state","form","useForm","_roleList","setRoleList","_clientList","setClientList","_isFormLoading","setFormLoading","getClients","userId","getUserID","apiResult","getAllClients","isSuccess","data","length","forEach","element","prevState","children","required","onSubmit","values","saveRole","roleId","undefined","createdById","name","success","replace","dashboard","resetFields","error","initState","getRoleById","setRoleData","_roleData"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { FillForm } from \"../../utils/components\";\nimport { FormLabel, Button as ChakraButton, Text } from \"@chakra-ui/react\";\nimport { Form, Input, message, Select } from \"antd\";\nimport { LocalStorage } from \"../../utils/localStorage\";\nimport { RoleRepo } from \"../../services/api/repositories/role_repo\";\nimport { Role } from \"../../services/api/models/role_model\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { RoutePath } from \"../../utils/routePath\";\nimport { UserRepo } from \"../../services/api/repositories/user_repo\";\nimport { ClientRepo } from \"../../services/api/repositories/client_repo\";\nimport { Client } from \"../../services/api/models/client_model\";\n\nconst { Option } = Select;\n\nexport const CreateRelationship: React.FC<any> = () => {\n\tlet location = useLocation();\n\tlet history = useHistory();\n\n    let clientRepo = new ClientRepo();\n\tlet roleRepo = new RoleRepo();\n\n\tconst locationState: any = location.state;\n\tconst [form] = Form.useForm();\n\n    const [_roleList, setRoleList] = useState<Array<Role>>();\n    const [_clientList, setClientList] = useState<Array<Client>>();\n\tconst [_isFormLoading, setFormLoading] = useState<boolean>(true);\n\n    async function getClients() {\n\n\t\tlet userId = await LocalStorage.getUserID();\n\t\tlet apiResult = await clientRepo.getAllClients({\n\t\t\tuserId: userId!,\n\t\t});\n\n\t\tif (apiResult.isSuccess) {\n\t\t\tif (apiResult.data.length > 0)\n\t\t\t\tapiResult.data.forEach((element: Client) => {\n\t\t\t\t\tsetClientList((prevState) => {\n\t\t\t\t\t\treturn [...prevState, element];\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t}\n\t}\n\n\tconst children = (\n\t\t<>\n\t\t\t<FormLabel>Client</FormLabel>\n\t\t\t<Form.Item\n\t\t\t\tname=\"client\"\n\t\t\t\trules={[\n\t\t\t\t\t{\n\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\tmessage: \"Please select a client\",\n\t\t\t\t\t},\n\t\t\t\t]}\n\t\t\t>\n\t\t\t\t<Select\n\t\t\t\t\tplaceholder=\"Select a client\"\n\t\t\t\t\tallowClear\n\t\t\t\t>\n\t\t\t\t\t<Option value=\"male\">male</Option>\n\t\t\t\t\t<Option value=\"female\">female</Option>\n\t\t\t\t\t<Option value=\"other\">other</Option>\n\t\t\t\t</Select>\n\t\t\t</Form.Item>\n\t\t</>\n\t);\n\n\tconst onSubmit = async (values: any) => {\n\t\tlet userId = await LocalStorage.getUserID();\n\t\tlet apiResult = await roleRepo.saveRole({\n\t\t\troleId: locationState !== undefined ? locationState.roleId : null,\n\t\t\tcreatedById: userId ?? \"\",\n\t\t\tname: values[\"name\"],\n\t\t});\n\t\tif (apiResult.isSuccess) {\n\t\t\tmessage.success(\"Role has created\");\n\t\t\tlocationState !== undefined\n\t\t\t\t? history.replace(RoutePath.dashboard)\n\t\t\t\t: form.resetFields();\n\t\t} else {\n\t\t\tmessage.error(\"Fail to save\");\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tasync function initState() {\n\t\t\tif (locationState !== undefined) {\n\t\t\t\tlet apiResult = await roleRepo.getRoleById({\n\t\t\t\t\troleId: locationState.roleId!,\n\t\t\t\t});\n\t\t\t\tif (apiResult.isSuccess) {\n\t\t\t\t\tsetRoleData(\n\t\t\t\t\t\tnew Role({\n\t\t\t\t\t\t\tname: apiResult.data[0].name,\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\tsetFormLoading(false);\n\t\t}\n\n\t\tinitState();\n\n\t\treturn () => {\n\t\t\tsetRoleData(new Role({}));\n\t\t};\n\t}, []);\n\n\t// Set Initial Values Using State in antd form\n\tuseEffect(() => {\n\t\tform.resetFields();\n\t}, [_roleData]);\n\n\treturn (\n\t\t<FillForm\n\t\t\tformComponents={children}\n\t\t\ttitle={\"Role Details\"}\n\t\t\tsubtitle={\"Please fill in the name of the role\"}\n\t\t\tinitialValue={{ name: _roleData?.name }}\n\t\t\tform={form}\n\t\t\tonSubmit={onSubmit}\n\t\t\tisFormLoading={_isFormLoading}\n\t\t>\n\t\t\t{\" \"}\n\t\t</FillForm>\n\t);\n};\n"]},"metadata":{},"sourceType":"module"}